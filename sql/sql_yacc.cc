
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 24 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      (tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_NDB_BINLOG
       || tmp->var == Sys_gtid_next_list_ptr
#endif
     ))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}




/* Line 189 of yacc.c  */
#line 988 "D:/mysqlDebugSpace/mysql-5.6.7-dev/cbuild/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKSUM_SYM = 316,
     CHECK_SYM = 317,
     CIPHER_SYM = 318,
     CLASS_ORIGIN_SYM = 319,
     CLIENT_SYM = 320,
     CLOSE_SYM = 321,
     COALESCE = 322,
     CODE_SYM = 323,
     COLLATE_SYM = 324,
     COLLATION_SYM = 325,
     COLUMNS = 326,
     COLUMN_SYM = 327,
     COLUMN_FORMAT_SYM = 328,
     COLUMN_NAME_SYM = 329,
     COMMENT_SYM = 330,
     COMMITTED_SYM = 331,
     COMMIT_SYM = 332,
     COMPACT_SYM = 333,
     COMPLETION_SYM = 334,
     COMPRESSED_SYM = 335,
     CONCURRENT = 336,
     CONDITION_SYM = 337,
     CONNECTION_SYM = 338,
     CONSISTENT_SYM = 339,
     CONSTRAINT = 340,
     CONSTRAINT_CATALOG_SYM = 341,
     CONSTRAINT_NAME_SYM = 342,
     CONSTRAINT_SCHEMA_SYM = 343,
     CONTAINS_SYM = 344,
     CONTEXT_SYM = 345,
     CONTINUE_SYM = 346,
     CONTRIBUTORS_SYM = 347,
     CONVERT_SYM = 348,
     COUNT_SYM = 349,
     CPU_SYM = 350,
     CREATE = 351,
     CROSS = 352,
     CUBE_SYM = 353,
     CURDATE = 354,
     CURRENT_SYM = 355,
     CURRENT_USER = 356,
     CURSOR_SYM = 357,
     CURSOR_NAME_SYM = 358,
     CURTIME = 359,
     DATABASE = 360,
     DATABASES = 361,
     DATAFILE_SYM = 362,
     DATA_SYM = 363,
     DATETIME = 364,
     DATE_ADD_INTERVAL = 365,
     DATE_SUB_INTERVAL = 366,
     DATE_SYM = 367,
     DAY_HOUR_SYM = 368,
     DAY_MICROSECOND_SYM = 369,
     DAY_MINUTE_SYM = 370,
     DAY_SECOND_SYM = 371,
     DAY_SYM = 372,
     DBXP_SELECT_SYM = 373,
     DEALLOCATE_SYM = 374,
     DECIMAL_NUM = 375,
     DECIMAL_SYM = 376,
     DECLARE_SYM = 377,
     DEFAULT = 378,
     DEFAULT_AUTH_SYM = 379,
     DEFINER_SYM = 380,
     DELAYED_SYM = 381,
     DELAY_KEY_WRITE_SYM = 382,
     DELETE_SYM = 383,
     DESC = 384,
     DESCRIBE = 385,
     DES_KEY_FILE = 386,
     DETERMINISTIC_SYM = 387,
     DIAGNOSTICS_SYM = 388,
     DIRECTORY_SYM = 389,
     DISABLE_SYM = 390,
     DISCARD = 391,
     DISK_SYM = 392,
     DISTINCT = 393,
     DIV_SYM = 394,
     DOUBLE_SYM = 395,
     DO_SYM = 396,
     DROP = 397,
     DUAL_SYM = 398,
     DUMPFILE = 399,
     DUPLICATE_SYM = 400,
     DYNAMIC_SYM = 401,
     EACH_SYM = 402,
     ELSE = 403,
     ELSEIF_SYM = 404,
     ENABLE_SYM = 405,
     ENCLOSED = 406,
     END = 407,
     ENDS_SYM = 408,
     END_OF_INPUT = 409,
     ENGINES_SYM = 410,
     ENGINE_SYM = 411,
     ENUM = 412,
     EQ = 413,
     EQUAL_SYM = 414,
     ERROR_SYM = 415,
     ERRORS = 416,
     ESCAPED = 417,
     ESCAPE_SYM = 418,
     EVENTS_SYM = 419,
     EVENT_SYM = 420,
     EVERY_SYM = 421,
     EXCHANGE_SYM = 422,
     EXECUTE_SYM = 423,
     EXISTS = 424,
     EXIT_SYM = 425,
     EXPANSION_SYM = 426,
     EXPIRE_SYM = 427,
     EXPORT_SYM = 428,
     EXTENDED_SYM = 429,
     EXTENT_SIZE_SYM = 430,
     EXTRACT_SYM = 431,
     FALSE_SYM = 432,
     FAST_SYM = 433,
     FAULTS_SYM = 434,
     FETCH_SYM = 435,
     FILE_SYM = 436,
     FIRST_SYM = 437,
     FIXED_SYM = 438,
     FLOAT_NUM = 439,
     FLOAT_SYM = 440,
     FLUSH_SYM = 441,
     FORCE_SYM = 442,
     FOREIGN = 443,
     FOR_SYM = 444,
     FORMAT_SYM = 445,
     FOUND_SYM = 446,
     FROM = 447,
     FULL = 448,
     FULLTEXT_SYM = 449,
     FUNCTION_SYM = 450,
     GE = 451,
     GENERAL = 452,
     GEOMETRYCOLLECTION = 453,
     GEOMETRY_SYM = 454,
     GET_FORMAT = 455,
     GET_SYM = 456,
     GLOBAL_SYM = 457,
     GRANT = 458,
     GRANTS = 459,
     GROUP_SYM = 460,
     GROUP_CONCAT_SYM = 461,
     GT_SYM = 462,
     HANDLER_SYM = 463,
     HASH_SYM = 464,
     HAVING = 465,
     HELP_SYM = 466,
     HEX_NUM = 467,
     HIGH_PRIORITY = 468,
     HOST_SYM = 469,
     HOSTS_SYM = 470,
     HOUR_MICROSECOND_SYM = 471,
     HOUR_MINUTE_SYM = 472,
     HOUR_SECOND_SYM = 473,
     HOUR_SYM = 474,
     IDENT = 475,
     IDENTIFIED_SYM = 476,
     IDENT_QUOTED = 477,
     IF = 478,
     IGNORE_SYM = 479,
     IGNORE_SERVER_IDS_SYM = 480,
     IMPORT = 481,
     INDEXES = 482,
     INDEX_SYM = 483,
     INFILE = 484,
     INITIAL_SIZE_SYM = 485,
     INNER_SYM = 486,
     INOUT_SYM = 487,
     INSENSITIVE_SYM = 488,
     INSERT = 489,
     INSERT_METHOD = 490,
     INSTALL_SYM = 491,
     INTERVAL_SYM = 492,
     INTO = 493,
     INT_SYM = 494,
     INVOKER_SYM = 495,
     IN_SYM = 496,
     IO_AFTER_GTIDS = 497,
     IO_BEFORE_GTIDS = 498,
     IO_SYM = 499,
     IPC_SYM = 500,
     IS = 501,
     ISOLATION = 502,
     ISSUER_SYM = 503,
     ITERATE_SYM = 504,
     JOIN_SYM = 505,
     KEYS = 506,
     KEY_BLOCK_SIZE = 507,
     KEY_SYM = 508,
     KILL_SYM = 509,
     LANGUAGE_SYM = 510,
     LAST_SYM = 511,
     LE = 512,
     LEADING = 513,
     LEAVES = 514,
     LEAVE_SYM = 515,
     LEFT = 516,
     LESS_SYM = 517,
     LEVEL_SYM = 518,
     LEX_HOSTNAME = 519,
     LIKE = 520,
     LIMIT = 521,
     LINEAR_SYM = 522,
     LINES = 523,
     LINESTRING = 524,
     LIST_SYM = 525,
     LOAD = 526,
     LOCAL_SYM = 527,
     LOCATOR_SYM = 528,
     LOCKS_SYM = 529,
     LOCK_SYM = 530,
     LOGFILE_SYM = 531,
     LOGS_SYM = 532,
     LONGBLOB = 533,
     LONGTEXT = 534,
     LONG_NUM = 535,
     LONG_SYM = 536,
     LOOP_SYM = 537,
     LOW_PRIORITY = 538,
     LT = 539,
     MASTER_AUTO_POSITION_SYM = 540,
     MASTER_BIND_SYM = 541,
     MASTER_CONNECT_RETRY_SYM = 542,
     MASTER_DELAY_SYM = 543,
     MASTER_HOST_SYM = 544,
     MASTER_LOG_FILE_SYM = 545,
     MASTER_LOG_POS_SYM = 546,
     MASTER_PASSWORD_SYM = 547,
     MASTER_PORT_SYM = 548,
     MASTER_RETRY_COUNT_SYM = 549,
     MASTER_SERVER_ID_SYM = 550,
     MASTER_SSL_CAPATH_SYM = 551,
     MASTER_SSL_CA_SYM = 552,
     MASTER_SSL_CERT_SYM = 553,
     MASTER_SSL_CIPHER_SYM = 554,
     MASTER_SSL_CRL_SYM = 555,
     MASTER_SSL_CRLPATH_SYM = 556,
     MASTER_SSL_KEY_SYM = 557,
     MASTER_SSL_SYM = 558,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 559,
     MASTER_SYM = 560,
     MASTER_USER_SYM = 561,
     MASTER_HEARTBEAT_PERIOD_SYM = 562,
     MATCH = 563,
     MAX_CONNECTIONS_PER_HOUR = 564,
     MAX_QUERIES_PER_HOUR = 565,
     MAX_ROWS = 566,
     MAX_SIZE_SYM = 567,
     MAX_SYM = 568,
     MAX_UPDATES_PER_HOUR = 569,
     MAX_USER_CONNECTIONS_SYM = 570,
     MAX_VALUE_SYM = 571,
     MEDIUMBLOB = 572,
     MEDIUMINT = 573,
     MEDIUMTEXT = 574,
     MEDIUM_SYM = 575,
     MEMORY_SYM = 576,
     MERGE_SYM = 577,
     MESSAGE_TEXT_SYM = 578,
     MICROSECOND_SYM = 579,
     MIGRATE_SYM = 580,
     MINUTE_MICROSECOND_SYM = 581,
     MINUTE_SECOND_SYM = 582,
     MINUTE_SYM = 583,
     MIN_ROWS = 584,
     MIN_SYM = 585,
     MODE_SYM = 586,
     MODIFIES_SYM = 587,
     MODIFY_SYM = 588,
     MOD_SYM = 589,
     MONTH_SYM = 590,
     MULTILINESTRING = 591,
     MULTIPOINT = 592,
     MULTIPOLYGON = 593,
     MUTEX_SYM = 594,
     MYSQL_ERRNO_SYM = 595,
     NAMES_SYM = 596,
     NAME_SYM = 597,
     NATIONAL_SYM = 598,
     NATURAL = 599,
     NCHAR_STRING = 600,
     NCHAR_SYM = 601,
     NDBCLUSTER_SYM = 602,
     NE = 603,
     NEG = 604,
     NEW_SYM = 605,
     NEXT_SYM = 606,
     NODEGROUP_SYM = 607,
     NONE_SYM = 608,
     NOT2_SYM = 609,
     NOT_SYM = 610,
     NOW_SYM = 611,
     NO_SYM = 612,
     NO_WAIT_SYM = 613,
     NO_WRITE_TO_BINLOG = 614,
     NULL_SYM = 615,
     NUM = 616,
     NUMBER_SYM = 617,
     NUMERIC_SYM = 618,
     NVARCHAR_SYM = 619,
     OFFSET_SYM = 620,
     OLD_PASSWORD = 621,
     ON = 622,
     ONE_SYM = 623,
     ONLY_SYM = 624,
     OPEN_SYM = 625,
     OPTIMIZE = 626,
     OPTIONS_SYM = 627,
     OPTION = 628,
     OPTIONALLY = 629,
     OR2_SYM = 630,
     ORDER_SYM = 631,
     OR_OR_SYM = 632,
     OR_SYM = 633,
     OUTER = 634,
     OUTFILE = 635,
     OUT_SYM = 636,
     OWNER_SYM = 637,
     PACK_KEYS_SYM = 638,
     PAGE_SYM = 639,
     PARAM_MARKER = 640,
     PARSER_SYM = 641,
     PARTIAL = 642,
     PARTITION_SYM = 643,
     PARTITIONS_SYM = 644,
     PARTITIONING_SYM = 645,
     PASSWORD = 646,
     PHASE_SYM = 647,
     PLUGIN_DIR_SYM = 648,
     PLUGIN_SYM = 649,
     PLUGINS_SYM = 650,
     POINT_SYM = 651,
     POLYGON = 652,
     PORT_SYM = 653,
     POSITION_SYM = 654,
     PRECISION = 655,
     PREPARE_SYM = 656,
     PRESERVE_SYM = 657,
     PREV_SYM = 658,
     PRIMARY_SYM = 659,
     PRIVILEGES = 660,
     PROCEDURE_SYM = 661,
     PROCESS = 662,
     PROCESSLIST_SYM = 663,
     PROFILE_SYM = 664,
     PROFILES_SYM = 665,
     PROXY_SYM = 666,
     PURGE = 667,
     QUARTER_SYM = 668,
     QUERY_SYM = 669,
     QUICK = 670,
     RANGE_SYM = 671,
     READS_SYM = 672,
     READ_ONLY_SYM = 673,
     READ_SYM = 674,
     READ_WRITE_SYM = 675,
     REAL = 676,
     REBUILD_SYM = 677,
     RECOVER_SYM = 678,
     REDOFILE_SYM = 679,
     REDO_BUFFER_SIZE_SYM = 680,
     REDUNDANT_SYM = 681,
     REFERENCES = 682,
     REGEXP = 683,
     RELAY = 684,
     RELAYLOG_SYM = 685,
     RELAY_LOG_FILE_SYM = 686,
     RELAY_LOG_POS_SYM = 687,
     RELAY_THREAD = 688,
     RELEASE_SYM = 689,
     RELOAD = 690,
     REMOVE_SYM = 691,
     RENAME = 692,
     REORGANIZE_SYM = 693,
     REPAIR = 694,
     REPEATABLE_SYM = 695,
     REPEAT_SYM = 696,
     REPLACE = 697,
     REPLICATION = 698,
     REQUIRE_SYM = 699,
     RESET_SYM = 700,
     RESIGNAL_SYM = 701,
     RESOURCES = 702,
     RESTORE_SYM = 703,
     RESTRICT = 704,
     RESUME_SYM = 705,
     RETURNED_SQLSTATE_SYM = 706,
     RETURNS_SYM = 707,
     RETURN_SYM = 708,
     REVERSE_SYM = 709,
     REVOKE = 710,
     RIGHT = 711,
     ROLLBACK_SYM = 712,
     ROLLUP_SYM = 713,
     ROUTINE_SYM = 714,
     ROWS_SYM = 715,
     ROW_FORMAT_SYM = 716,
     ROW_SYM = 717,
     ROW_COUNT_SYM = 718,
     RTREE_SYM = 719,
     SAVEPOINT_SYM = 720,
     SCHEDULE_SYM = 721,
     SCHEMA_NAME_SYM = 722,
     SECOND_MICROSECOND_SYM = 723,
     SECOND_SYM = 724,
     SECURITY_SYM = 725,
     SELECT_SYM = 726,
     SENSITIVE_SYM = 727,
     SEPARATOR_SYM = 728,
     SERIALIZABLE_SYM = 729,
     SERIAL_SYM = 730,
     SESSION_SYM = 731,
     SERVER_SYM = 732,
     SERVER_OPTIONS = 733,
     SET = 734,
     SET_VAR = 735,
     SHARE_SYM = 736,
     SHIFT_LEFT = 737,
     SHIFT_RIGHT = 738,
     SHOW = 739,
     SHUTDOWN = 740,
     SIGNAL_SYM = 741,
     SIGNED_SYM = 742,
     SIMPLE_SYM = 743,
     SLAVE = 744,
     SLOW = 745,
     SMALLINT = 746,
     SNAPSHOT_SYM = 747,
     SOCKET_SYM = 748,
     SONAME_SYM = 749,
     SOUNDS_SYM = 750,
     SOURCE_SYM = 751,
     SPATIAL_SYM = 752,
     SPECIFIC_SYM = 753,
     SQLEXCEPTION_SYM = 754,
     SQLSTATE_SYM = 755,
     SQLWARNING_SYM = 756,
     SQL_AFTER_GTIDS = 757,
     SQL_AFTER_MTS_GAPS = 758,
     SQL_BEFORE_GTIDS = 759,
     SQL_BIG_RESULT = 760,
     SQL_BUFFER_RESULT = 761,
     SQL_CACHE_SYM = 762,
     SQL_CALC_FOUND_ROWS = 763,
     SQL_NO_CACHE_SYM = 764,
     SQL_SMALL_RESULT = 765,
     SQL_SYM = 766,
     SQL_THREAD = 767,
     SSL_SYM = 768,
     STARTING = 769,
     STARTS_SYM = 770,
     START_SYM = 771,
     STATS_AUTO_RECALC_SYM = 772,
     STATS_PERSISTENT_SYM = 773,
     STATS_SAMPLE_PAGES_SYM = 774,
     STATUS_SYM = 775,
     STDDEV_SAMP_SYM = 776,
     STD_SYM = 777,
     STOP_SYM = 778,
     STORAGE_SYM = 779,
     STRAIGHT_JOIN = 780,
     STRING_SYM = 781,
     SUBCLASS_ORIGIN_SYM = 782,
     SUBDATE_SYM = 783,
     SUBJECT_SYM = 784,
     SUBPARTITIONS_SYM = 785,
     SUBPARTITION_SYM = 786,
     SUBSTRING = 787,
     SUM_SYM = 788,
     SUPER_SYM = 789,
     SUSPEND_SYM = 790,
     SWAPS_SYM = 791,
     SWITCHES_SYM = 792,
     SYSDATE = 793,
     TABLES = 794,
     TABLESPACE = 795,
     TABLE_REF_PRIORITY = 796,
     TABLE_SYM = 797,
     TABLE_CHECKSUM_SYM = 798,
     TABLE_NAME_SYM = 799,
     TEMPORARY = 800,
     TEMPTABLE_SYM = 801,
     TERMINATED = 802,
     TEXT_STRING = 803,
     TEXT_SYM = 804,
     THAN_SYM = 805,
     THEN_SYM = 806,
     TIMESTAMP = 807,
     TIMESTAMP_ADD = 808,
     TIMESTAMP_DIFF = 809,
     TIME_SYM = 810,
     TINYBLOB = 811,
     TINYINT = 812,
     TINYTEXT = 813,
     TO_SYM = 814,
     TRAILING = 815,
     TRANSACTION_SYM = 816,
     TRIGGERS_SYM = 817,
     TRIGGER_SYM = 818,
     TRIM = 819,
     TRUE_SYM = 820,
     TRUNCATE_SYM = 821,
     TYPES_SYM = 822,
     TYPE_SYM = 823,
     UDF_RETURNS_SYM = 824,
     ULONGLONG_NUM = 825,
     UNCOMMITTED_SYM = 826,
     UNDEFINED_SYM = 827,
     UNDERSCORE_CHARSET = 828,
     UNDOFILE_SYM = 829,
     UNDO_BUFFER_SIZE_SYM = 830,
     UNDO_SYM = 831,
     UNICODE_SYM = 832,
     UNINSTALL_SYM = 833,
     UNION_SYM = 834,
     UNIQUE_SYM = 835,
     UNKNOWN_SYM = 836,
     UNLOCK_SYM = 837,
     UNSIGNED = 838,
     UNTIL_SYM = 839,
     UPDATE_SYM = 840,
     UPGRADE_SYM = 841,
     USAGE = 842,
     USER = 843,
     USE_FRM = 844,
     USE_SYM = 845,
     USING = 846,
     UTC_DATE_SYM = 847,
     UTC_TIMESTAMP_SYM = 848,
     UTC_TIME_SYM = 849,
     VALUES = 850,
     VALUE_SYM = 851,
     VARBINARY = 852,
     VARCHAR = 853,
     VARIABLES = 854,
     VARIANCE_SYM = 855,
     VARYING = 856,
     VAR_SAMP_SYM = 857,
     VIEW_SYM = 858,
     WAIT_SYM = 859,
     WARNINGS = 860,
     WEEK_SYM = 861,
     WEIGHT_STRING_SYM = 862,
     WHEN_SYM = 863,
     WHERE = 864,
     WHILE_SYM = 865,
     WITH = 866,
     WITH_CUBE_SYM = 867,
     WITH_ROLLUP_SYM = 868,
     WORK_SYM = 869,
     WRAPPER_SYM = 870,
     WRITE_SYM = 871,
     X509_SYM = 872,
     XA_SYM = 873,
     XML_SYM = 874,
     XOR = 875,
     YEAR_MONTH_SYM = 876,
     YEAR_SYM = 877,
     ZEROFILL = 878
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKSUM_SYM 316
#define CHECK_SYM 317
#define CIPHER_SYM 318
#define CLASS_ORIGIN_SYM 319
#define CLIENT_SYM 320
#define CLOSE_SYM 321
#define COALESCE 322
#define CODE_SYM 323
#define COLLATE_SYM 324
#define COLLATION_SYM 325
#define COLUMNS 326
#define COLUMN_SYM 327
#define COLUMN_FORMAT_SYM 328
#define COLUMN_NAME_SYM 329
#define COMMENT_SYM 330
#define COMMITTED_SYM 331
#define COMMIT_SYM 332
#define COMPACT_SYM 333
#define COMPLETION_SYM 334
#define COMPRESSED_SYM 335
#define CONCURRENT 336
#define CONDITION_SYM 337
#define CONNECTION_SYM 338
#define CONSISTENT_SYM 339
#define CONSTRAINT 340
#define CONSTRAINT_CATALOG_SYM 341
#define CONSTRAINT_NAME_SYM 342
#define CONSTRAINT_SCHEMA_SYM 343
#define CONTAINS_SYM 344
#define CONTEXT_SYM 345
#define CONTINUE_SYM 346
#define CONTRIBUTORS_SYM 347
#define CONVERT_SYM 348
#define COUNT_SYM 349
#define CPU_SYM 350
#define CREATE 351
#define CROSS 352
#define CUBE_SYM 353
#define CURDATE 354
#define CURRENT_SYM 355
#define CURRENT_USER 356
#define CURSOR_SYM 357
#define CURSOR_NAME_SYM 358
#define CURTIME 359
#define DATABASE 360
#define DATABASES 361
#define DATAFILE_SYM 362
#define DATA_SYM 363
#define DATETIME 364
#define DATE_ADD_INTERVAL 365
#define DATE_SUB_INTERVAL 366
#define DATE_SYM 367
#define DAY_HOUR_SYM 368
#define DAY_MICROSECOND_SYM 369
#define DAY_MINUTE_SYM 370
#define DAY_SECOND_SYM 371
#define DAY_SYM 372
#define DBXP_SELECT_SYM 373
#define DEALLOCATE_SYM 374
#define DECIMAL_NUM 375
#define DECIMAL_SYM 376
#define DECLARE_SYM 377
#define DEFAULT 378
#define DEFAULT_AUTH_SYM 379
#define DEFINER_SYM 380
#define DELAYED_SYM 381
#define DELAY_KEY_WRITE_SYM 382
#define DELETE_SYM 383
#define DESC 384
#define DESCRIBE 385
#define DES_KEY_FILE 386
#define DETERMINISTIC_SYM 387
#define DIAGNOSTICS_SYM 388
#define DIRECTORY_SYM 389
#define DISABLE_SYM 390
#define DISCARD 391
#define DISK_SYM 392
#define DISTINCT 393
#define DIV_SYM 394
#define DOUBLE_SYM 395
#define DO_SYM 396
#define DROP 397
#define DUAL_SYM 398
#define DUMPFILE 399
#define DUPLICATE_SYM 400
#define DYNAMIC_SYM 401
#define EACH_SYM 402
#define ELSE 403
#define ELSEIF_SYM 404
#define ENABLE_SYM 405
#define ENCLOSED 406
#define END 407
#define ENDS_SYM 408
#define END_OF_INPUT 409
#define ENGINES_SYM 410
#define ENGINE_SYM 411
#define ENUM 412
#define EQ 413
#define EQUAL_SYM 414
#define ERROR_SYM 415
#define ERRORS 416
#define ESCAPED 417
#define ESCAPE_SYM 418
#define EVENTS_SYM 419
#define EVENT_SYM 420
#define EVERY_SYM 421
#define EXCHANGE_SYM 422
#define EXECUTE_SYM 423
#define EXISTS 424
#define EXIT_SYM 425
#define EXPANSION_SYM 426
#define EXPIRE_SYM 427
#define EXPORT_SYM 428
#define EXTENDED_SYM 429
#define EXTENT_SIZE_SYM 430
#define EXTRACT_SYM 431
#define FALSE_SYM 432
#define FAST_SYM 433
#define FAULTS_SYM 434
#define FETCH_SYM 435
#define FILE_SYM 436
#define FIRST_SYM 437
#define FIXED_SYM 438
#define FLOAT_NUM 439
#define FLOAT_SYM 440
#define FLUSH_SYM 441
#define FORCE_SYM 442
#define FOREIGN 443
#define FOR_SYM 444
#define FORMAT_SYM 445
#define FOUND_SYM 446
#define FROM 447
#define FULL 448
#define FULLTEXT_SYM 449
#define FUNCTION_SYM 450
#define GE 451
#define GENERAL 452
#define GEOMETRYCOLLECTION 453
#define GEOMETRY_SYM 454
#define GET_FORMAT 455
#define GET_SYM 456
#define GLOBAL_SYM 457
#define GRANT 458
#define GRANTS 459
#define GROUP_SYM 460
#define GROUP_CONCAT_SYM 461
#define GT_SYM 462
#define HANDLER_SYM 463
#define HASH_SYM 464
#define HAVING 465
#define HELP_SYM 466
#define HEX_NUM 467
#define HIGH_PRIORITY 468
#define HOST_SYM 469
#define HOSTS_SYM 470
#define HOUR_MICROSECOND_SYM 471
#define HOUR_MINUTE_SYM 472
#define HOUR_SECOND_SYM 473
#define HOUR_SYM 474
#define IDENT 475
#define IDENTIFIED_SYM 476
#define IDENT_QUOTED 477
#define IF 478
#define IGNORE_SYM 479
#define IGNORE_SERVER_IDS_SYM 480
#define IMPORT 481
#define INDEXES 482
#define INDEX_SYM 483
#define INFILE 484
#define INITIAL_SIZE_SYM 485
#define INNER_SYM 486
#define INOUT_SYM 487
#define INSENSITIVE_SYM 488
#define INSERT 489
#define INSERT_METHOD 490
#define INSTALL_SYM 491
#define INTERVAL_SYM 492
#define INTO 493
#define INT_SYM 494
#define INVOKER_SYM 495
#define IN_SYM 496
#define IO_AFTER_GTIDS 497
#define IO_BEFORE_GTIDS 498
#define IO_SYM 499
#define IPC_SYM 500
#define IS 501
#define ISOLATION 502
#define ISSUER_SYM 503
#define ITERATE_SYM 504
#define JOIN_SYM 505
#define KEYS 506
#define KEY_BLOCK_SIZE 507
#define KEY_SYM 508
#define KILL_SYM 509
#define LANGUAGE_SYM 510
#define LAST_SYM 511
#define LE 512
#define LEADING 513
#define LEAVES 514
#define LEAVE_SYM 515
#define LEFT 516
#define LESS_SYM 517
#define LEVEL_SYM 518
#define LEX_HOSTNAME 519
#define LIKE 520
#define LIMIT 521
#define LINEAR_SYM 522
#define LINES 523
#define LINESTRING 524
#define LIST_SYM 525
#define LOAD 526
#define LOCAL_SYM 527
#define LOCATOR_SYM 528
#define LOCKS_SYM 529
#define LOCK_SYM 530
#define LOGFILE_SYM 531
#define LOGS_SYM 532
#define LONGBLOB 533
#define LONGTEXT 534
#define LONG_NUM 535
#define LONG_SYM 536
#define LOOP_SYM 537
#define LOW_PRIORITY 538
#define LT 539
#define MASTER_AUTO_POSITION_SYM 540
#define MASTER_BIND_SYM 541
#define MASTER_CONNECT_RETRY_SYM 542
#define MASTER_DELAY_SYM 543
#define MASTER_HOST_SYM 544
#define MASTER_LOG_FILE_SYM 545
#define MASTER_LOG_POS_SYM 546
#define MASTER_PASSWORD_SYM 547
#define MASTER_PORT_SYM 548
#define MASTER_RETRY_COUNT_SYM 549
#define MASTER_SERVER_ID_SYM 550
#define MASTER_SSL_CAPATH_SYM 551
#define MASTER_SSL_CA_SYM 552
#define MASTER_SSL_CERT_SYM 553
#define MASTER_SSL_CIPHER_SYM 554
#define MASTER_SSL_CRL_SYM 555
#define MASTER_SSL_CRLPATH_SYM 556
#define MASTER_SSL_KEY_SYM 557
#define MASTER_SSL_SYM 558
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 559
#define MASTER_SYM 560
#define MASTER_USER_SYM 561
#define MASTER_HEARTBEAT_PERIOD_SYM 562
#define MATCH 563
#define MAX_CONNECTIONS_PER_HOUR 564
#define MAX_QUERIES_PER_HOUR 565
#define MAX_ROWS 566
#define MAX_SIZE_SYM 567
#define MAX_SYM 568
#define MAX_UPDATES_PER_HOUR 569
#define MAX_USER_CONNECTIONS_SYM 570
#define MAX_VALUE_SYM 571
#define MEDIUMBLOB 572
#define MEDIUMINT 573
#define MEDIUMTEXT 574
#define MEDIUM_SYM 575
#define MEMORY_SYM 576
#define MERGE_SYM 577
#define MESSAGE_TEXT_SYM 578
#define MICROSECOND_SYM 579
#define MIGRATE_SYM 580
#define MINUTE_MICROSECOND_SYM 581
#define MINUTE_SECOND_SYM 582
#define MINUTE_SYM 583
#define MIN_ROWS 584
#define MIN_SYM 585
#define MODE_SYM 586
#define MODIFIES_SYM 587
#define MODIFY_SYM 588
#define MOD_SYM 589
#define MONTH_SYM 590
#define MULTILINESTRING 591
#define MULTIPOINT 592
#define MULTIPOLYGON 593
#define MUTEX_SYM 594
#define MYSQL_ERRNO_SYM 595
#define NAMES_SYM 596
#define NAME_SYM 597
#define NATIONAL_SYM 598
#define NATURAL 599
#define NCHAR_STRING 600
#define NCHAR_SYM 601
#define NDBCLUSTER_SYM 602
#define NE 603
#define NEG 604
#define NEW_SYM 605
#define NEXT_SYM 606
#define NODEGROUP_SYM 607
#define NONE_SYM 608
#define NOT2_SYM 609
#define NOT_SYM 610
#define NOW_SYM 611
#define NO_SYM 612
#define NO_WAIT_SYM 613
#define NO_WRITE_TO_BINLOG 614
#define NULL_SYM 615
#define NUM 616
#define NUMBER_SYM 617
#define NUMERIC_SYM 618
#define NVARCHAR_SYM 619
#define OFFSET_SYM 620
#define OLD_PASSWORD 621
#define ON 622
#define ONE_SYM 623
#define ONLY_SYM 624
#define OPEN_SYM 625
#define OPTIMIZE 626
#define OPTIONS_SYM 627
#define OPTION 628
#define OPTIONALLY 629
#define OR2_SYM 630
#define ORDER_SYM 631
#define OR_OR_SYM 632
#define OR_SYM 633
#define OUTER 634
#define OUTFILE 635
#define OUT_SYM 636
#define OWNER_SYM 637
#define PACK_KEYS_SYM 638
#define PAGE_SYM 639
#define PARAM_MARKER 640
#define PARSER_SYM 641
#define PARTIAL 642
#define PARTITION_SYM 643
#define PARTITIONS_SYM 644
#define PARTITIONING_SYM 645
#define PASSWORD 646
#define PHASE_SYM 647
#define PLUGIN_DIR_SYM 648
#define PLUGIN_SYM 649
#define PLUGINS_SYM 650
#define POINT_SYM 651
#define POLYGON 652
#define PORT_SYM 653
#define POSITION_SYM 654
#define PRECISION 655
#define PREPARE_SYM 656
#define PRESERVE_SYM 657
#define PREV_SYM 658
#define PRIMARY_SYM 659
#define PRIVILEGES 660
#define PROCEDURE_SYM 661
#define PROCESS 662
#define PROCESSLIST_SYM 663
#define PROFILE_SYM 664
#define PROFILES_SYM 665
#define PROXY_SYM 666
#define PURGE 667
#define QUARTER_SYM 668
#define QUERY_SYM 669
#define QUICK 670
#define RANGE_SYM 671
#define READS_SYM 672
#define READ_ONLY_SYM 673
#define READ_SYM 674
#define READ_WRITE_SYM 675
#define REAL 676
#define REBUILD_SYM 677
#define RECOVER_SYM 678
#define REDOFILE_SYM 679
#define REDO_BUFFER_SIZE_SYM 680
#define REDUNDANT_SYM 681
#define REFERENCES 682
#define REGEXP 683
#define RELAY 684
#define RELAYLOG_SYM 685
#define RELAY_LOG_FILE_SYM 686
#define RELAY_LOG_POS_SYM 687
#define RELAY_THREAD 688
#define RELEASE_SYM 689
#define RELOAD 690
#define REMOVE_SYM 691
#define RENAME 692
#define REORGANIZE_SYM 693
#define REPAIR 694
#define REPEATABLE_SYM 695
#define REPEAT_SYM 696
#define REPLACE 697
#define REPLICATION 698
#define REQUIRE_SYM 699
#define RESET_SYM 700
#define RESIGNAL_SYM 701
#define RESOURCES 702
#define RESTORE_SYM 703
#define RESTRICT 704
#define RESUME_SYM 705
#define RETURNED_SQLSTATE_SYM 706
#define RETURNS_SYM 707
#define RETURN_SYM 708
#define REVERSE_SYM 709
#define REVOKE 710
#define RIGHT 711
#define ROLLBACK_SYM 712
#define ROLLUP_SYM 713
#define ROUTINE_SYM 714
#define ROWS_SYM 715
#define ROW_FORMAT_SYM 716
#define ROW_SYM 717
#define ROW_COUNT_SYM 718
#define RTREE_SYM 719
#define SAVEPOINT_SYM 720
#define SCHEDULE_SYM 721
#define SCHEMA_NAME_SYM 722
#define SECOND_MICROSECOND_SYM 723
#define SECOND_SYM 724
#define SECURITY_SYM 725
#define SELECT_SYM 726
#define SENSITIVE_SYM 727
#define SEPARATOR_SYM 728
#define SERIALIZABLE_SYM 729
#define SERIAL_SYM 730
#define SESSION_SYM 731
#define SERVER_SYM 732
#define SERVER_OPTIONS 733
#define SET 734
#define SET_VAR 735
#define SHARE_SYM 736
#define SHIFT_LEFT 737
#define SHIFT_RIGHT 738
#define SHOW 739
#define SHUTDOWN 740
#define SIGNAL_SYM 741
#define SIGNED_SYM 742
#define SIMPLE_SYM 743
#define SLAVE 744
#define SLOW 745
#define SMALLINT 746
#define SNAPSHOT_SYM 747
#define SOCKET_SYM 748
#define SONAME_SYM 749
#define SOUNDS_SYM 750
#define SOURCE_SYM 751
#define SPATIAL_SYM 752
#define SPECIFIC_SYM 753
#define SQLEXCEPTION_SYM 754
#define SQLSTATE_SYM 755
#define SQLWARNING_SYM 756
#define SQL_AFTER_GTIDS 757
#define SQL_AFTER_MTS_GAPS 758
#define SQL_BEFORE_GTIDS 759
#define SQL_BIG_RESULT 760
#define SQL_BUFFER_RESULT 761
#define SQL_CACHE_SYM 762
#define SQL_CALC_FOUND_ROWS 763
#define SQL_NO_CACHE_SYM 764
#define SQL_SMALL_RESULT 765
#define SQL_SYM 766
#define SQL_THREAD 767
#define SSL_SYM 768
#define STARTING 769
#define STARTS_SYM 770
#define START_SYM 771
#define STATS_AUTO_RECALC_SYM 772
#define STATS_PERSISTENT_SYM 773
#define STATS_SAMPLE_PAGES_SYM 774
#define STATUS_SYM 775
#define STDDEV_SAMP_SYM 776
#define STD_SYM 777
#define STOP_SYM 778
#define STORAGE_SYM 779
#define STRAIGHT_JOIN 780
#define STRING_SYM 781
#define SUBCLASS_ORIGIN_SYM 782
#define SUBDATE_SYM 783
#define SUBJECT_SYM 784
#define SUBPARTITIONS_SYM 785
#define SUBPARTITION_SYM 786
#define SUBSTRING 787
#define SUM_SYM 788
#define SUPER_SYM 789
#define SUSPEND_SYM 790
#define SWAPS_SYM 791
#define SWITCHES_SYM 792
#define SYSDATE 793
#define TABLES 794
#define TABLESPACE 795
#define TABLE_REF_PRIORITY 796
#define TABLE_SYM 797
#define TABLE_CHECKSUM_SYM 798
#define TABLE_NAME_SYM 799
#define TEMPORARY 800
#define TEMPTABLE_SYM 801
#define TERMINATED 802
#define TEXT_STRING 803
#define TEXT_SYM 804
#define THAN_SYM 805
#define THEN_SYM 806
#define TIMESTAMP 807
#define TIMESTAMP_ADD 808
#define TIMESTAMP_DIFF 809
#define TIME_SYM 810
#define TINYBLOB 811
#define TINYINT 812
#define TINYTEXT 813
#define TO_SYM 814
#define TRAILING 815
#define TRANSACTION_SYM 816
#define TRIGGERS_SYM 817
#define TRIGGER_SYM 818
#define TRIM 819
#define TRUE_SYM 820
#define TRUNCATE_SYM 821
#define TYPES_SYM 822
#define TYPE_SYM 823
#define UDF_RETURNS_SYM 824
#define ULONGLONG_NUM 825
#define UNCOMMITTED_SYM 826
#define UNDEFINED_SYM 827
#define UNDERSCORE_CHARSET 828
#define UNDOFILE_SYM 829
#define UNDO_BUFFER_SIZE_SYM 830
#define UNDO_SYM 831
#define UNICODE_SYM 832
#define UNINSTALL_SYM 833
#define UNION_SYM 834
#define UNIQUE_SYM 835
#define UNKNOWN_SYM 836
#define UNLOCK_SYM 837
#define UNSIGNED 838
#define UNTIL_SYM 839
#define UPDATE_SYM 840
#define UPGRADE_SYM 841
#define USAGE 842
#define USER 843
#define USE_FRM 844
#define USE_SYM 845
#define USING 846
#define UTC_DATE_SYM 847
#define UTC_TIMESTAMP_SYM 848
#define UTC_TIME_SYM 849
#define VALUES 850
#define VALUE_SYM 851
#define VARBINARY 852
#define VARCHAR 853
#define VARIABLES 854
#define VARIANCE_SYM 855
#define VARYING 856
#define VAR_SAMP_SYM 857
#define VIEW_SYM 858
#define WAIT_SYM 859
#define WARNINGS 860
#define WEEK_SYM 861
#define WEIGHT_STRING_SYM 862
#define WHEN_SYM 863
#define WHERE 864
#define WHILE_SYM 865
#define WITH 866
#define WITH_CUBE_SYM 867
#define WITH_ROLLUP_SYM 868
#define WORK_SYM 869
#define WRAPPER_SYM 870
#define WRITE_SYM 871
#define X509_SYM 872
#define XA_SYM 873
#define XML_SYM 874
#define XOR 875
#define YEAR_MONTH_SYM 876
#define YEAR_SYM 877
#define ZEROFILL 878




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 929 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;



/* Line 214 of yacc.c  */
#line 2329 "D:/mysqlDebugSpace/mysql-5.6.7-dev/cbuild/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 986 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2346 "D:/mysqlDebugSpace/mysql-5.6.7-dev/cbuild/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  603
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   55420

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  643
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  952
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2679
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4538

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   878

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   636,     2,     2,     2,   630,   625,     2,
     633,   634,   628,   627,   635,   626,   641,   629,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   642,   639,
       2,     2,     2,     2,   640,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   631,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   637,   624,   638,   632,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     176,   178,   182,   186,   190,   194,   198,   202,   206,   210,
     214,   218,   222,   226,   230,   234,   238,   242,   246,   250,
     254,   260,   264,   266,   267,   269,   273,   275,   279,   283,
     287,   291,   292,   300,   301,   302,   317,   318,   319,   334,
     335,   336,   351,   352,   359,   360,   364,   369,   374,   378,
     381,   392,   394,   398,   401,   404,   407,   410,   413,   416,
     419,   420,   434,   435,   442,   445,   446,   448,   452,   454,
     455,   458,   459,   462,   463,   465,   469,   474,   475,   478,
     479,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   508,   509,   513,   515,   516,   519,
     520,   523,   526,   529,   532,   535,   539,   543,   545,   547,
     549,   552,   556,   560,   561,   566,   567,   571,   572,   574,
     578,   580,   581,   583,   587,   589,   590,   594,   595,   597,
     601,   603,   608,   609,   611,   613,   615,   616,   620,   623,
     627,   628,   632,   633,   639,   645,   646,   654,   655,   662,
     664,   666,   668,   672,   674,   676,   678,   682,   683,   685,
     687,   689,   691,   694,   696,   700,   702,   704,   705,   707,
     708,   711,   715,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   751,   755,
     760,   761,   763,   765,   769,   771,   775,   779,   781,   784,
     786,   788,   790,   792,   796,   800,   802,   804,   806,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   828,
     832,   833,   834,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   864,   865,   871,   872,
     875,   876,   880,   881,   884,   887,   890,   893,   894,   901,
     904,   905,   908,   910,   912,   916,   917,   918,   919,   927,
     928,   931,   934,   936,   938,   939,   940,   949,   950,   957,
     959,   962,   964,   967,   968,   969,   976,   977,   978,   985,
     986,   989,   990,   996,   997,   999,  1000,  1006,  1007,  1010,
    1011,  1017,  1022,  1023,  1024,  1033,  1034,  1035,  1044,  1046,
    1048,  1050,  1052,  1054,  1057,  1062,  1068,  1069,  1074,  1079,
    1084,  1088,  1092,  1095,  1098,  1099,  1102,  1104,  1107,  1111,
    1113,  1115,  1117,  1118,  1120,  1122,  1125,  1129,  1131,  1133,
    1135,  1137,  1139,  1141,  1143,  1145,  1146,  1148,  1150,  1153,
    1157,  1159,  1161,  1163,  1165,  1167,  1168,  1170,  1172,  1175,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1193,  1194,  1196,
    1198,  1201,  1205,  1207,  1209,  1211,  1214,  1217,  1220,  1222,
    1224,  1226,  1228,  1231,  1235,  1239,  1243,  1247,  1251,  1255,
    1259,  1263,  1268,  1270,  1272,  1274,  1276,  1279,  1283,  1286,
    1291,  1297,  1298,  1304,  1305,  1306,  1312,  1313,  1321,  1323,
    1324,  1326,  1327,  1332,  1333,  1334,  1338,  1344,  1350,  1351,
    1356,  1359,  1362,  1365,  1368,  1369,  1371,  1372,  1374,  1376,
    1380,  1382,  1387,  1393,  1399,  1400,  1403,  1404,  1405,  1413,
    1414,  1424,  1426,  1430,  1432,  1434,  1435,  1438,  1439,  1443,
    1445,  1449,  1450,  1457,  1459,  1460,  1461,  1467,  1468,  1473,
    1475,  1477,  1479,  1483,  1485,  1489,  1490,  1491,  1497,  1499,
    1503,  1505,  1507,  1508,  1512,  1514,  1518,  1519,  1524,  1526,
    1527,  1529,  1532,  1534,  1538,  1543,  1547,  1551,  1555,  1560,
    1565,  1569,  1570,  1571,  1578,  1579,  1581,  1582,  1584,  1586,
    1589,  1591,  1593,  1594,  1596,  1598,  1601,  1603,  1604,  1608,
    1609,  1611,  1613,  1616,  1618,  1621,  1625,  1629,  1633,  1637,
    1641,  1645,  1649,  1653,  1657,  1661,  1665,  1669,  1673,  1677,
    1681,  1685,  1689,  1693,  1697,  1701,  1702,  1709,  1711,  1713,
    1717,  1722,  1727,  1730,  1733,  1736,  1740,  1744,  1749,  1754,
    1756,  1758,  1760,  1762,  1764,  1766,  1768,  1770,  1772,  1774,
    1776,  1778,  1781,  1783,  1785,  1787,  1789,  1791,  1793,  1797,
    1799,  1801,  1804,  1807,  1815,  1824,  1833,  1842,  1851,  1854,
    1855,  1857,  1862,  1863,  1865,  1868,  1869,  1874,  1878,  1882,
    1886,  1888,  1891,  1893,  1895,  1899,  1902,  1906,  1909,  1912,
    1914,  1918,  1922,  1925,  1929,  1931,  1934,  1937,  1940,  1942,
    1945,  1947,  1949,  1951,  1954,  1958,  1961,  1965,  1968,  1971,
    1975,  1979,  1983,  1984,  1991,  1992,  1999,  2002,  2004,  2006,
    2008,  2010,  2012,  2014,  2016,  2018,  2020,  2022,  2024,  2027,
    2030,  2032,  2035,  2037,  2040,  2044,  2047,  2049,  2051,  2053,
    2055,  2057,  2059,  2061,  2064,  2065,  2067,  2069,  2075,  2076,
    2080,  2081,  2084,  2088,  2089,  2091,  2094,  2096,  2098,  2100,
    2102,  2106,  2110,  2114,  2118,  2119,  2121,  2122,  2124,  2125,
    2127,  2130,  2132,  2134,  2137,  2140,  2144,  2146,  2150,  2153,
    2155,  2158,  2161,  2164,  2167,  2170,  2173,  2176,  2179,  2182,
    2185,  2188,  2190,  2192,  2195,  2197,  2199,  2201,  2203,  2205,
    2206,  2209,  2211,  2213,  2215,  2217,  2219,  2220,  2223,  2225,
    2227,  2228,  2230,  2232,  2235,  2238,  2240,  2243,  2246,  2247,
    2249,  2251,  2253,  2257,  2259,  2263,  2264,  2266,  2267,  2272,
    2274,  2276,  2278,  2279,  2281,  2284,  2286,  2288,  2291,  2293,
    2297,  2301,  2303,  2305,  2306,  2309,  2310,  2312,  2318,  2319,
    2323,  2327,  2329,  2330,  2333,  2336,  2339,  2340,  2344,  2348,
    2355,  2362,  2364,  2366,  2369,  2372,  2375,  2377,  2380,  2383,
    2385,  2387,  2388,  2390,  2392,  2394,  2396,  2397,  2399,  2401,
    2403,  2404,  2406,  2409,  2410,  2412,  2413,  2415,  2416,  2418,
    2420,  2423,  2425,  2428,  2430,  2433,  2436,  2439,  2443,  2446,
    2448,  2450,  2452,  2454,  2458,  2460,  2462,  2464,  2469,  2472,
    2474,  2479,  2480,  2482,  2483,  2486,  2488,  2492,  2493,  2500,
    2501,  2507,  2515,  2516,  2522,  2523,  2529,  2530,  2536,  2537,
    2542,  2543,  2554,  2558,  2563,  2567,  2571,  2579,  2584,  2588,
    2594,  2595,  2599,  2601,  2606,  2607,  2611,  2612,  2615,  2616,
    2618,  2619,  2622,  2625,  2628,  2631,  2633,  2635,  2637,  2641,
    2646,  2647,  2654,  2659,  2660,  2666,  2667,  2674,  2679,  2683,
    2685,  2693,  2697,  2699,  2701,  2702,  2708,  2709,  2713,  2716,
    2717,  2723,  2724,  2725,  2732,  2734,  2738,  2740,  2742,  2746,
    2749,  2753,  2756,  2761,  2762,  2769,  2770,  2771,  2780,  2785,
    2790,  2794,  2798,  2801,  2804,  2811,  2817,  2821,  2827,  2829,
    2831,  2833,  2835,  2837,  2838,  2840,  2842,  2845,  2848,  2852,
    2856,  2860,  2864,  2865,  2867,  2868,  2870,  2871,  2873,  2875,
    2876,  2879,  2881,  2882,  2884,  2886,  2888,  2889,  2896,  2900,
    2904,  2905,  2907,  2909,  2913,  2917,  2920,  2923,  2928,  2929,
    2933,  2934,  2938,  2939,  2943,  2944,  2948,  2949,  2951,  2953,
    2957,  2959,  2961,  2962,  2965,  2967,  2971,  2975,  2979,  2981,
    2982,  2988,  2989,  2991,  2993,  2994,  3001,  3002,  3004,  3006,
    3009,  3011,  3013,  3015,  3016,  3022,  3025,  3026,  3032,  3033,
    3035,  3037,  3040,  3042,  3044,  3046,  3048,  3050,  3053,  3054,
    3060,  3061,  3063,  3065,  3066,  3071,  3076,  3080,  3086,  3088,
    3092,  3096,  3097,  3104,  3106,  3108,  3110,  3114,  3117,  3121,
    3123,  3125,  3126,  3133,  3135,  3137,  3139,  3143,  3147,  3152,
    3153,  3160,  3161,  3164,  3165,  3170,  3171,  3174,  3179,  3181,
    3182,  3184,  3188,  3189,  3193,  3195,  3197,  3198,  3201,  3204,
    3209,  3212,  3216,  3219,  3223,  3224,  3228,  3229,  3230,  3237,
    3240,  3242,  3244,  3247,  3250,  3259,  3264,  3265,  3267,  3270,
    3272,  3274,  3276,  3278,  3279,  3282,  3287,  3291,  3293,  3295,
    3299,  3304,  3305,  3306,  3307,  3310,  3313,  3315,  3317,  3318,
    3321,  3325,  3329,  3333,  3336,  3340,  3345,  3349,  3354,  3358,
    3363,  3365,  3369,  3374,  3378,  3382,  3389,  3391,  3397,  3404,
    3410,  3418,  3425,  3434,  3440,  3447,  3452,  3457,  3463,  3467,
    3472,  3474,  3478,  3482,  3486,  3490,  3494,  3498,  3504,  3510,
    3514,  3518,  3522,  3526,  3530,  3534,  3536,  3538,  3540,  3542,
    3544,  3546,  3548,  3550,  3552,  3554,  3556,  3558,  3560,  3562,
    3564,  3566,  3568,  3570,  3572,  3574,  3576,  3578,  3582,  3584,
    3586,  3588,  3590,  3594,  3597,  3600,  3603,  3606,  3610,  3614,
    3620,  3627,  3632,  3637,  3645,  3648,  3655,  3661,  3668,  3675,
    3680,  3685,  3691,  3696,  3703,  3706,  3711,  3716,  3721,  3732,
    3739,  3748,  3755,  3760,  3765,  3772,  3777,  3782,  3787,  3794,
    3799,  3807,  3815,  3823,  3830,  3837,  3844,  3851,  3855,  3860,
    3867,  3876,  3879,  3882,  3891,  3900,  3907,  3914,  3916,  3923,
    3930,  3939,  3948,  3955,  3964,  3971,  3974,  3983,  3992,  3995,
    3998,  4001,  4006,  4011,  4016,  4021,  4025,  4034,  4041,  4050,
    4055,  4062,  4067,  4072,  4077,  4084,  4093,  4098,  4102,  4109,
    4114,  4121,  4127,  4136,  4144,  4155,  4157,  4164,  4169,  4174,
    4179,  4184,  4189,  4196,  4201,  4202,  4208,  4215,  4218,  4222,
    4223,  4228,  4229,  4233,  4234,  4236,  4238,  4242,  4247,  4252,
    4258,  4263,  4268,  4273,  4279,  4284,  4285,  4286,  4294,  4299,
    4305,  4310,  4316,  4321,  4326,  4331,  4336,  4341,  4347,  4348,
    4357,  4358,  4362,  4366,  4368,  4373,  4374,  4376,  4377,  4380,
    4381,  4383,  4384,  4388,  4391,  4395,  4398,  4400,  4403,  4405,
    4408,  4410,  4413,  4416,  4419,  4420,  4422,  4424,  4428,  4430,
    4434,  4436,  4440,  4441,  4443,  4444,  4447,  4452,  4458,  4460,
    4462,  4464,  4466,  4471,  4473,  4477,  4481,  4485,  4486,  4493,
    4494,  4501,  4502,  4511,  4516,  4517,  4526,  4527,  4538,  4545,
    4546,  4555,  4556,  4567,  4574,  4576,  4579,  4582,  4583,  4585,
    4591,  4592,  4598,  4602,  4608,  4611,  4612,  4613,  4621,  4623,
    4624,  4625,  4632,  4633,  4637,  4638,  4639,  4645,  4646,  4648,
    4649,  4651,  4652,  4655,  4659,  4663,  4665,  4667,  4668,  4676,
    4677,  4685,  4687,  4690,  4691,  4692,  4695,  4696,  4699,  4700,
    4702,  4704,  4706,  4708,  4712,  4714,  4718,  4720,  4722,  4724,
    4726,  4728,  4730,  4732,  4734,  4736,  4738,  4740,  4742,  4744,
    4746,  4748,  4750,  4752,  4754,  4756,  4758,  4760,  4762,  4764,
    4766,  4768,  4769,  4771,  4773,  4774,  4777,  4778,  4780,  4781,
    4782,  4786,  4787,  4788,  4792,  4795,  4796,  4797,  4802,  4807,
    4810,  4811,  4813,  4815,  4819,  4823,  4825,  4828,  4829,  4831,
    4832,  4837,  4842,  4845,  4846,  4848,  4850,  4851,  4853,  4854,
    4856,  4859,  4861,  4865,  4869,  4871,  4873,  4875,  4877,  4879,
    4880,  4883,  4885,  4887,  4889,  4891,  4893,  4895,  4897,  4899,
    4901,  4903,  4905,  4907,  4909,  4911,  4913,  4915,  4917,  4919,
    4921,  4923,  4925,  4927,  4929,  4930,  4931,  4938,  4939,  4941,
    4945,  4947,  4948,  4951,  4955,  4957,  4960,  4962,  4963,  4967,
    4968,  4969,  4977,  4980,  4982,  4983,  4987,  4988,  4996,  4997,
    4998,  5007,  5012,  5019,  5024,  5029,  5034,  5035,  5042,  5047,
    5052,  5057,  5063,  5068,  5070,  5074,  5076,  5079,  5081,  5085,
    5087,  5088,  5091,  5092,  5094,  5095,  5097,  5099,  5102,  5106,
    5108,  5110,  5111,  5112,  5121,  5122,  5123,  5130,  5131,  5133,
    5135,  5137,  5139,  5141,  5144,  5146,  5148,  5150,  5154,  5159,
    5160,  5164,  5168,  5170,  5173,  5176,  5177,  5181,  5182,  5188,
    5192,  5194,  5198,  5200,  5204,  5206,  5208,  5209,  5211,  5212,
    5217,  5218,  5220,  5224,  5226,  5228,  5230,  5231,  5232,  5239,
    5240,  5241,  5253,  5257,  5259,  5263,  5267,  5269,  5273,  5274,
    5276,  5277,  5282,  5283,  5291,  5292,  5298,  5299,  5306,  5308,
    5312,  5315,  5320,  5321,  5324,  5325,  5328,  5330,  5332,  5334,
    5335,  5340,  5341,  5343,  5344,  5346,  5348,  5352,  5354,  5356,
    5359,  5362,  5365,  5367,  5369,  5371,  5373,  5374,  5378,  5379,
    5383,  5386,  5391,  5396,  5400,  5405,  5410,  5412,  5416,  5420,
    5427,  5430,  5433,  5434,  5441,  5442,  5449,  5455,  5458,  5460,
    5462,  5464,  5470,  5476,  5479,  5482,  5484,  5489,  5493,  5496,
    5500,  5503,  5506,  5508,  5512,  5517,  5521,  5525,  5528,  5531,
    5535,  5539,  5543,  5547,  5551,  5555,  5559,  5563,  5565,  5567,
    5569,  5571,  5573,  5574,  5576,  5577,  5580,  5581,  5583,  5585,
    5587,  5588,  5591,  5592,  5595,  5596,  5599,  5602,  5608,  5609,
    5614,  5615,  5620,  5622,  5624,  5626,  5628,  5630,  5632,  5634,
    5635,  5637,  5639,  5643,  5644,  5646,  5648,  5649,  5654,  5655,
    5656,  5662,  5664,  5665,  5669,  5670,  5674,  5678,  5680,  5683,
    5686,  5689,  5692,  5695,  5698,  5701,  5703,  5705,  5707,  5709,
    5711,  5713,  5714,  5716,  5717,  5721,  5725,  5727,  5728,  5732,
    5734,  5737,  5738,  5740,  5741,  5745,  5749,  5752,  5755,  5759,
    5760,  5762,  5764,  5767,  5768,  5769,  5770,  5771,  5794,  5796,
    5798,  5799,  5801,  5802,  5804,  5806,  5807,  5809,  5811,  5812,
    5815,  5818,  5820,  5824,  5829,  5833,  5837,  5838,  5841,  5844,
    5846,  5850,  5854,  5855,  5860,  5861,  5865,  5867,  5869,  5870,
    5874,  5877,  5881,  5883,  5885,  5888,  5889,  5892,  5896,  5898,
    5904,  5906,  5908,  5911,  5914,  5916,  5918,  5920,  5922,  5924,
    5927,  5930,  5932,  5934,  5936,  5938,  5940,  5942,  5944,  5946,
    5949,  5952,  5954,  5956,  5958,  5960,  5962,  5965,  5968,  5971,
    5973,  5975,  5979,  5985,  5987,  5989,  5991,  5993,  5995,  5999,
    6004,  6010,  6012,  6018,  6022,  6025,  6027,  6031,  6034,  6037,
    6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,  6058,  6060,
    6062,  6064,  6066,  6068,  6070,  6072,  6076,  6079,  6081,  6083,
    6085,  6087,  6089,  6091,  6093,  6095,  6097,  6099,  6101,  6103,
    6105,  6107,  6109,  6111,  6113,  6115,  6117,  6119,  6121,  6123,
    6125,  6127,  6129,  6131,  6133,  6135,  6137,  6139,  6141,  6143,
    6145,  6147,  6149,  6151,  6153,  6155,  6157,  6159,  6161,  6163,
    6165,  6167,  6169,  6171,  6173,  6175,  6177,  6179,  6181,  6183,
    6185,  6187,  6189,  6191,  6193,  6195,  6197,  6199,  6201,  6203,
    6205,  6207,  6209,  6211,  6213,  6215,  6217,  6219,  6221,  6223,
    6225,  6227,  6229,  6231,  6233,  6235,  6237,  6239,  6241,  6243,
    6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,  6261,  6263,
    6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,  6281,  6283,
    6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,  6301,  6303,
    6305,  6307,  6309,  6311,  6313,  6315,  6317,  6319,  6321,  6323,
    6325,  6327,  6329,  6331,  6333,  6335,  6337,  6339,  6341,  6343,
    6345,  6347,  6349,  6351,  6353,  6355,  6357,  6359,  6361,  6363,
    6365,  6367,  6369,  6371,  6373,  6375,  6377,  6379,  6381,  6383,
    6385,  6387,  6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,
    6405,  6407,  6409,  6411,  6413,  6415,  6417,  6419,  6421,  6423,
    6425,  6427,  6429,  6431,  6433,  6435,  6437,  6439,  6441,  6443,
    6445,  6447,  6449,  6451,  6453,  6455,  6457,  6459,  6461,  6463,
    6465,  6467,  6469,  6471,  6473,  6475,  6477,  6479,  6481,  6483,
    6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,
    6505,  6507,  6509,  6511,  6513,  6515,  6517,  6519,  6521,  6523,
    6525,  6527,  6529,  6531,  6533,  6535,  6537,  6539,  6541,  6543,
    6545,  6547,  6549,  6551,  6553,  6555,  6557,  6559,  6561,  6563,
    6565,  6567,  6569,  6571,  6573,  6575,  6577,  6579,  6581,  6583,
    6585,  6587,  6589,  6591,  6593,  6595,  6597,  6599,  6601,  6603,
    6605,  6607,  6609,  6611,  6613,  6615,  6617,  6619,  6621,  6623,
    6625,  6627,  6629,  6631,  6633,  6635,  6637,  6639,  6641,  6643,
    6645,  6647,  6649,  6651,  6653,  6655,  6657,  6659,  6661,  6663,
    6665,  6667,  6669,  6671,  6673,  6675,  6677,  6679,  6681,  6683,
    6685,  6687,  6689,  6691,  6693,  6695,  6697,  6699,  6701,  6703,
    6705,  6707,  6709,  6711,  6713,  6715,  6717,  6719,  6721,  6723,
    6725,  6727,  6729,  6731,  6733,  6735,  6737,  6739,  6741,  6743,
    6745,  6747,  6749,  6751,  6753,  6755,  6757,  6759,  6761,  6763,
    6765,  6767,  6769,  6771,  6773,  6775,  6777,  6779,  6781,  6783,
    6785,  6786,  6790,  6791,  6795,  6796,  6800,  6801,  6805,  6806,
    6810,  6813,  6814,  6817,  6818,  6821,  6822,  6827,  6828,  6832,
    6834,  6836,  6838,  6840,  6841,  6843,  6845,  6847,  6848,  6851,
    6854,  6857,  6861,  6862,  6867,  6872,  6879,  6882,  6886,  6890,
    6894,  6900,  6902,  6906,  6910,  6912,  6914,  6918,  6922,  6924,
    6928,  6931,  6934,  6937,  6940,  6943,  6945,  6947,  6952,  6957,
    6959,  6961,  6963,  6965,  6967,  6968,  6973,  6975,  6977,  6979,
    6983,  6987,  6989,  6991,  6994,  6997,  6998,  7002,  7007,  7011,
    7012,  7020,  7022,  7025,  7027,  7029,  7031,  7033,  7035,  7037,
    7038,  7044,  7046,  7048,  7050,  7052,  7054,  7058,  7065,  7072,
    7079,  7087,  7093,  7097,  7106,  7115,  7124,  7131,  7132,  7134,
    7136,  7139,  7140,  7142,  7144,  7148,  7149,  7153,  7154,  7158,
    7159,  7163,  7164,  7168,  7170,  7172,  7174,  7176,  7178,  7180,
    7182,  7184,  7186,  7188,  7190,  7193,  7196,  7198,  7202,  7205,
    7208,  7211,  7214,  7217,  7220,  7223,  7226,  7228,  7230,  7233,
    7234,  7236,  7240,  7242,  7245,  7248,  7251,  7253,  7257,  7261,
    7263,  7265,  7269,  7271,  7275,  7280,  7286,  7291,  7298,  7300,
    7301,  7305,  7309,  7311,  7313,  7314,  7317,  7320,  7323,  7326,
    7327,  7330,  7331,  7335,  7338,  7340,  7343,  7346,  7349,  7352,
    7355,  7356,  7360,  7361,  7363,  7364,  7368,  7371,  7372,  7374,
    7377,  7378,  7380,  7385,  7390,  7396,  7399,  7403,  7404,  7406,
    7407,  7412,  7413,  7415,  7417,  7418,  7420,  7421,  7424,  7427,
    7429,  7430,  7432,  7434,  7437,  7441,  7444,  7445,  7452,  7456,
    7457,  7458,  7459,  7461,  7464,  7466,  7468,  7470,  7472,  7474,
    7476,  7478,  7480,  7482,  7485,  7488,  7492,  7494,  7496,  7498,
    7500,  7502,  7504,  7506,  7508,  7510,  7512,  7514,  7516,  7518,
    7519,  7523,  7525,  7528,  7530,  7533,  7537,  7541,  7545,  7546,
    7550,  7554,  7555,  7563,  7564,  7568,  7570,  7574,  7575,  7579,
    7580,  7584,  7589,  7591,  7595,  7596,  7600,  7601,  7605,  7610,
    7615,  7616,  7617,  7618,  7635,  7644,  7652,  7653,  7654,  7655,
    7656,  7657,  7673,  7674,  7675,  7676,  7677,  7690,  7695,  7700,
    7704,  7709,  7713,  7716,  7718,  7722,  7728,  7730,  7732,  7733,
    7735,  7737,  7738,  7741,  7742,  7743,  7747,  7748,  7751,  7757
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     644,     0,    -1,   154,    -1,    -1,   647,   645,   639,   646,
      -1,   647,   154,    -1,    -1,   154,    -1,   648,    -1,  1519,
      -1,  1018,    -1,  1084,    -1,  1086,    -1,   700,    -1,   660,
      -1,  1087,    -1,  1076,    -1,  1525,    -1,   667,    -1,   649,
      -1,  1334,    -1,  1366,    -1,  1281,    -1,  1283,    -1,   653,
      -1,  1373,    -1,   735,    -1,  1493,    -1,  1484,    -1,   658,
      -1,  1298,    -1,  1593,    -1,  1393,    -1,  1396,    -1,  1476,
      -1,  1092,    -1,  1100,    -1,   854,    -1,  1107,    -1,   651,
      -1,  1389,    -1,  1528,    -1,  1095,    -1,  1079,    -1,  1301,
      -1,  1383,    -1,   734,    -1,  1491,    -1,  1526,    -1,  1527,
      -1,  1120,    -1,  1119,    -1,  1448,    -1,   727,    -1,  1352,
      -1,  1060,    -1,  1062,    -1,  1345,    -1,  1594,    -1,  1482,
      -1,  1326,    -1,  1395,    -1,  1585,    -1,   650,   401,  1442,
      -1,   119,    -1,   142,    -1,   401,  1442,   192,   652,    -1,
    1439,    -1,   640,  1444,    -1,    -1,   168,  1442,   654,   655,
      -1,    -1,   591,   656,    -1,   656,   635,   657,    -1,   657,
      -1,   640,  1444,    -1,    -1,   211,   659,  1444,    -1,    -1,
      57,   305,   559,   661,   662,    -1,   663,    -1,   662,   635,
     663,    -1,   289,   158,  1438,    -1,   286,   158,  1438,    -1,
     306,   158,  1438,    -1,   292,   158,  1438,    -1,   293,   158,
    1262,    -1,   287,   158,  1262,    -1,   294,   158,  1262,    -1,
     288,   158,  1262,    -1,   303,   158,  1262,    -1,   297,   158,
    1438,    -1,   296,   158,  1438,    -1,   298,   158,  1438,    -1,
     299,   158,  1438,    -1,   302,   158,  1438,    -1,   304,   158,
    1262,    -1,   300,   158,  1438,    -1,   301,   158,  1438,    -1,
     307,   158,  1425,    -1,   225,   158,   633,   664,   634,    -1,
     285,   158,  1262,    -1,   666,    -1,    -1,   665,    -1,   664,
     635,   665,    -1,  1262,    -1,   290,   158,  1438,    -1,   291,
     158,  1264,    -1,   431,   158,  1438,    -1,   432,   158,  1262,
      -1,    -1,    96,   905,   542,   908,  1434,   668,   843,    -1,
      -1,    -1,    96,   996,   228,  1442,  1000,   367,  1434,   669,
     633,  1013,   634,  1001,   670,  1052,    -1,    -1,    -1,    96,
     997,   228,  1442,   999,   367,  1434,   671,   633,  1013,   634,
    1002,   672,  1052,    -1,    -1,    -1,    96,   998,   228,  1442,
     999,   367,  1434,   673,   633,  1013,   634,  1003,   674,  1052,
      -1,    -1,    96,   105,   908,  1442,   675,   902,    -1,    -1,
      96,   676,  1547,    -1,    96,   588,   693,  1509,    -1,    96,
     276,   205,   807,    -1,    96,   540,   804,    -1,    96,   677,
      -1,   477,  1444,   188,   108,   615,  1444,   372,   633,   678,
     634,    -1,   679,    -1,   678,   635,   679,    -1,   588,  1439,
      -1,   214,  1439,    -1,   105,  1439,    -1,   382,  1439,    -1,
     391,  1439,    -1,   493,  1439,    -1,   398,  1262,    -1,    -1,
    1141,   165,   908,   694,   681,   367,   466,   682,   687,   684,
     689,   141,   690,    -1,    -1,   166,  1145,  1234,   683,   685,
     686,    -1,    23,  1145,    -1,    -1,   150,    -1,   135,   367,
     489,    -1,   135,    -1,    -1,   515,  1145,    -1,    -1,   153,
    1145,    -1,    -1,   688,    -1,   367,    79,   402,    -1,   367,
      79,   355,   402,    -1,    -1,    75,  1439,    -1,    -1,   691,
     692,    -1,   752,    -1,   754,    -1,   750,    -1,   771,    -1,
     789,    -1,   791,    -1,   786,    -1,   756,    -1,   758,    -1,
     759,    -1,   760,    -1,   761,    -1,   763,    -1,    -1,  1442,
     641,  1442,    -1,  1442,    -1,    -1,   695,   697,    -1,    -1,
     696,   698,    -1,    75,  1439,    -1,   255,   511,    -1,   357,
     511,    -1,    89,   511,    -1,   417,   511,   108,    -1,   332,
     511,   108,    -1,   699,    -1,   697,    -1,   132,    -1,  1151,
     132,    -1,   511,   470,   125,    -1,   511,   470,   240,    -1,
      -1,    50,   694,   701,   702,    -1,    -1,   633,   703,   634,
      -1,    -1,   704,    -1,   704,   635,  1145,    -1,  1145,    -1,
      -1,   706,    -1,   706,   635,   708,    -1,   708,    -1,    -1,
    1442,   707,   956,    -1,    -1,   710,    -1,   710,   635,   711,
      -1,   711,    -1,   712,   707,  1442,   956,    -1,    -1,   241,
      -1,   381,    -1,   232,    -1,    -1,   713,   749,   639,    -1,
     749,   639,    -1,   714,   749,   639,    -1,    -1,   715,   716,
     639,    -1,    -1,   122,   746,   717,   956,   747,    -1,   122,
    1442,    82,   189,   723,    -1,    -1,   122,   720,   208,   189,
     718,   721,   749,    -1,    -1,   122,  1442,   102,   189,   719,
    1120,    -1,   170,    -1,    91,    -1,   722,    -1,   721,   635,
     722,    -1,   726,    -1,  1262,    -1,   724,    -1,   500,   725,
    1440,    -1,    -1,   596,    -1,   723,    -1,  1442,    -1,   501,
      -1,  1151,   191,    -1,   499,    -1,   486,   728,   730,    -1,
    1442,    -1,   724,    -1,    -1,   728,    -1,    -1,   479,   731,
      -1,   733,   158,   732,    -1,   731,   635,   733,   158,   732,
      -1,  1424,    -1,  1172,    -1,  1430,    -1,    64,    -1,   527,
      -1,    86,    -1,    88,    -1,    87,    -1,    55,    -1,   467,
      -1,   544,    -1,    74,    -1,   103,    -1,   323,    -1,   340,
      -1,   446,   729,   730,    -1,   201,   736,   133,   737,    -1,
      -1,   100,    -1,   738,    -1,    82,   742,   743,    -1,   739,
      -1,   738,   635,   739,    -1,   740,   158,   741,    -1,  1442,
      -1,   640,  1444,    -1,   362,    -1,   463,    -1,   732,    -1,
     744,    -1,   743,   635,   744,    -1,   740,   158,   745,    -1,
      64,    -1,   527,    -1,    86,    -1,    88,    -1,    87,    -1,
      55,    -1,   467,    -1,   544,    -1,    74,    -1,   103,    -1,
     323,    -1,   340,    -1,   451,    -1,  1442,    -1,   746,   635,
    1442,    -1,    -1,    -1,   123,   748,  1145,    -1,   752,    -1,
     754,    -1,   750,    -1,   771,    -1,   789,    -1,   791,    -1,
     786,    -1,   756,    -1,   758,    -1,   759,    -1,   760,    -1,
     761,    -1,   763,    -1,    -1,   223,   751,   766,   152,   223,
      -1,    -1,   753,   648,    -1,    -1,   453,   755,  1145,    -1,
      -1,   757,   795,    -1,   260,  1443,    -1,   249,  1443,    -1,
     370,  1442,    -1,    -1,   180,   764,  1442,   238,   762,   765,
      -1,    66,  1442,    -1,    -1,   351,   192,    -1,   192,    -1,
    1442,    -1,   765,   635,  1442,    -1,    -1,    -1,    -1,   767,
    1145,   768,   551,   714,   769,   770,    -1,    -1,   149,   766,
      -1,   148,   714,    -1,   772,    -1,   775,    -1,    -1,    -1,
      53,   773,  1145,   774,   777,   785,   152,    53,    -1,    -1,
      53,   776,   778,   785,   152,    53,    -1,   779,    -1,   777,
     779,    -1,   782,    -1,   778,   782,    -1,    -1,    -1,   608,
     780,  1145,   781,   551,   714,    -1,    -1,    -1,   608,   783,
    1145,   784,   551,   714,    -1,    -1,   148,   714,    -1,    -1,
    1443,   642,   787,   795,   788,    -1,    -1,  1443,    -1,    -1,
    1443,   642,   790,   793,   788,    -1,    -1,   792,   793,    -1,
      -1,    31,   794,   715,   713,   152,    -1,   282,   714,   152,
     282,    -1,    -1,    -1,   610,   796,  1145,   797,   141,   714,
     152,   610,    -1,    -1,    -1,   441,   714,   584,   798,  1145,
     799,   152,   441,    -1,    30,    -1,     8,    -1,   234,    -1,
     585,    -1,   128,    -1,   829,   831,    -1,   829,    57,   826,
     810,    -1,   829,     6,   826,   805,   814,    -1,    -1,   590,
     276,   205,  1442,    -1,   829,     6,   826,   817,    -1,   829,
     142,   826,   817,    -1,   830,   809,   820,    -1,   830,   809,
     823,    -1,     6,   827,    -1,     6,   828,    -1,    -1,   811,
     812,    -1,   813,    -1,   812,   813,    -1,   812,   635,   813,
      -1,   832,    -1,   833,    -1,   834,    -1,    -1,   815,    -1,
     816,    -1,   815,   816,    -1,   815,   635,   816,    -1,   832,
      -1,   833,    -1,   834,    -1,   835,    -1,   838,    -1,   840,
      -1,   841,    -1,   839,    -1,    -1,   818,    -1,   819,    -1,
     818,   819,    -1,   818,   635,   819,    -1,   832,    -1,   833,
      -1,   834,    -1,   840,    -1,   841,    -1,    -1,   821,    -1,
     822,    -1,   821,   822,    -1,   821,   635,   822,    -1,   832,
      -1,   836,    -1,   837,    -1,   838,    -1,   840,    -1,   841,
      -1,   839,    -1,    -1,   824,    -1,   825,    -1,   824,   825,
      -1,   824,   635,   825,    -1,   832,    -1,   840,    -1,   841,
      -1,   107,  1439,    -1,   574,  1439,    -1,   424,  1439,    -1,
    1442,    -1,  1442,    -1,   418,    -1,   420,    -1,   355,     4,
      -1,   230,  1318,   842,    -1,    25,  1318,   842,    -1,   312,
    1318,   842,    -1,   175,  1318,   842,    -1,   575,  1318,   842,
      -1,   425,  1318,   842,    -1,   352,  1318,  1263,    -1,    75,
    1318,  1439,    -1,  1359,   156,  1318,   916,    -1,   604,    -1,
     358,    -1,  1263,    -1,   220,    -1,   633,   844,    -1,   909,
     849,   846,    -1,   265,  1434,    -1,   633,   265,  1434,   634,
      -1,   922,   634,   909,   849,   846,    -1,    -1,   849,   898,
     634,   845,  1532,    -1,    -1,    -1,  1404,   901,   898,   847,
    1529,    -1,    -1,  1404,   901,   633,   898,   634,   848,  1532,
      -1,   850,    -1,    -1,   851,    -1,    -1,   388,   853,   852,
     856,    -1,    -1,    -1,   388,   855,   856,    -1,    47,   857,
     866,   867,   874,    -1,   859,   253,   633,   860,   634,    -1,
      -1,   859,   209,   858,   864,    -1,   416,   864,    -1,   416,
     863,    -1,   270,   864,    -1,   270,   863,    -1,    -1,   267,
      -1,    -1,   861,    -1,   862,    -1,   861,   635,   862,    -1,
    1442,    -1,    71,   633,   860,   634,    -1,   633,  1141,   872,
    1142,   634,    -1,   633,  1141,   872,  1142,   634,    -1,    -1,
     389,  1263,    -1,    -1,    -1,   531,    47,   859,   209,   865,
     868,   873,    -1,    -1,   531,    47,   859,   253,   633,   870,
     634,   869,   873,    -1,   871,    -1,   870,   635,   871,    -1,
    1442,    -1,  1148,    -1,    -1,   530,  1263,    -1,    -1,   633,
     875,   634,    -1,   876,    -1,   875,   635,   876,    -1,    -1,
     388,   877,   878,   879,   895,   890,    -1,  1442,    -1,    -1,
      -1,   595,   262,   550,   880,   882,    -1,    -1,   595,   241,
     881,   883,    -1,   316,    -1,   885,    -1,   885,    -1,   633,
     884,   634,    -1,   885,    -1,   884,   635,   885,    -1,    -1,
      -1,   633,   886,   888,   887,   634,    -1,   889,    -1,   888,
     635,   889,    -1,   316,    -1,  1148,    -1,    -1,   633,   891,
     634,    -1,   892,    -1,   891,   635,   892,    -1,    -1,   531,
     893,   894,   895,    -1,  1444,    -1,    -1,   896,    -1,   896,
     897,    -1,   897,    -1,   540,  1318,  1444,    -1,  1359,   156,
    1318,   916,    -1,   352,  1318,  1263,    -1,   311,  1318,  1265,
      -1,   329,  1318,  1265,    -1,   108,   134,  1318,  1439,    -1,
     228,   134,  1318,  1439,    -1,    75,  1318,  1439,    -1,    -1,
      -1,   471,   899,  1135,  1139,   900,   920,    -1,    -1,    19,
      -1,    -1,   903,    -1,   904,    -1,   903,   904,    -1,   915,
      -1,   914,    -1,    -1,   906,    -1,   907,    -1,   907,   906,
      -1,   545,    -1,    -1,   223,  1151,   169,    -1,    -1,   911,
      -1,   912,    -1,   912,   910,    -1,   912,    -1,   912,   911,
      -1,   912,   635,   911,    -1,   156,  1318,   916,    -1,   311,
    1318,  1264,    -1,   329,  1318,  1264,    -1,    27,  1318,  1262,
      -1,   391,  1318,  1439,    -1,    75,  1318,  1439,    -1,    26,
    1318,  1264,    -1,   383,  1318,  1262,    -1,   383,  1318,   123,
      -1,   517,  1318,  1262,    -1,   517,  1318,   123,    -1,   518,
    1318,  1262,    -1,   518,  1318,   123,    -1,   519,  1318,  1262,
      -1,   519,  1318,   123,    -1,    61,  1318,  1262,    -1,   543,
    1318,  1262,    -1,   127,  1318,  1262,    -1,   461,  1318,   918,
      -1,    -1,   579,  1318,   913,   633,  1382,   634,    -1,   914,
      -1,   915,    -1,   235,  1318,   919,    -1,   108,   134,  1318,
    1439,    -1,   228,   134,  1318,  1439,    -1,   540,  1442,    -1,
     524,   137,    -1,   524,   321,    -1,    83,  1318,  1439,    -1,
     252,  1318,  1262,    -1,   968,   959,  1318,   961,    -1,   968,
      69,  1318,   967,    -1,  1444,    -1,  1444,    -1,   123,    -1,
     183,    -1,   146,    -1,    80,    -1,   426,    -1,    78,    -1,
     357,    -1,   182,    -1,   256,    -1,  1257,    -1,  1134,  1138,
      -1,   526,    -1,   421,    -1,   121,    -1,   239,    -1,   923,
      -1,   924,    -1,   923,   635,   924,    -1,   925,    -1,   926,
      -1,   931,   927,    -1,   931,   985,    -1,   991,  1015,  1000,
     633,  1013,   634,  1001,    -1,   997,   994,  1015,   999,   633,
    1013,   634,  1002,    -1,   998,   994,  1015,   999,   633,  1013,
     634,  1003,    -1,   929,   992,  1015,  1000,   633,  1013,   634,
    1001,    -1,   929,   188,   253,  1015,   633,  1013,   634,   985,
      -1,   929,   928,    -1,    -1,   928,    -1,    62,   633,  1145,
     634,    -1,    -1,   930,    -1,    85,  1015,    -1,    -1,  1433,
     932,   933,   953,    -1,   941,   951,   947,    -1,   942,   952,
     947,    -1,   185,   943,   947,    -1,    39,    -1,    39,   950,
      -1,    44,    -1,    43,    -1,   937,   950,   971,    -1,   937,
     971,    -1,   938,   950,   972,    -1,   938,   972,    -1,    34,
     950,    -1,    34,    -1,   939,   950,   971,    -1,   940,   950,
     972,    -1,   597,   950,    -1,   622,   951,   947,    -1,   112,
      -1,   555,   945,    -1,   552,   945,    -1,   109,   945,    -1,
     556,    -1,    41,   951,    -1,   936,    -1,   317,    -1,   278,
      -1,   281,   597,    -1,   281,   939,   971,    -1,   558,   971,
      -1,   549,   951,   971,    -1,   319,   971,    -1,   279,   971,
      -1,   121,   943,   947,    -1,   363,   943,   947,    -1,   183,
     943,   947,    -1,    -1,   157,   934,   633,  1017,   634,   971,
      -1,    -1,   479,   935,   633,  1017,   634,   971,    -1,   281,
     971,    -1,   475,    -1,   199,    -1,   198,    -1,   396,    -1,
     337,    -1,   269,    -1,   336,    -1,   397,    -1,   338,    -1,
      60,    -1,   346,    -1,   343,    60,    -1,   937,   601,    -1,
     598,    -1,   343,   598,    -1,   364,    -1,   346,   598,    -1,
     343,    60,   601,    -1,   346,   601,    -1,   239,    -1,   557,
      -1,   491,    -1,   318,    -1,    33,    -1,   421,    -1,   140,
      -1,   140,   400,    -1,    -1,   950,    -1,   944,    -1,   633,
     361,   635,   361,   634,    -1,    -1,   633,   361,   634,    -1,
      -1,   633,   634,    -1,   633,   361,   634,    -1,    -1,   948,
      -1,   948,   949,    -1,   949,    -1,   487,    -1,   583,    -1,
     623,    -1,   633,   280,   634,    -1,   633,   570,   634,    -1,
     633,   120,   634,    -1,   633,   361,   634,    -1,    -1,   950,
      -1,    -1,   944,    -1,    -1,   954,    -1,   954,   955,    -1,
     955,    -1,   360,    -1,  1151,   360,    -1,   123,   958,    -1,
     367,   585,   957,    -1,    26,    -1,   475,   123,   596,    -1,
     984,   253,    -1,   580,    -1,   580,   253,    -1,    75,  1439,
      -1,    69,   965,    -1,    73,   123,    -1,    73,   183,    -1,
      73,   146,    -1,   524,   123,    -1,   524,   137,    -1,   524,
     321,    -1,   933,   966,    -1,   356,   946,    -1,   957,    -1,
    1423,    -1,    60,   479,    -1,    59,    -1,  1444,    -1,    34,
      -1,   960,    -1,   123,    -1,    -1,   959,   961,    -1,  1444,
      -1,    34,    -1,   963,    -1,   123,    -1,  1444,    -1,    -1,
      69,   967,    -1,   965,    -1,   123,    -1,    -1,   123,    -1,
      21,    -1,    34,    21,    -1,    21,    34,    -1,   577,    -1,
     577,    34,    -1,    34,   577,    -1,    -1,   969,    -1,   970,
      -1,    48,    -1,   959,   960,   972,    -1,    34,    -1,    34,
     959,   960,    -1,    -1,    34,    -1,    -1,   633,  1263,   974,
     634,    -1,    20,    -1,   129,    -1,   454,    -1,    -1,   975,
      -1,   975,   976,    -1,   976,    -1,  1263,    -1,   978,   977,
      -1,   979,    -1,   980,   635,   979,    -1,   978,   626,   978,
      -1,   980,    -1,   981,    -1,    -1,   263,   982,    -1,    -1,
     404,    -1,   427,  1434,   986,   988,   989,    -1,    -1,   633,
     987,   634,    -1,   987,   635,  1442,    -1,  1442,    -1,    -1,
     308,   193,    -1,   308,   387,    -1,   308,   488,    -1,    -1,
     367,   585,   990,    -1,   367,   128,   990,    -1,   367,   585,
     990,   367,   128,   990,    -1,   367,   128,   990,   367,   585,
     990,    -1,   449,    -1,    51,    -1,   479,   360,    -1,   357,
       5,    -1,   479,   123,    -1,   993,    -1,   404,   253,    -1,
     580,   994,    -1,   253,    -1,   228,    -1,    -1,   993,    -1,
     251,    -1,   228,    -1,   227,    -1,    -1,   580,    -1,   194,
      -1,   497,    -1,    -1,   999,    -1,   999,  1007,    -1,    -1,
    1004,    -1,    -1,  1006,    -1,    -1,  1005,    -1,  1009,    -1,
    1004,  1009,    -1,  1010,    -1,  1005,  1010,    -1,  1011,    -1,
    1006,  1011,    -1,   591,  1012,    -1,   568,  1012,    -1,   252,
    1318,  1262,    -1,    75,  1439,    -1,  1008,    -1,  1007,    -1,
    1008,    -1,  1008,    -1,   611,   386,  1437,    -1,    46,    -1,
     464,    -1,   209,    -1,  1013,   635,  1014,  1255,    -1,  1014,
    1255,    -1,  1442,    -1,  1442,   633,   361,   634,    -1,    -1,
    1433,    -1,    -1,   641,  1442,    -1,  1421,    -1,  1017,   635,
    1421,    -1,    -1,    13,  1056,   542,  1434,  1019,  1031,    -1,
      -1,    13,   105,  1030,  1020,   903,    -1,    13,   105,  1442,
     586,   108,   134,   342,    -1,    -1,    13,   406,   694,  1021,
     695,    -1,    -1,    13,   195,   694,  1022,   695,    -1,    -1,
      13,  1555,  1550,  1023,  1557,    -1,    -1,    13,  1550,  1024,
    1557,    -1,    -1,    13,  1550,   165,   694,  1025,  1027,  1028,
     684,   689,  1029,    -1,    13,   540,   806,    -1,    13,   276,
     205,   808,    -1,    13,   540,   803,    -1,    13,   540,   802,
      -1,    13,   477,  1444,   372,   633,   678,   634,    -1,    13,
     588,   693,  1026,    -1,  1445,   391,   172,    -1,  1026,   635,
    1445,   391,   172,    -1,    -1,   367,   466,   682,    -1,   688,
      -1,   367,   466,   682,   688,    -1,    -1,   437,   559,   694,
      -1,    -1,   141,   690,    -1,    -1,  1442,    -1,    -1,   136,
     540,    -1,   226,   540,    -1,  1046,   850,    -1,  1046,  1035,
      -1,  1035,    -1,   851,    -1,  1037,    -1,   142,   388,  1044,
      -1,   422,   388,  1094,  1036,    -1,    -1,   371,   388,  1094,
    1036,  1032,  1094,    -1,    15,   388,  1094,  1036,    -1,    -1,
      62,   388,  1036,  1033,  1089,    -1,    -1,   439,   388,  1094,
    1036,  1034,  1081,    -1,    67,   388,  1094,  1263,    -1,   566,
     388,  1036,    -1,  1040,    -1,   167,   388,  1045,   611,   542,
    1434,   853,    -1,   436,   390,   853,    -1,    12,    -1,  1044,
      -1,    -1,     6,   388,  1094,  1038,  1039,    -1,    -1,   633,
     875,   634,    -1,   389,  1263,    -1,    -1,   438,   388,  1094,
    1041,  1042,    -1,    -1,    -1,  1044,  1043,   238,   633,   875,
     634,    -1,  1045,    -1,  1044,   635,  1045,    -1,  1442,    -1,
    1048,    -1,  1046,   635,  1048,    -1,     6,  1055,    -1,  1047,
     925,  1058,    -1,     6,   926,    -1,  1047,   633,   922,   634,
      -1,    -1,    57,  1055,  1433,  1049,   931,  1058,    -1,    -1,
      -1,   333,  1055,  1433,  1050,   933,   953,  1051,  1058,    -1,
     142,  1055,  1433,  1057,    -1,   142,   188,   253,  1433,    -1,
     142,   404,   253,    -1,   142,   993,  1433,    -1,   135,   251,
      -1,   150,   251,    -1,    13,  1055,  1433,   479,   123,  1423,
      -1,    13,  1055,  1433,   142,   123,    -1,   437,  1059,  1434,
      -1,    93,   559,   959,   961,   966,    -1,   910,    -1,   187,
      -1,  1248,    -1,  1053,    -1,  1054,    -1,    -1,  1054,    -1,
    1053,    -1,  1054,  1053,    -1,  1053,  1054,    -1,    11,  1318,
     123,    -1,    11,  1318,  1442,    -1,   275,  1318,   123,    -1,
     275,  1318,  1442,    -1,    -1,    72,    -1,    -1,   224,    -1,
      -1,   449,    -1,    51,    -1,    -1,     8,  1442,    -1,   182,
      -1,    -1,   559,    -1,   158,    -1,    19,    -1,    -1,   516,
     489,  1071,  1061,  1074,  1066,    -1,   523,   489,  1071,    -1,
     516,   561,  1063,    -1,    -1,  1064,    -1,  1065,    -1,  1064,
     635,  1065,    -1,   611,    84,   492,    -1,   419,   369,    -1,
     419,   616,    -1,  1067,  1068,  1069,  1070,    -1,    -1,   588,
     158,  1439,    -1,    -1,   391,   158,  1439,    -1,    -1,   124,
     158,  1439,    -1,    -1,   393,   158,  1439,    -1,    -1,  1072,
      -1,  1073,    -1,  1072,   635,  1073,    -1,   512,    -1,   433,
      -1,    -1,   584,  1075,    -1,   666,    -1,  1075,   635,   666,
      -1,   504,   158,  1439,    -1,   502,   158,  1439,    -1,   503,
      -1,    -1,    61,  1478,  1077,  1288,  1078,    -1,    -1,   415,
      -1,   174,    -1,    -1,   439,  1094,  1478,  1080,  1288,  1081,
      -1,    -1,  1082,    -1,  1083,    -1,  1083,  1082,    -1,   415,
      -1,   174,    -1,   589,    -1,    -1,    15,  1094,  1478,  1085,
    1288,    -1,    35,  1439,    -1,    -1,    62,  1478,  1088,  1288,
    1089,    -1,    -1,  1090,    -1,  1091,    -1,  1091,  1090,    -1,
     415,    -1,   178,    -1,   320,    -1,   174,    -1,    58,    -1,
     189,   586,    -1,    -1,   371,  1094,  1478,  1093,  1288,    -1,
      -1,   359,    -1,   272,    -1,    -1,   437,  1478,  1096,  1098,
      -1,   437,   588,   693,  1097,    -1,  1445,   559,  1445,    -1,
    1097,   635,  1445,   559,  1445,    -1,  1099,    -1,  1098,   635,
    1099,    -1,  1434,   559,  1434,    -1,    -1,    49,   228,  1101,
    1102,   241,  1106,    -1,  1103,    -1,  1105,    -1,  1104,    -1,
    1103,   635,  1104,    -1,  1434,  1115,    -1,  1434,  1113,  1115,
      -1,  1442,    -1,   123,    -1,    -1,   271,   228,   238,    49,
    1108,  1109,    -1,  1112,    -1,  1110,    -1,  1111,    -1,  1110,
     635,  1111,    -1,  1434,  1115,  1118,    -1,  1434,  1113,  1115,
    1118,    -1,    -1,   388,   853,  1114,   633,  1036,   634,    -1,
      -1,  1116,  1117,    -1,    -1,   993,   633,  1230,   634,    -1,
      -1,   224,   259,    -1,   118,  1121,  1123,  1122,    -1,  1125,
      -1,    -1,   138,    -1,   192,  1189,  1124,    -1,    -1,  1123,
     635,  1140,    -1,  1140,    -1,   628,    -1,    -1,   609,  1145,
      -1,   471,  1128,    -1,   633,  1126,   634,  1532,    -1,   471,
    1130,    -1,   633,  1126,   634,    -1,   471,  1209,    -1,   633,
    1127,   634,    -1,    -1,  1130,  1129,  1529,    -1,    -1,    -1,
    1131,  1135,  1139,  1132,  1133,  1138,    -1,  1251,  1257,    -1,
    1276,    -1,  1134,    -1,  1276,  1134,    -1,  1134,  1276,    -1,
     192,  1189,  1240,  1245,  1242,  1251,  1257,  1268,    -1,   192,
     143,  1240,  1257,    -1,    -1,  1136,    -1,  1136,  1137,    -1,
    1137,    -1,  1546,    -1,   509,    -1,   507,    -1,    -1,   189,
     585,    -1,   275,   241,   481,   331,    -1,  1139,   635,  1140,
      -1,  1140,    -1,   628,    -1,  1141,  1428,  1142,    -1,  1141,
    1145,  1142,  1143,    -1,    -1,    -1,    -1,    19,  1442,    -1,
      19,  1439,    -1,  1442,    -1,  1439,    -1,    -1,   633,   634,
      -1,  1145,  1149,  1145,    -1,  1145,   620,  1145,    -1,  1145,
    1150,  1145,    -1,   355,  1145,    -1,  1146,   246,   565,    -1,
    1146,   246,  1151,   565,    -1,  1146,   246,   177,    -1,  1146,
     246,  1151,   177,    -1,  1146,   246,   581,    -1,  1146,   246,
    1151,   581,    -1,  1146,    -1,  1146,   246,   360,    -1,  1146,
     246,  1151,   360,    -1,  1146,   159,  1147,    -1,  1146,  1153,
    1147,    -1,  1146,  1153,  1154,   633,  1541,   634,    -1,  1147,
      -1,  1148,   241,   633,  1541,   634,    -1,  1148,  1151,   241,
     633,  1541,   634,    -1,  1148,   241,   633,  1145,   634,    -1,
    1148,   241,   633,  1145,   635,  1182,   634,    -1,  1148,  1151,
     241,   633,  1145,   634,    -1,  1148,  1151,   241,   633,  1145,
     635,  1182,   634,    -1,  1148,    32,  1148,    17,  1147,    -1,
    1148,  1151,    32,  1148,    17,  1147,    -1,  1148,   495,   265,
    1148,    -1,  1148,   265,  1155,  1244,    -1,  1148,  1151,   265,
    1155,  1244,    -1,  1148,   428,  1148,    -1,  1148,  1151,   428,
    1148,    -1,  1148,    -1,  1148,   624,  1148,    -1,  1148,   625,
    1148,    -1,  1148,   482,  1148,    -1,  1148,   483,  1148,    -1,
    1148,   627,  1148,    -1,  1148,   626,  1148,    -1,  1148,   627,
     237,  1145,  1234,    -1,  1148,   626,   237,  1145,  1234,    -1,
    1148,   628,  1148,    -1,  1148,   629,  1148,    -1,  1148,   630,
    1148,    -1,  1148,   139,  1148,    -1,  1148,   334,  1148,    -1,
    1148,   631,  1148,    -1,  1155,    -1,   378,    -1,   375,    -1,
      17,    -1,    16,    -1,   355,    -1,   354,    -1,   636,    -1,
     354,    -1,   158,    -1,   196,    -1,   207,    -1,   257,    -1,
     284,    -1,   348,    -1,    12,    -1,    18,    -1,  1430,    -1,
    1156,    -1,  1157,    -1,  1160,    -1,  1158,    -1,  1155,    69,
    1444,    -1,  1424,    -1,  1422,    -1,  1172,    -1,  1168,    -1,
    1155,   377,  1155,    -1,   627,  1155,    -1,   626,  1155,    -1,
     632,  1155,    -1,  1152,  1155,    -1,   633,  1541,   634,    -1,
     633,  1145,   634,    -1,   633,  1145,   635,  1182,   634,    -1,
     462,   633,  1145,   635,  1182,   634,    -1,   169,   633,  1541,
     634,    -1,   637,  1442,  1145,   638,    -1,   308,  1183,     9,
     633,  1148,  1162,   634,    -1,    34,  1155,    -1,    54,   633,
    1145,    19,  1180,   634,    -1,    53,  1185,  1187,  1186,   152,
      -1,    93,   633,  1145,   635,  1180,   634,    -1,    93,   633,
    1145,   591,   960,   634,    -1,   123,   633,  1430,   634,    -1,
     595,   633,  1431,   634,    -1,   237,  1145,  1234,   627,  1145,
      -1,    60,   633,  1182,   634,    -1,    60,   633,  1182,   591,
     960,   634,    -1,   101,  1144,    -1,   112,   633,  1145,   634,
      -1,   117,   633,  1145,   634,    -1,   219,   633,  1145,   634,
      -1,   234,   633,  1145,   635,  1145,   635,  1145,   635,  1145,
     634,    -1,   237,   633,  1145,   635,  1145,   634,    -1,   237,
     633,  1145,   635,  1145,   635,  1182,   634,    -1,   261,   633,
    1145,   635,  1145,   634,    -1,   328,   633,  1145,   634,    -1,
     335,   633,  1145,   634,    -1,   456,   633,  1145,   635,  1145,
     634,    -1,   469,   633,  1145,   634,    -1,   555,   633,  1145,
     634,    -1,   552,   633,  1145,   634,    -1,   552,   633,  1145,
     635,  1145,   634,    -1,   564,   633,  1145,   634,    -1,   564,
     633,   258,  1145,   192,  1145,   634,    -1,   564,   633,   560,
    1145,   192,  1145,   634,    -1,   564,   633,    45,  1145,   192,
    1145,   634,    -1,   564,   633,   258,   192,  1145,   634,    -1,
     564,   633,   560,   192,  1145,   634,    -1,   564,   633,    45,
     192,  1145,   634,    -1,   564,   633,  1145,   192,  1145,   634,
      -1,   588,   633,   634,    -1,   622,   633,  1145,   634,    -1,
       7,   633,  1145,   635,  1145,   634,    -1,     7,   633,  1145,
     635,   237,  1145,  1234,   634,    -1,    99,  1144,    -1,   104,
     946,    -1,   110,   633,  1145,   635,   237,  1145,  1234,   634,
      -1,   111,   633,  1145,   635,   237,  1145,  1234,   634,    -1,
     176,   633,  1234,   192,  1145,   634,    -1,   200,   633,  1236,
     635,  1145,   634,    -1,   957,    -1,   399,   633,  1148,   241,
    1145,   634,    -1,   528,   633,  1145,   635,  1145,   634,    -1,
     528,   633,  1145,   635,   237,  1145,  1234,   634,    -1,   532,
     633,  1145,   635,  1145,   635,  1145,   634,    -1,   532,   633,
    1145,   635,  1145,   634,    -1,   532,   633,  1145,   192,  1145,
     189,  1145,   634,    -1,   532,   633,  1145,   192,  1145,   634,
      -1,   538,   946,    -1,   553,   633,  1235,   635,  1145,   635,
    1145,   634,    -1,   554,   633,  1235,   635,  1145,   635,  1145,
     634,    -1,   592,  1144,    -1,   594,   946,    -1,   593,   946,
      -1,    21,   633,  1145,   634,    -1,    59,   633,  1145,   634,
      -1,    67,   633,  1182,   634,    -1,    70,   633,  1145,   634,
      -1,   105,   633,   634,    -1,   223,   633,  1145,   635,  1145,
     635,  1145,   634,    -1,   190,   633,  1145,   635,  1145,   634,
      -1,   190,   633,  1145,   635,  1145,   635,  1145,   634,    -1,
     324,   633,  1145,   634,    -1,   334,   633,  1145,   635,  1145,
     634,    -1,   366,   633,  1145,   634,    -1,   391,   633,  1145,
     634,    -1,   413,   633,  1145,   634,    -1,   441,   633,  1145,
     635,  1145,   634,    -1,   442,   633,  1145,   635,  1145,   635,
    1145,   634,    -1,   454,   633,  1145,   634,    -1,   463,   633,
     634,    -1,   566,   633,  1145,   635,  1145,   634,    -1,   606,
     633,  1145,   634,    -1,   606,   633,  1145,   635,  1145,   634,
      -1,   607,   633,  1145,   983,   634,    -1,   607,   633,  1145,
      19,    60,   973,   983,   634,    -1,   607,   633,  1145,    19,
      34,   973,   634,    -1,   607,   633,  1145,   635,  1262,   635,
    1262,   635,  1262,   634,    -1,  1159,    -1,    89,   633,  1145,
     635,  1145,   634,    -1,   198,   633,  1182,   634,    -1,   269,
     633,  1182,   634,    -1,   336,   633,  1182,   634,    -1,   337,
     633,  1182,   634,    -1,   338,   633,  1182,   634,    -1,   396,
     633,  1145,   635,  1145,   634,    -1,   397,   633,  1182,   634,
      -1,    -1,  1437,   633,  1161,  1165,   634,    -1,  1442,   641,
    1442,   633,  1181,   634,    -1,  1163,  1164,    -1,   241,    43,
     331,    -1,    -1,   241,   344,   255,   331,    -1,    -1,   611,
     414,   171,    -1,    -1,  1166,    -1,  1167,    -1,  1166,   635,
    1167,    -1,  1141,  1145,  1142,  1143,    -1,    28,   633,  1178,
     634,    -1,    28,   633,   138,  1178,   634,    -1,    37,   633,
    1178,   634,    -1,    38,   633,  1178,   634,    -1,    40,   633,
    1178,   634,    -1,    94,   633,  1239,   628,   634,    -1,    94,
     633,  1178,   634,    -1,    -1,    -1,    94,   633,   138,  1169,
    1182,  1170,   634,    -1,   330,   633,  1178,   634,    -1,   330,
     633,   138,  1178,   634,    -1,   313,   633,  1178,   634,    -1,
     313,   633,   138,  1178,   634,    -1,   522,   633,  1178,   634,
      -1,   600,   633,  1178,   634,    -1,   521,   633,  1178,   634,
      -1,   602,   633,  1178,   634,    -1,   533,   633,  1178,   634,
      -1,   533,   633,   138,  1178,   634,    -1,    -1,   206,   633,
    1175,  1171,  1182,  1177,  1176,   634,    -1,    -1,   640,  1173,
    1174,    -1,  1444,   480,  1145,    -1,  1444,    -1,   640,  1464,
    1444,  1016,    -1,    -1,   138,    -1,    -1,   473,  1421,    -1,
      -1,  1252,    -1,    -1,  1239,  1179,  1145,    -1,    34,   951,
      -1,    60,   951,   971,    -1,   346,   951,    -1,   487,    -1,
     487,   239,    -1,   583,    -1,   583,   239,    -1,   112,    -1,
     555,   945,    -1,   109,   945,    -1,   121,   943,    -1,    -1,
    1182,    -1,  1145,    -1,  1182,   635,  1145,    -1,  1184,    -1,
     633,  1184,   634,    -1,  1430,    -1,  1184,   635,  1430,    -1,
      -1,  1145,    -1,    -1,   148,  1145,    -1,   608,  1145,   551,
    1145,    -1,  1187,   608,  1145,   551,  1145,    -1,  1203,    -1,
    1192,    -1,  1191,    -1,  1188,    -1,   637,  1442,  1188,   638,
      -1,  1190,    -1,  1191,   635,  1190,    -1,  1188,  1200,  1188,
      -1,  1188,   525,  1203,    -1,    -1,  1188,  1200,  1188,   367,
    1193,  1145,    -1,    -1,  1188,   525,  1203,   367,  1194,  1145,
      -1,    -1,  1188,  1200,  1188,   591,  1195,   633,  1233,   634,
      -1,  1188,   344,   250,  1203,    -1,    -1,  1188,   261,  1219,
     250,  1188,   367,  1196,  1145,    -1,    -1,  1188,   261,  1219,
     250,  1203,  1197,   591,   633,  1233,   634,    -1,  1188,   344,
     261,  1219,   250,  1203,    -1,    -1,  1188,   456,  1219,   250,
    1188,   367,  1198,  1145,    -1,    -1,  1188,   456,  1219,   250,
    1203,  1199,   591,   633,  1233,   634,    -1,  1188,   344,   456,
    1219,   250,  1203,    -1,   250,    -1,   231,   250,    -1,    97,
     250,    -1,    -1,  1202,    -1,   388,   633,  1233,   634,   853,
      -1,    -1,  1204,  1434,  1201,  1238,  1228,    -1,  1218,  1217,
    1214,    -1,   633,  1217,  1205,   634,  1238,    -1,  1212,  1533,
      -1,    -1,    -1,  1205,   579,  1537,  1206,  1538,  1207,  1533,
      -1,  1209,    -1,    -1,    -1,  1210,  1544,  1139,  1211,   920,
    1138,    -1,    -1,  1217,  1213,  1191,    -1,    -1,    -1,  1215,
    1135,  1139,  1216,   920,    -1,    -1,   471,    -1,    -1,   379,
      -1,    -1,   189,   250,    -1,   189,   376,    47,    -1,   189,
     205,    47,    -1,   187,    -1,   224,    -1,    -1,  1221,   993,
    1220,  1223,   633,  1232,   634,    -1,    -1,   590,   993,  1220,
    1224,   633,  1230,   634,    -1,  1222,    -1,  1225,  1222,    -1,
      -1,    -1,  1227,  1225,    -1,    -1,  1229,  1226,    -1,    -1,
    1232,    -1,  1442,    -1,   404,    -1,  1231,    -1,  1232,   635,
    1231,    -1,  1442,    -1,  1233,   635,  1442,    -1,  1235,    -1,
     113,    -1,   114,    -1,   115,    -1,   116,    -1,   216,    -1,
     217,    -1,   218,    -1,   326,    -1,   327,    -1,   468,    -1,
     621,    -1,   117,    -1,   606,    -1,   219,    -1,   328,    -1,
     335,    -1,   413,    -1,   469,    -1,   324,    -1,   622,    -1,
     112,    -1,   555,    -1,   552,    -1,   109,    -1,    -1,    19,
      -1,   158,    -1,    -1,  1237,  1442,    -1,    -1,    12,    -1,
      -1,    -1,   609,  1241,  1145,    -1,    -1,    -1,   210,  1243,
    1145,    -1,   163,  1155,    -1,    -1,    -1,   205,    47,  1246,
    1247,    -1,  1246,   635,  1429,  1255,    -1,  1429,  1255,    -1,
      -1,   612,    -1,   613,    -1,   376,    47,  1249,    -1,  1249,
     635,  1250,    -1,  1250,    -1,  1431,  1255,    -1,    -1,  1252,
      -1,    -1,   376,    47,  1253,  1254,    -1,  1254,   635,  1429,
    1255,    -1,  1429,  1255,    -1,    -1,    20,    -1,   129,    -1,
      -1,  1258,    -1,    -1,  1258,    -1,   266,  1259,    -1,  1260,
      -1,  1260,   635,  1260,    -1,  1260,   365,  1260,    -1,  1442,
      -1,  1422,    -1,   570,    -1,   280,    -1,   361,    -1,    -1,
     266,  1260,    -1,   361,    -1,   212,    -1,   280,    -1,   570,
      -1,   120,    -1,   184,    -1,   361,    -1,   212,    -1,   280,
      -1,   570,    -1,  1266,    -1,   361,    -1,   570,    -1,   280,
      -1,   120,    -1,   184,    -1,   361,    -1,   570,    -1,   280,
      -1,  1266,    -1,  1267,    -1,   120,    -1,   184,    -1,    -1,
      -1,   406,    14,  1269,   633,  1270,   634,    -1,    -1,  1271,
      -1,  1271,   635,  1271,    -1,   361,    -1,    -1,  1273,  1274,
      -1,  1274,   635,  1275,    -1,  1275,    -1,   640,  1444,    -1,
    1444,    -1,    -1,   238,  1277,  1278,    -1,    -1,    -1,   380,
    1441,  1279,   962,  1280,  1405,  1408,    -1,   144,  1441,    -1,
    1272,    -1,    -1,   141,  1282,  1182,    -1,    -1,   142,  1294,
    1478,  1293,  1284,  1288,  1057,    -1,    -1,    -1,   142,   228,
    1442,   367,  1434,  1285,  1286,  1052,    -1,   142,   105,  1293,
    1442,    -1,   142,   195,  1293,  1442,   641,  1442,    -1,   142,
     195,  1293,  1442,    -1,   142,   406,  1293,   694,    -1,   142,
     588,   693,  1508,    -1,    -1,   142,   603,  1293,  1287,  1288,
    1057,    -1,   142,   165,  1293,   694,    -1,   142,   563,  1293,
     694,    -1,   142,   540,   829,  1295,    -1,   142,   276,   205,
     830,  1295,    -1,   142,   477,  1293,  1444,    -1,  1289,    -1,
    1288,   635,  1289,    -1,  1434,    -1,  1434,  1201,    -1,  1292,
      -1,  1291,   635,  1292,    -1,  1435,    -1,    -1,   223,   169,
      -1,    -1,   545,    -1,    -1,  1296,    -1,  1297,    -1,  1296,
    1297,    -1,  1295,   635,  1297,    -1,   840,    -1,   841,    -1,
      -1,    -1,   234,  1299,  1304,  1056,  1306,  1300,  1308,  1324,
      -1,    -1,    -1,   442,  1302,  1305,  1306,  1303,  1308,    -1,
      -1,   283,    -1,   126,    -1,   213,    -1,  1333,    -1,   126,
      -1,   238,  1307,    -1,  1307,    -1,  1290,    -1,  1311,    -1,
     633,   634,  1311,    -1,   633,  1310,   634,  1311,    -1,    -1,
     479,  1309,  1315,    -1,  1310,   635,  1427,    -1,  1427,    -1,
     595,  1314,    -1,   596,  1314,    -1,    -1,   898,  1312,  1529,
      -1,    -1,   633,   898,   634,  1313,  1532,    -1,  1314,   635,
    1319,    -1,  1319,    -1,  1315,   635,  1316,    -1,  1316,    -1,
    1431,  1317,  1323,    -1,   158,    -1,   480,    -1,    -1,  1317,
      -1,    -1,   633,  1320,  1321,   634,    -1,    -1,  1322,    -1,
    1322,   635,  1323,    -1,  1323,    -1,  1145,    -1,   123,    -1,
      -1,    -1,   367,   145,  1325,   253,   585,  1331,    -1,    -1,
      -1,   585,  1327,  1333,  1056,  1189,   479,  1329,  1328,  1240,
    1251,  1261,    -1,  1329,   635,  1330,    -1,  1330,    -1,  1431,
    1317,  1323,    -1,  1331,   635,  1332,    -1,  1332,    -1,  1431,
    1317,  1323,    -1,    -1,   283,    -1,    -1,   128,  1335,  1343,
    1336,    -1,    -1,   192,  1434,  1201,  1337,  1240,  1251,  1261,
      -1,    -1,  1340,  1338,   192,  1189,  1240,    -1,    -1,   192,
    1291,  1339,   591,  1189,  1240,    -1,  1341,    -1,  1340,   635,
    1341,    -1,  1442,  1342,    -1,  1442,   641,  1442,  1342,    -1,
      -1,   641,   628,    -1,    -1,  1344,  1343,    -1,   415,    -1,
     283,    -1,   224,    -1,    -1,   566,  1347,  1346,  1289,    -1,
      -1,   542,    -1,    -1,  1349,    -1,  1350,    -1,  1349,   635,
    1350,    -1,    95,    -1,   321,    -1,    42,   244,    -1,    90,
     537,    -1,   384,   179,    -1,   245,    -1,   536,    -1,   496,
      -1,    12,    -1,    -1,   189,   414,   361,    -1,    -1,   484,
    1353,  1354,    -1,   106,  1365,    -1,  1361,   539,  1360,  1365,
      -1,  1361,   562,  1360,  1365,    -1,   164,  1360,  1365,    -1,
     542,   520,  1360,  1365,    -1,   370,   539,  1360,  1365,    -1,
     395,    -1,   156,   917,  1357,    -1,   156,    12,  1357,    -1,
    1361,    71,  1362,  1434,  1360,  1365,    -1,  1358,   277,    -1,
     489,   215,    -1,    -1,    35,   164,  1363,  1364,  1355,  1256,
      -1,    -1,   430,   164,  1363,  1364,  1356,  1256,    -1,   995,
    1362,  1434,  1360,  1240,    -1,  1359,   155,    -1,    24,    -1,
      92,    -1,   405,    -1,    94,   633,   628,   634,   605,    -1,
      94,   633,   628,   634,   161,    -1,   605,  1256,    -1,   161,
    1256,    -1,   410,    -1,   409,  1348,  1351,  1256,    -1,  1463,
     520,  1365,    -1,  1361,   408,    -1,  1463,   599,  1365,    -1,
     959,  1365,    -1,    70,  1365,    -1,   204,    -1,   204,   189,
    1445,    -1,    96,   105,   908,  1442,    -1,    96,   542,  1434,
      -1,    96,   603,  1434,    -1,   305,   520,    -1,   489,   520,
      -1,    96,   406,   694,    -1,    96,   195,   694,    -1,    96,
     563,   694,    -1,   406,   520,  1365,    -1,   195,   520,  1365,
      -1,   406,    68,   694,    -1,   195,    68,   694,    -1,    96,
     165,   694,    -1,   520,    -1,   339,    -1,   277,    -1,   305,
      -1,    34,    -1,    -1,   524,    -1,    -1,  1362,  1442,    -1,
      -1,   193,    -1,   192,    -1,   241,    -1,    -1,   241,  1439,
      -1,    -1,   192,  1264,    -1,    -1,   265,  1439,    -1,   609,
    1145,    -1,  1370,   118,  1121,  1123,  1122,    -1,    -1,  1370,
    1434,  1367,  1372,    -1,    -1,  1370,  1371,  1368,  1369,    -1,
    1120,    -1,  1298,    -1,  1301,    -1,  1326,    -1,  1334,    -1,
     129,    -1,   130,    -1,    -1,   174,    -1,   389,    -1,   190,
     158,  1444,    -1,    -1,  1421,    -1,  1442,    -1,    -1,   186,
    1094,  1374,  1375,    -1,    -1,    -1,  1478,  1376,  1382,  1377,
    1378,    -1,  1380,    -1,    -1,   611,   419,   275,    -1,    -1,
     189,  1379,   173,    -1,  1380,   635,  1381,    -1,  1381,    -1,
     160,   277,    -1,   156,   277,    -1,   197,   277,    -1,   490,
     277,    -1,    34,   277,    -1,   429,   277,    -1,   414,    49,
      -1,   215,    -1,   405,    -1,   277,    -1,   520,    -1,   131,
      -1,   447,    -1,    -1,  1288,    -1,    -1,   445,  1384,  1385,
      -1,  1385,   635,  1386,    -1,  1386,    -1,    -1,   489,  1387,
    1388,    -1,   305,    -1,   414,    49,    -1,    -1,    12,    -1,
      -1,   412,  1390,  1391,    -1,  1358,   277,  1392,    -1,   559,
    1439,    -1,    30,  1145,    -1,   254,  1394,  1145,    -1,    -1,
      83,    -1,   414,    -1,   590,  1442,    -1,    -1,    -1,    -1,
      -1,   271,  1401,  1397,  1403,  1402,   229,  1441,  1398,  1404,
     238,   542,  1434,  1201,  1399,   962,  1400,  1411,  1405,  1408,
    1412,  1414,  1417,    -1,   108,    -1,   619,    -1,    -1,   272,
      -1,    -1,    81,    -1,   283,    -1,    -1,   442,    -1,   224,
      -1,    -1,    71,  1406,    -1,  1406,  1407,    -1,  1407,    -1,
     547,    47,  1421,    -1,   374,   151,    47,  1421,    -1,   151,
      47,  1421,    -1,   162,    47,  1421,    -1,    -1,   268,  1409,
      -1,  1409,  1410,    -1,  1410,    -1,   547,    47,  1421,    -1,
     514,    47,  1421,    -1,    -1,   460,   221,    47,  1421,    -1,
      -1,   224,   361,  1413,    -1,   268,    -1,   460,    -1,    -1,
     633,  1415,   634,    -1,   633,   634,    -1,  1415,   635,  1416,
      -1,  1416,    -1,  1431,    -1,   640,  1444,    -1,    -1,   479,
    1418,    -1,  1418,   635,  1419,    -1,  1419,    -1,  1431,  1317,
    1141,  1323,  1142,    -1,   548,    -1,   345,    -1,   573,   548,
      -1,  1420,  1440,    -1,  1440,    -1,   212,    -1,    36,    -1,
     385,    -1,  1424,    -1,   627,  1425,    -1,   626,  1425,    -1,
    1420,    -1,  1425,    -1,  1426,    -1,   360,    -1,   177,    -1,
     565,    -1,   212,    -1,    36,    -1,   573,   212,    -1,   573,
      36,    -1,   361,    -1,   280,    -1,   570,    -1,   120,    -1,
     184,    -1,   112,   548,    -1,   555,   548,    -1,   552,   548,
      -1,  1431,    -1,  1428,    -1,  1442,   641,   628,    -1,  1442,
     641,  1442,   641,   628,    -1,  1145,    -1,  1442,    -1,  1432,
      -1,  1442,    -1,  1432,    -1,  1442,   641,  1442,    -1,   641,
    1442,   641,  1442,    -1,  1442,   641,  1442,   641,  1442,    -1,
    1442,    -1,  1442,   641,  1442,   641,  1442,    -1,  1442,   641,
    1442,    -1,   641,  1442,    -1,  1442,    -1,  1442,   641,  1442,
      -1,   641,  1442,    -1,  1442,  1342,    -1,  1442,   641,  1442,
    1342,    -1,  1442,    -1,   220,    -1,   222,    -1,  1439,    -1,
     548,    -1,   548,    -1,   548,    -1,  1437,    -1,  1446,    -1,
    1437,    -1,  1447,    -1,  1442,    -1,  1439,    -1,   264,    -1,
    1444,    -1,  1444,   640,  1444,    -1,   101,  1144,    -1,  1447,
      -1,    21,    -1,    29,    -1,    31,    -1,    48,    -1,    49,
      -1,    59,    -1,    61,    -1,    66,    -1,    75,    -1,    77,
      -1,    89,    -1,   119,    -1,   141,    -1,   152,    -1,   168,
      -1,   186,    -1,   190,    -1,   208,    -1,   211,    -1,   214,
      -1,   236,    -1,   255,    -1,   357,    -1,   370,    -1,   372,
      -1,   382,    -1,   386,    -1,   398,    -1,   401,    -1,   436,
      -1,   439,    -1,   445,    -1,   448,    -1,   457,    -1,   465,
      -1,   470,    -1,   477,    -1,   487,    -1,   493,    -1,   489,
      -1,   494,    -1,   516,    -1,   523,    -1,   566,    -1,   577,
      -1,   578,    -1,   615,    -1,   618,    -1,   586,    -1,     5,
      -1,     7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,
      -1,    14,    -1,    18,    -1,    23,    -1,    24,    -1,    26,
      -1,    25,    -1,    27,    -1,    28,    -1,    35,    -1,    39,
      -1,    42,    -1,    44,    -1,    43,    -1,    46,    -1,    52,
      -1,    55,    -1,    56,    -1,    58,    -1,    63,    -1,    65,
      -1,    64,    -1,    67,    -1,    68,    -1,    70,    -1,    74,
      -1,    73,    -1,    71,    -1,    76,    -1,    78,    -1,    79,
      -1,    80,    -1,    81,    -1,    83,    -1,    84,    -1,    86,
      -1,    88,    -1,    87,    -1,    90,    -1,    92,    -1,    95,
      -1,    98,    -1,   100,    -1,   103,    -1,   108,    -1,   107,
      -1,   109,    -1,   112,    -1,   117,    -1,   124,    -1,   125,
      -1,   127,    -1,   131,    -1,   133,    -1,   134,    -1,   135,
      -1,   136,    -1,   137,    -1,   144,    -1,   145,    -1,   146,
      -1,   153,    -1,   157,    -1,   156,    -1,   155,    -1,   160,
      -1,   161,    -1,   163,    -1,   165,    -1,   164,    -1,   166,
      -1,   167,    -1,   171,    -1,   172,    -1,   173,    -1,   174,
      -1,   175,    -1,   179,    -1,   178,    -1,   191,    -1,   150,
      -1,   193,    -1,   181,    -1,   182,    -1,   183,    -1,   197,
      -1,   199,    -1,   198,    -1,   200,    -1,   204,    -1,   202,
      -1,   209,    -1,   215,    -1,   219,    -1,   221,    -1,   225,
      -1,   240,    -1,   226,    -1,   227,    -1,   230,    -1,   244,
      -1,   245,    -1,   247,    -1,   248,    -1,   235,    -1,   252,
      -1,   256,    -1,   259,    -1,   262,    -1,   263,    -1,   269,
      -1,   270,    -1,   272,    -1,   274,    -1,   276,    -1,   277,
      -1,   311,    -1,   305,    -1,   307,    -1,   289,    -1,   293,
      -1,   290,    -1,   291,    -1,   306,    -1,   292,    -1,   295,
      -1,   287,    -1,   294,    -1,   288,    -1,   303,    -1,   297,
      -1,   296,    -1,   298,    -1,   299,    -1,   300,    -1,   301,
      -1,   302,    -1,   285,    -1,   309,    -1,   310,    -1,   312,
      -1,   314,    -1,   315,    -1,   320,    -1,   321,    -1,   322,
      -1,   323,    -1,   324,    -1,   325,    -1,   328,    -1,   329,
      -1,   333,    -1,   331,    -1,   335,    -1,   336,    -1,   337,
      -1,   338,    -1,   339,    -1,   340,    -1,   342,    -1,   341,
      -1,   343,    -1,   346,    -1,   347,    -1,   351,    -1,   350,
      -1,   358,    -1,   352,    -1,   353,    -1,   362,    -1,   364,
      -1,   365,    -1,   366,    -1,   368,    -1,   369,    -1,   383,
      -1,   384,    -1,   387,    -1,   390,    -1,   389,    -1,   391,
      -1,   392,    -1,   393,    -1,   394,    -1,   395,    -1,   396,
      -1,   397,    -1,   402,    -1,   403,    -1,   405,    -1,   407,
      -1,   408,    -1,   409,    -1,   410,    -1,   411,    -1,   413,
      -1,   414,    -1,   415,    -1,   418,    -1,   422,    -1,   423,
      -1,   425,    -1,   424,    -1,   426,    -1,   429,    -1,   430,
      -1,   431,    -1,   432,    -1,   433,    -1,   435,    -1,   438,
      -1,   440,    -1,   443,    -1,   447,    -1,   450,    -1,   451,
      -1,   452,    -1,   454,    -1,   458,    -1,   459,    -1,   460,
      -1,   463,    -1,   461,    -1,   462,    -1,   464,    -1,   466,
      -1,   467,    -1,   469,    -1,   475,    -1,   474,    -1,   476,
      -1,   488,    -1,   481,    -1,   485,    -1,   490,    -1,   492,
      -1,   495,    -1,   496,    -1,   502,    -1,   503,    -1,   504,
      -1,   507,    -1,   506,    -1,   509,    -1,   512,    -1,   515,
      -1,   517,    -1,   518,    -1,   519,    -1,   520,    -1,   524,
      -1,   526,    -1,   527,    -1,   528,    -1,   529,    -1,   531,
      -1,   530,    -1,   534,    -1,   535,    -1,   536,    -1,   537,
      -1,   544,    -1,   539,    -1,   543,    -1,   540,    -1,   545,
      -1,   546,    -1,   549,    -1,   550,    -1,   561,    -1,   562,
      -1,   552,    -1,   553,    -1,   554,    -1,   555,    -1,   567,
      -1,   568,    -1,   569,    -1,   195,    -1,   571,    -1,   572,
      -1,   575,    -1,   574,    -1,   581,    -1,   584,    -1,   588,
      -1,   589,    -1,   599,    -1,   603,    -1,   596,    -1,   605,
      -1,   604,    -1,   606,    -1,   614,    -1,   607,    -1,   617,
      -1,   619,    -1,   622,    -1,    -1,   479,  1449,  1450,    -1,
      -1,  1466,  1451,  1456,    -1,    -1,   561,  1452,  1469,    -1,
      -1,  1462,  1453,  1454,    -1,    -1,  1465,  1455,  1456,    -1,
     561,  1469,    -1,    -1,   635,  1457,    -1,    -1,  1458,  1460,
      -1,    -1,  1457,   635,  1459,  1460,    -1,    -1,  1462,  1461,
    1465,    -1,  1466,    -1,   202,    -1,   272,    -1,   476,    -1,
      -1,   202,    -1,   272,    -1,   476,    -1,    -1,   202,   641,
      -1,   272,   641,    -1,   476,   641,    -1,  1468,  1317,  1475,
      -1,    -1,  1468,  1317,  1467,  1475,    -1,   640,  1444,  1317,
    1145,    -1,   640,   640,  1464,  1468,  1317,  1475,    -1,   959,
     964,    -1,   341,  1317,  1145,    -1,   341,   961,   966,    -1,
     391,  1317,  1474,    -1,   391,   189,  1445,  1317,  1474,    -1,
    1442,    -1,  1442,   641,  1442,    -1,   123,   641,  1442,    -1,
    1470,    -1,  1471,    -1,  1470,   635,  1471,    -1,  1471,   635,
    1470,    -1,  1472,    -1,   247,   263,  1473,    -1,   419,   369,
      -1,   419,   616,    -1,   419,   571,    -1,   419,    76,    -1,
     440,   419,    -1,   474,    -1,   548,    -1,   391,   633,   548,
     634,    -1,   366,   633,   548,   634,    -1,  1145,    -1,   123,
      -1,   367,    -1,    12,    -1,    34,    -1,    -1,   275,  1478,
    1477,  1479,    -1,   542,    -1,   539,    -1,  1480,    -1,  1479,
     635,  1480,    -1,  1434,  1238,  1481,    -1,   419,    -1,   616,
      -1,   283,   616,    -1,   419,   272,    -1,    -1,   582,  1483,
    1478,    -1,   208,  1434,   370,  1238,    -1,   208,  1436,    66,
      -1,    -1,   208,  1436,   419,  1485,  1486,  1240,  1257,    -1,
    1487,    -1,  1442,  1488,    -1,   182,    -1,   351,    -1,   182,
      -1,   351,    -1,   403,    -1,   256,    -1,    -1,  1490,  1489,
     633,  1322,   634,    -1,   158,    -1,   196,    -1,   257,    -1,
     207,    -1,   284,    -1,   455,   693,  1492,    -1,  1496,   367,
    1495,  1507,   192,  1509,    -1,  1496,   367,   195,  1507,   192,
    1509,    -1,  1496,   367,   406,  1507,   192,  1509,    -1,    12,
    1497,   635,   203,   373,   192,  1509,    -1,   411,   367,  1445,
     192,  1509,    -1,   203,   693,  1494,    -1,  1496,   367,  1495,
    1507,   559,  1509,  1514,  1515,    -1,  1496,   367,   195,  1507,
     559,  1509,  1514,  1515,    -1,  1496,   367,   406,  1507,   559,
    1509,  1514,  1515,    -1,   411,   367,  1445,   559,  1509,  1516,
      -1,    -1,   542,    -1,  1498,    -1,    12,  1497,    -1,    -1,
     405,    -1,  1499,    -1,  1498,   635,  1499,    -1,    -1,   471,
    1500,  1511,    -1,    -1,   234,  1501,  1511,    -1,    -1,   585,
    1502,  1511,    -1,    -1,   427,  1503,  1511,    -1,   128,    -1,
     587,    -1,   228,    -1,    13,    -1,    96,    -1,   142,    -1,
     168,    -1,   435,    -1,   485,    -1,   407,    -1,   181,    -1,
     203,   373,    -1,   484,   106,    -1,   534,    -1,    96,   545,
     539,    -1,   275,   539,    -1,   443,   489,    -1,   443,    65,
      -1,    96,   603,    -1,   484,   603,    -1,    96,   459,    -1,
      13,   459,    -1,    96,   588,    -1,   165,    -1,   563,    -1,
      96,   540,    -1,    -1,    17,    -1,  1506,  1504,  1505,    -1,
    1506,    -1,   529,   548,    -1,   248,   548,    -1,    63,   548,
      -1,   628,    -1,  1442,   641,   628,    -1,   628,   641,   628,
      -1,  1434,    -1,  1445,    -1,  1508,   635,  1445,    -1,  1510,
      -1,  1509,   635,  1510,    -1,  1445,   221,    47,   548,    -1,
    1445,   221,    47,   391,   548,    -1,  1445,   221,   611,  1444,
      -1,  1445,   221,   611,  1444,    19,  1439,    -1,  1445,    -1,
      -1,   633,  1512,   634,    -1,  1512,   635,  1513,    -1,  1513,
      -1,  1442,    -1,    -1,   444,  1505,    -1,   444,   513,    -1,
     444,   617,    -1,   444,   353,    -1,    -1,   611,  1517,    -1,
      -1,   611,   203,   373,    -1,  1517,  1518,    -1,  1518,    -1,
     203,   373,    -1,   310,  1262,    -1,   314,  1262,    -1,   309,
    1262,    -1,   315,  1262,    -1,    -1,    31,  1520,  1521,    -1,
      -1,   614,    -1,    -1,    17,   357,    56,    -1,    17,    56,
      -1,    -1,   434,    -1,   357,   434,    -1,    -1,   465,    -1,
      77,  1521,  1522,  1523,    -1,   457,  1521,  1522,  1523,    -1,
     457,  1521,   559,  1524,  1442,    -1,   465,  1442,    -1,   434,
     465,  1442,    -1,    -1,  1530,    -1,    -1,   579,  1537,  1531,
    1125,    -1,    -1,  1530,    -1,  1534,    -1,    -1,  1534,    -1,
      -1,  1535,  1536,    -1,  1252,  1256,    -1,  1258,    -1,    -1,
     138,    -1,    12,    -1,   471,  1208,    -1,   633,  1127,   634,
      -1,  1538,  1533,    -1,    -1,  1539,   579,  1537,  1540,  1538,
    1533,    -1,  1542,  1539,  1543,    -1,    -1,    -1,    -1,  1545,
      -1,  1545,  1546,    -1,  1546,    -1,   525,    -1,   213,    -1,
     138,    -1,   510,    -1,   505,    -1,   506,    -1,   508,    -1,
      12,    -1,  1552,  1548,    -1,  1551,  1549,    -1,  1553,  1550,
    1557,    -1,  1557,    -1,  1569,    -1,  1580,    -1,  1574,    -1,
     680,    -1,  1557,    -1,  1569,    -1,  1580,    -1,  1574,    -1,
    1573,    -1,   680,    -1,  1551,    -1,  1552,    -1,    -1,   125,
     158,  1445,    -1,  1554,    -1,  1554,  1555,    -1,  1555,    -1,
     378,   442,    -1,    11,   158,   572,    -1,    11,   158,   322,
      -1,    11,   158,   546,    -1,    -1,   511,   470,   125,    -1,
     511,   470,   240,    -1,    -1,  1556,   603,  1434,  1558,  1559,
      19,  1561,    -1,    -1,   633,  1560,   634,    -1,  1442,    -1,
    1560,   635,  1442,    -1,    -1,  1562,  1563,  1568,    -1,    -1,
    1566,  1564,  1529,    -1,   633,  1565,   634,  1532,    -1,  1566,
      -1,   633,  1565,   634,    -1,    -1,   471,  1567,  1130,    -1,
      -1,   611,    62,   373,    -1,   611,    52,    62,   373,    -1,
     611,   272,    62,   373,    -1,    -1,    -1,    -1,   563,  1141,
     694,   800,   801,   367,  1141,  1570,  1434,   189,  1141,  1571,
     147,   462,  1572,   749,    -1,    10,  1141,   195,  1442,   452,
     921,   494,  1439,    -1,  1141,   195,  1442,   452,   921,   494,
    1439,    -1,    -1,    -1,    -1,    -1,    -1,  1141,   195,   694,
     633,  1575,   705,   634,  1576,   452,  1577,   956,  1578,   696,
    1579,   749,    -1,    -1,    -1,    -1,    -1,   406,  1141,   694,
    1581,   633,  1582,   709,   634,  1583,   696,  1584,   749,    -1,
     618,  1587,  1586,  1588,    -1,   618,   152,  1586,  1590,    -1,
     618,   401,  1586,    -1,   618,    77,  1586,  1589,    -1,   618,
     457,  1586,    -1,   618,   423,    -1,  1421,    -1,  1421,   635,
    1421,    -1,  1421,   635,  1421,   635,  1262,    -1,    31,    -1,
     516,    -1,    -1,   250,    -1,   450,    -1,    -1,   368,   392,
      -1,    -1,    -1,   535,  1591,  1592,    -1,    -1,   189,   325,
      -1,   236,   394,  1442,   494,  1439,    -1,   578,   394,  1442,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1936,  1936,  1949,  1948,  1973,  1980,  1982,  1986,  1987,
    1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,
    2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,
    2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,
    2032,  2036,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
    2046,  2047,  2048,  2052,  2062,  2063,  2067,  2077,  2084,  2095,
    2094,  2105,  2107,  2111,  2112,  2116,  2129,  2128,  2148,  2147,
    2165,  2166,  2170,  2174,  2178,  2182,  2186,  2190,  2194,  2199,
    2209,  2214,  2218,  2222,  2226,  2230,  2234,  2239,  2243,  2248,
    2279,  2284,  2291,  2294,  2296,  2297,  2301,  2315,  2319,  2335,
    2339,  2352,  2351,  2396,  2401,  2395,  2408,  2413,  2406,  2420,
    2425,  2418,  2431,  2430,  2443,  2442,  2450,  2454,  2458,  2462,
    2469,  2482,  2483,  2487,  2491,  2495,  2499,  2503,  2507,  2511,
    2519,  2518,  2550,  2549,  2556,  2563,  2564,  2570,  2576,  2586,
    2592,  2598,  2600,  2607,  2608,  2612,  2618,  2627,  2628,  2636,
    2636,  2691,  2692,  2693,  2694,  2695,  2696,  2697,  2698,  2699,
    2700,  2701,  2702,  2703,  2708,  2722,  2736,  2755,  2756,  2760,
    2761,  2766,  2768,  2770,  2772,  2774,  2776,  2778,  2784,  2785,
    2786,  2790,  2794,  2802,  2801,  2814,  2816,  2819,  2821,  2825,
    2829,  2836,  2838,  2842,  2843,  2848,  2867,  2897,  2899,  2903,
    2904,  2908,  2937,  2938,  2939,  2940,  2944,  2945,  2949,  2950,
    2955,  2958,  2985,  2984,  3068,  3085,  3084,  3159,  3158,  3231,
    3232,  3237,  3239,  3244,  3267,  3278,  3282,  3304,  3305,  3309,
    3313,  3326,  3332,  3338,  3347,  3362,  3388,  3394,  3395,  3401,
    3404,  3408,  3416,  3436,  3438,  3456,  3462,  3464,  3466,  3468,
    3470,  3472,  3474,  3476,  3478,  3480,  3482,  3484,  3489,  3505,
    3521,  3522,  3527,  3533,  3542,  3548,  3557,  3565,  3594,  3603,
    3605,  3614,  3619,  3625,  3634,  3642,  3644,  3646,  3648,  3650,
    3652,  3654,  3656,  3658,  3660,  3662,  3664,  3666,  3671,  3691,
    3715,  3717,  3716,  3723,  3724,  3725,  3726,  3727,  3728,  3729,
    3730,  3731,  3732,  3733,  3734,  3735,  3740,  3739,  3750,  3750,
    3807,  3806,  3863,  3863,  3885,  3944,  3994,  4019,  4018,  4044,
    4067,  4069,  4070,  4074,  4092,  4113,  4122,  4158,  4113,  4187,
    4189,  4190,  4194,  4195,  4200,  4211,  4199,  4262,  4261,  4275,
    4276,  4280,  4281,  4286,  4295,  4285,  4344,  4353,  4343,  4397,
    4410,  4415,  4414,  4452,  4453,  4458,  4457,  4491,  4491,  4510,
    4509,  4559,  4576,  4585,  4575,  4639,  4648,  4638,  4688,  4690,
    4695,  4697,  4699,  4716,  4721,  4727,  4734,  4735,  4743,  4749,
    4758,  4764,  4770,  4771,  4775,  4775,  4780,  4781,  4782,  4786,
    4787,  4788,  4791,  4793,  4797,  4798,  4799,  4803,  4804,  4805,
    4806,  4807,  4808,  4809,  4810,  4813,  4815,  4819,  4820,  4821,
    4825,  4826,  4827,  4828,  4829,  4832,  4834,  4838,  4839,  4840,
    4844,  4845,  4846,  4847,  4848,  4849,  4850,  4853,  4855,  4859,
    4860,  4861,  4865,  4866,  4867,  4872,  4880,  4888,  4896,  4908,
    4920,  4925,  4930,  4938,  4946,  4954,  4962,  4970,  4978,  4986,
    4999,  5012,  5026,  5031,  5044,  5045,  5096,  5097,  5100,  5115,
    5133,  5138,  5136,  5143,  5145,  5144,  5148,  5147,  5153,  5190,
    5191,  5196,  5195,  5214,  5233,  5232,  5249,  5253,  5261,  5260,
    5263,  5265,  5267,  5269,  5274,  5275,  5280,  5281,  5285,  5286,
    5290,  5309,  5319,  5330,  5339,  5340,  5356,  5358,  5357,  5362,
    5360,  5371,  5372,  5376,  5394,  5410,  5411,  5427,  5442,  5464,
    5465,  5470,  5469,  5493,  5503,  5525,  5524,  5542,  5541,  5561,
    5583,  5587,  5616,  5628,  5629,  5634,  5645,  5633,  5670,  5671,
    5675,  5688,  5709,  5722,  5748,  5749,  5754,  5753,  5790,  5795,
    5796,  5800,  5801,  5805,  5807,  5813,  5815,  5817,  5819,  5821,
    5823,  5833,  5848,  5832,  5862,  5863,  5867,  5868,  5872,  5873,
    5877,  5878,  5882,  5883,  5887,  5888,  5892,  5896,  5897,  5900,
    5902,  5906,  5907,  5911,  5912,  5913,  5917,  5922,  5927,  5932,
    5937,  5942,  5947,  5952,  5967,  5973,  5988,  5993,  6008,  6014,
    6032,  6037,  6042,  6047,  6052,  6058,  6057,  6083,  6084,  6085,
    6090,  6095,  6100,  6102,  6104,  6106,  6112,  6120,  6138,  6155,
    6181,  6199,  6200,  6201,  6202,  6203,  6204,  6208,  6209,  6210,
    6214,  6215,  6219,  6220,  6221,  6222,  6227,  6234,  6235,  6239,
    6240,  6244,  6245,  6252,  6257,  6263,  6269,  6275,  6294,  6300,
    6302,  6306,  6310,  6311,  6315,  6320,  6319,  6342,  6343,  6344,
    6345,  6350,  6354,  6359,  6364,  6368,  6373,  6378,  6384,  6389,
    6395,  6399,  6404,  6409,  6427,  6429,  6431,  6447,  6449,  6454,
    6459,  6471,  6476,  6481,  6486,  6488,  6490,  6492,  6494,  6496,
    6498,  6500,  6503,  6502,  6507,  6506,  6510,  6512,  6521,  6522,
    6523,  6528,  6529,  6530,  6531,  6532,  6536,  6540,  6541,  6545,
    6546,  6550,  6551,  6552,  6553,  6554,  6558,  6559,  6560,  6561,
    6562,  6566,  6571,  6573,  6579,  6580,  6582,  6587,  6597,  6598,
    6602,  6603,  6604,  6612,  6613,  6617,  6618,  6622,  6623,  6624,
    6628,  6629,  6630,  6631,  6634,  6635,  6639,  6640,  6644,  6645,
    6649,  6650,  6654,  6655,  6656,  6657,  6658,  6659,  6665,  6671,
    6677,  6683,  6684,  6697,  6703,  6709,  6715,  6720,  6725,  6734,
    6755,  6763,  6764,  6769,  6770,  6774,  6782,  6786,  6787,  6791,
    6792,  6796,  6805,  6809,  6810,  6814,  6822,  6823,  6827,  6828,
    6832,  6833,  6838,  6839,  6843,  6850,  6859,  6864,  6872,  6873,
    6874,  6875,  6876,  6877,  6882,  6890,  6891,  6896,  6895,  6908,
    6909,  6913,  6916,  6917,  6918,  6919,  6923,  6931,  6938,  6939,
    6943,  6953,  6954,  6958,  6959,  6962,  6964,  6968,  6980,  6981,
    6985,  6992,  7005,  7006,  7008,  7010,  7016,  7021,  7027,  7033,
    7040,  7050,  7051,  7052,  7053,  7054,  7058,  7062,  7063,  7067,
    7068,  7072,  7073,  7077,  7078,  7079,  7083,  7084,  7088,  7092,
    7105,  7117,  7118,  7122,  7123,  7127,  7128,  7132,  7133,  7137,
    7138,  7142,  7143,  7147,  7148,  7152,  7153,  7157,  7159,  7163,
    7164,  7168,  7172,  7173,  7186,  7187,  7188,  7192,  7193,  7197,
    7203,  7217,  7218,  7222,  7223,  7227,  7228,  7236,  7235,  7274,
    7273,  7287,  7299,  7298,  7317,  7316,  7335,  7334,  7353,  7347,
    7367,  7366,  7399,  7404,  7409,  7414,  7419,  7426,  7433,  7438,
    7446,  7447,  7448,  7449,  7453,  7454,  7466,  7467,  7471,  7472,
    7475,  7477,  7485,  7493,  7495,  7497,  7498,  7506,  7507,  7511,
    7520,  7518,  7532,  7546,  7545,  7559,  7557,  7571,  7578,  7589,
    7590,  7618,  7625,  7629,  7634,  7633,  7649,  7651,  7656,  7664,
    7663,  7679,  7683,  7682,  7694,  7695,  7699,  7714,  7715,  7719,
    7728,  7732,  7737,  7743,  7742,  7753,  7762,  7752,  7777,  7786,
    7795,  7804,  7813,  7819,  7825,  7834,  7843,  7871,  7892,  7902,
    7906,  7911,  7912,  7915,  7917,  7918,  7919,  7920,  7923,  7928,
    7939,  7944,  7955,  7956,  7960,  7961,  7965,  7966,  7967,  7971,
    7972,  7977,  7985,  7986,  7987,  7988,  7993,  7992,  8021,  8031,
    8048,  8051,  8058,  8062,  8069,  8073,  8077,  8084,  8089,  8092,
    8099,  8102,  8108,  8111,  8118,  8121,  8129,  8132,  8139,  8143,
    8150,  8154,  8161,  8162,  8187,  8188,  8189,  8194,  8199,  8207,
    8206,  8218,  8219,  8220,  8225,  8224,  8246,  8247,  8251,  8252,
    8256,  8257,  8258,  8263,  8262,  8284,  8293,  8292,  8319,  8320,
    8324,  8325,  8329,  8330,  8331,  8332,  8333,  8334,  8339,  8338,
    8360,  8361,  8362,  8367,  8366,  8372,  8379,  8384,  8392,  8393,
    8397,  8411,  8410,  8423,  8424,  8428,  8429,  8433,  8443,  8453,
    8454,  8459,  8458,  8469,  8470,  8474,  8475,  8479,  8489,  8500,
    8499,  8507,  8507,  8518,  8519,  8524,  8525,  8538,  8549,  8560,
    8562,  8569,  8571,  8573,  8574,  8575,  8589,  8590,  8605,  8606,
    8610,  8615,  8620,  8625,  8630,  8629,  8649,  8657,  8649,  8664,
    8665,  8666,  8667,  8668,  8672,  8679,  8686,  8688,  8699,  8700,
    8704,  8705,  8733,  8763,  8765,  8771,  8781,  8782,  8783,  8798,
    8805,  8830,  8836,  8842,  8843,  8844,  8845,  8846,  8850,  8851,
    8856,  8907,  8914,  8957,  8963,  8969,  8975,  8981,  8987,  8993,
    8999,  9003,  9009,  9015,  9021,  9027,  9033,  9037,  9043,  9053,
    9059,  9067,  9073,  9083,  9089,  9098,  9108,  9114,  9124,  9130,
    9139,  9143,  9149,  9155,  9161,  9167,  9173,  9179,  9185,  9191,
    9197,  9203,  9209,  9215,  9221,  9227,  9231,  9232,  9236,  9237,
    9241,  9242,  9246,  9247,  9251,  9252,  9253,  9254,  9255,  9256,
    9260,  9261,  9265,  9266,  9267,  9268,  9269,  9270,  9282,  9283,
    9284,  9285,  9286,  9292,  9296,  9302,  9308,  9314,  9320,  9322,
    9329,  9336,  9342,  9383,  9392,  9399,  9407,  9413,  9420,  9426,
    9440,  9447,  9463,  9469,  9475,  9483,  9489,  9495,  9501,  9507,
    9522,  9534,  9540,  9546,  9552,  9558,  9564,  9570,  9576,  9582,
    9588,  9594,  9600,  9606,  9612,  9618,  9624,  9630,  9638,  9659,
    9666,  9672,  9679,  9686,  9693,  9700,  9706,  9712,  9717,  9723,
    9730,  9736,  9742,  9748,  9754,  9760,  9778,  9784,  9790,  9797,
    9804,  9819,  9825,  9831,  9837,  9843,  9850,  9856,  9862,  9868,
    9874,  9880,  9886,  9898,  9904,  9910,  9916,  9922,  9930,  9936,
    9948,  9954,  9960,  9968,  9978,  9984, 10000, 10006, 10013, 10020,
   10027, 10034, 10041, 10045, 10065, 10064, 10137, 10177, 10179, 10184,
   10185, 10189, 10190, 10194, 10195, 10199, 10206, 10214, 10239, 10245,
   10251, 10257, 10263, 10269, 10278, 10285, 10287, 10284, 10294, 10305,
   10311, 10317, 10323, 10329, 10335, 10341, 10347, 10353, 10360, 10359,
   10378, 10377, 10392, 10402, 10410, 10426, 10427, 10432, 10437, 10442,
   10445, 10458, 10457, 10474, 10476, 10478, 10480, 10482, 10484, 10486,
   10488, 10490, 10492, 10494, 10499, 10500, 10504, 10511, 10519, 10520,
   10524, 10531, 10539, 10540, 10544, 10545, 10549, 10557, 10568, 10569,
   10578, 10589, 10590, 10596, 10597, 10617, 10619, 10623, 10621, 10638,
   10636, 10654, 10652, 10659, 10668, 10666, 10684, 10683, 10693, 10704,
   10702, 10721, 10720, 10731, 10742, 10743, 10744, 10752, 10753, 10757,
   10772, 10772, 10787, 10827, 10878, 10882, 10887, 10879, 10899, 10919,
   10927, 10919, 10936, 10935, 10958, 10975, 10958, 10982, 10986, 11012,
   11013, 11018, 11021, 11022, 11023, 11027, 11028, 11033, 11032, 11038,
   11037, 11045, 11046, 11049, 11051, 11051, 11055, 11055, 11060, 11061,
   11065, 11067, 11072, 11073, 11077, 11088, 11101, 11102, 11103, 11104,
   11105, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11116, 11117,
   11118, 11119, 11120, 11121, 11122, 11123, 11124, 11128, 11129, 11130,
   11131, 11134, 11136, 11137, 11141, 11142, 11150, 11152, 11156, 11158,
   11157, 11171, 11174, 11173, 11188, 11194, 11209, 11211, 11215, 11217,
   11222, 11223, 11243, 11268, 11272, 11273, 11277, 11290, 11292, 11297,
   11296, 11331, 11333, 11338, 11339, 11340, 11345, 11351, 11355, 11356,
   11360, 11367, 11374, 11381, 11391, 11418, 11422, 11428, 11434, 11444,
   11448, 11458, 11459, 11460, 11461, 11462, 11463, 11467, 11468, 11469,
   11470, 11471, 11475, 11476, 11477, 11478, 11479, 11483, 11484, 11485,
   11486, 11490, 11495, 11496, 11499, 11502, 11501, 11535, 11536, 11540,
   11548, 11561, 11561, 11571, 11572, 11576, 11595, 11635, 11634, 11647,
   11655, 11646, 11657, 11669, 11681, 11680, 11698, 11697, 11708, 11709,
   11708, 11725, 11732, 11753, 11774, 11786, 11791, 11790, 11800, 11806,
   11813, 11818, 11823, 11833, 11834, 11838, 11849, 11862, 11863, 11867,
   11878, 11879, 11883, 11884, 11887, 11889, 11892, 11893, 11894, 11898,
   11899, 11907, 11915, 11906, 11925, 11932, 11924, 11942, 11954, 11955,
   11968, 11972, 11973, 11989, 11990, 11994, 12003, 12004, 12005, 12007,
   12006, 12017, 12018, 12022, 12023, 12025, 12024, 12028, 12027, 12033,
   12034, 12038, 12039, 12043, 12053, 12054, 12058, 12059, 12064, 12063,
   12077, 12078, 12082, 12087, 12095, 12096, 12104, 12106, 12106, 12114,
   12122, 12113, 12144, 12145, 12149, 12157, 12158, 12162, 12172, 12173,
   12180, 12179, 12195, 12194, 12208, 12207, 12219, 12218, 12232, 12233,
   12237, 12250, 12266, 12267, 12271, 12272, 12276, 12277, 12278, 12283,
   12282, 12304, 12306, 12309, 12311, 12314, 12315, 12318, 12322, 12326,
   12330, 12334, 12338, 12342, 12346, 12350, 12358, 12361, 12371, 12370,
   12385, 12392, 12400, 12408, 12416, 12424, 12432, 12439, 12441, 12443,
   12452, 12456, 12461, 12460, 12466, 12465, 12470, 12479, 12486, 12491,
   12496, 12501, 12503, 12505, 12507, 12509, 12517, 12528, 12536, 12538,
   12546, 12553, 12560, 12570, 12577, 12583, 12592, 12600, 12604, 12608,
   12615, 12622, 12628, 12635, 12642, 12647, 12652, 12660, 12662, 12664,
   12669, 12670, 12673, 12675, 12679, 12680, 12684, 12685, 12689, 12690,
   12694, 12695, 12699, 12700, 12703, 12705, 12712, 12726, 12737, 12736,
   12752, 12751, 12758, 12759, 12760, 12761, 12762, 12766, 12767, 12772,
   12776, 12782, 12788, 12810, 12811, 12812, 12827, 12826, 12839, 12848,
   12838, 12850, 12854, 12855, 12867, 12866, 12888, 12889, 12894, 12896,
   12898, 12900, 12902, 12904, 12906, 12908, 12910, 12912, 12914, 12916,
   12918, 12923, 12924, 12929, 12928, 12938, 12939, 12943, 12943, 12945,
   12946, 12950, 12951, 12956, 12955, 12966, 12970, 12974, 12986, 12996,
   12997, 12998, 13004, 13016, 13028, 13038, 13048, 13015, 13056, 13057,
   13061, 13062, 13066, 13067, 13079, 13083, 13084, 13085, 13088, 13090,
   13094, 13095, 13099, 13104, 13111, 13116, 13123, 13125, 13129, 13130,
   13134, 13139, 13147, 13148, 13151, 13153, 13161, 13163, 13167, 13168,
   13169, 13173, 13175, 13180, 13181, 13190, 13191, 13195, 13196, 13200,
   13213, 13237, 13249, 13260, 13279, 13287, 13299, 13314, 13335, 13336,
   13337, 13346, 13347, 13348, 13349, 13356, 13362, 13368, 13374, 13380,
   13409, 13440, 13450, 13460, 13466, 13475, 13487, 13493, 13499, 13515,
   13516, 13520, 13529, 13545, 13549, 13600, 13604, 13622, 13626, 13706,
   13731, 13762, 13763, 13779, 13789, 13793, 13799, 13805, 13815, 13821,
   13830, 13840, 13841, 13871, 13884, 13900, 13916, 13933, 13934, 13945,
   13946, 13957, 13958, 13959, 13963, 13984, 14011, 14026, 14027, 14028,
   14029, 14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038,
   14039, 14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048,
   14049, 14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058,
   14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068,
   14069, 14070, 14071, 14072, 14073, 14074, 14075, 14085, 14086, 14087,
   14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096, 14097,
   14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106, 14107,
   14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117,
   14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127,
   14128, 14129, 14130, 14131, 14136, 14137, 14138, 14139, 14140, 14141,
   14142, 14143, 14144, 14145, 14146, 14147, 14148, 14149, 14150, 14151,
   14152, 14153, 14154, 14155, 14156, 14157, 14158, 14159, 14160, 14161,
   14162, 14163, 14164, 14165, 14166, 14167, 14168, 14169, 14170, 14171,
   14172, 14173, 14174, 14175, 14176, 14177, 14178, 14179, 14180, 14181,
   14182, 14183, 14184, 14185, 14186, 14187, 14188, 14189, 14190, 14191,
   14192, 14193, 14194, 14195, 14196, 14197, 14198, 14199, 14200, 14201,
   14202, 14203, 14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211,
   14212, 14213, 14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221,
   14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231,
   14232, 14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241,
   14242, 14243, 14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251,
   14252, 14253, 14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261,
   14262, 14263, 14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271,
   14272, 14273, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281,
   14282, 14283, 14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291,
   14292, 14293, 14294, 14295, 14296, 14297, 14298, 14299, 14300, 14301,
   14302, 14303, 14304, 14305, 14306, 14307, 14308, 14309, 14310, 14311,
   14312, 14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321,
   14322, 14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331,
   14332, 14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341,
   14342, 14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351,
   14352, 14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361,
   14362, 14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371,
   14372, 14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381,
   14382, 14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391,
   14403, 14402, 14422, 14421, 14428, 14427, 14437, 14436, 14447, 14446,
   14452, 14460, 14462, 14467, 14467, 14476, 14475, 14489, 14488, 14493,
   14497, 14498, 14499, 14503, 14504, 14505, 14506, 14510, 14511, 14512,
   14513, 14518, 14544, 14543, 14643, 14654, 14667, 14683, 14696, 14718,
   14752, 14771, 14799, 14845, 14859, 14860, 14861, 14862, 14866, 14884,
   14902, 14903, 14907, 14908, 14909, 14910, 14914, 14915, 14932, 14944,
   14945, 14946, 14952, 14958, 14970, 14969, 14985, 14986, 14990, 14991,
   14995, 15008, 15009, 15010, 15015, 15020, 15019, 15039, 15055, 15072,
   15071, 15110, 15111, 15115, 15116, 15120, 15121, 15122, 15123, 15125,
   15124, 15138, 15139, 15140, 15141, 15142, 15148, 15153, 15159, 15170,
   15181, 15185, 15195, 15200, 15207, 15219, 15231, 15240, 15242, 15246,
   15247, 15254, 15256, 15260, 15261, 15266, 15265, 15269, 15268, 15272,
   15271, 15275, 15274, 15277, 15278, 15279, 15280, 15281, 15282, 15283,
   15284, 15285, 15286, 15287, 15288, 15289, 15290, 15291, 15292, 15293,
   15294, 15295, 15296, 15297, 15298, 15299, 15300, 15301, 15302, 15306,
   15307, 15311, 15312, 15316, 15326, 15336, 15349, 15364, 15377, 15390,
   15402, 15407, 15415, 15420, 15428, 15442, 15453, 15462, 15472, 15481,
   15485, 15489, 15490, 15494, 15521, 15523, 15527, 15531, 15535, 15542,
   15543, 15547, 15548, 15552, 15553, 15557, 15558, 15564, 15570, 15576,
   15586, 15585, 15595, 15596, 15601, 15602, 15603, 15608, 15609, 15610,
   15614, 15615, 15619, 15631, 15640, 15650, 15659, 15673, 15674, 15679,
   15678, 15694, 15695, 15696, 15699, 15701, 15705, 15705, 15729, 15730,
   15734, 15735, 15736, 15740, 15744, 15751, 15754, 15752, 15768, 15775,
   15796, 15813, 15815, 15819, 15820, 15824, 15825, 15833, 15834, 15835,
   15836, 15842, 15848, 15858, 15860, 15862, 15867, 15868, 15869, 15870,
   15871, 15875, 15876, 15877, 15878, 15879, 15880, 15890, 15891, 15896,
   15909, 15922, 15924, 15926, 15931, 15936, 15938, 15940, 15946, 15947,
   15949, 15955, 15954, 15972, 15973, 15977, 15982, 15990, 15990, 16016,
   16015, 16032, 16036, 16041, 16046, 16045, 16057, 16058, 16060, 16062,
   16080, 16086, 16091, 16073, 16154, 16172, 16197, 16229, 16234, 16242,
   16265, 16193, 16331, 16351, 16364, 16374, 16330, 16395, 16399, 16403,
   16407, 16411, 16415, 16422, 16429, 16436, 16446, 16447, 16451, 16452,
   16453, 16457, 16458, 16463, 16465, 16464, 16470, 16471, 16475, 16485
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE",
  "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_SYM", "CURRENT_USER",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DBXP_SELECT_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFAULT_AUTH_SYM", "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS",
  "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM",
  "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM",
  "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT",
  "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM",
  "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM",
  "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM", "MASTER_BIND_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "$@5", "$@6", "$@7",
  "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "$@20", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "$@21", "sp_proc_stmt", "sp_proc_stmt_if", "$@22",
  "sp_proc_stmt_statement", "$@23", "sp_proc_stmt_return", "$@24",
  "sp_proc_stmt_unlabeled", "$@25", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@26", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@27", "$@28", "$@29", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@30", "$@31", "searched_case_stmt", "$@32",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@33", "$@34", "searched_when_clause", "$@35",
  "$@36", "else_clause_opt", "sp_labeled_control", "$@37", "sp_opt_label",
  "sp_labeled_block", "$@38", "sp_unlabeled_block", "$@39",
  "sp_block_content", "$@40", "sp_unlabeled_control", "$@41", "$@42",
  "$@43", "$@44", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@46",
  "create3", "$@47", "$@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@49", "have_partitioning", "partition_entry", "$@50",
  "partition", "part_type_def", "$@51", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@52",
  "$@53", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@54", "part_name", "opt_part_values", "$@55", "$@56", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@57", "$@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@60", "$@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@63", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "$@73", "alter_user_list", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@74", "$@75", "$@76", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@77",
  "add_part_extra", "reorg_partition_rule", "$@78", "reorg_parts_rule",
  "$@79", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "$@80", "$@81", "$@82",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@83", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "$@84", "opt_checksum_type", "repair",
  "$@85", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@86", "binlog_base64_event", "check", "$@87",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@88", "opt_no_write_to_binlog", "rename", "$@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@92", "cache_keys_spec", "$@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "dbxp_select", "select",
  "DBXP_select_options", "DBXP_select_from", "DBXP_select_item_list",
  "DBXP_where_clause", "select_init", "select_paren",
  "select_paren_derived", "select_init2", "$@94", "select_part2", "$@95",
  "$@96", "select_into", "select_from", "select_options",
  "select_option_list", "select_option", "select_lock_type",
  "select_item_list", "select_item", "remember_name", "remember_end",
  "select_alias", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "simple_expr", "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@97", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@98", "$@99", "$@100", "variable", "$@101", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "in_sum_expr", "$@102", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@103", "$@104", "$@105", "$@106", "$@107", "$@108",
  "$@109", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@110", "select_derived_union", "$@111", "$@112",
  "select_init2_derived", "select_part2_derived", "$@113", "$@114",
  "select_derived", "$@115", "select_derived2", "$@116", "$@117",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@118",
  "$@119", "index_hints_list", "opt_index_hints_list", "$@120",
  "opt_key_definition", "$@121", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@122", "having_clause", "$@123", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@124", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@125",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@126", "select_var_list", "select_var_ident",
  "into", "$@127", "into_destination", "$@128", "$@129", "do", "$@130",
  "drop", "$@131", "$@132", "$@133", "$@134", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@135", "$@136",
  "replace", "$@137", "$@138", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@139", "fields",
  "insert_values", "$@140", "$@141", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@142",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@143",
  "update", "$@144", "$@145", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@146", "single_multi", "$@147", "$@148", "$@149", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@150", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@151", "show_param",
  "$@152", "$@153", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@154", "$@155", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@156", "flush_options", "$@157", "$@158", "opt_flush_lock",
  "$@159", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@160", "reset_options", "reset_option", "$@161", "slave_reset_options",
  "purge", "$@162", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "$@163", "$@164", "$@165", "$@166", "data_or_xml",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_xml_rows_identified_by", "opt_ignore_lines",
  "lines_or_rows", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "load_data_set_list",
  "load_data_set_elem", "text_literal", "text_string", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys_nonewline", "TEXT_STRING_sys", "TEXT_STRING_literal",
  "TEXT_STRING_filesystem", "ident", "label_ident", "ident_or_text",
  "user", "keyword", "keyword_sp", "set", "$@167",
  "start_option_value_list", "$@168", "$@169", "$@170",
  "start_option_value_list_following_option_type", "$@171",
  "option_value_list_continued", "option_value_list", "$@172", "$@173",
  "option_value", "$@174", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@175", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@176",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@177", "handler", "$@178", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@179",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@180", "$@181", "$@182",
  "$@183", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "opt_grant_option", "grant_option_list", "grant_option",
  "begin", "$@184", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@185", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@186",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@187", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@188",
  "view_list_opt", "view_list", "view_select", "$@189", "view_select_aux",
  "$@190", "create_view_select_paren", "create_view_select", "$@191",
  "view_check_option", "trigger_tail", "$@192", "$@193", "$@194",
  "udf_tail", "sf_tail", "$@195", "$@196", "$@197", "$@198", "$@199",
  "sp_tail", "$@200", "$@201", "$@202", "$@203", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@204", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   124,    38,    45,    43,    42,    47,
      37,    94,   126,    40,    41,    44,    33,   123,   125,    59,
      64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   643,   644,   645,   644,   644,   646,   646,   647,   647,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   649,   650,   650,   651,   652,   652,   654,
     653,   655,   655,   656,   656,   657,   659,   658,   661,   660,
     662,   662,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   664,   664,   664,   665,   666,   666,   666,
     666,   668,   667,   669,   670,   667,   671,   672,   667,   673,
     674,   667,   675,   667,   676,   667,   667,   667,   667,   667,
     677,   678,   678,   679,   679,   679,   679,   679,   679,   679,
     681,   680,   683,   682,   682,   684,   684,   684,   684,   685,
     685,   686,   686,   687,   687,   688,   688,   689,   689,   691,
     690,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   693,   694,   694,   695,   695,   696,
     696,   697,   697,   697,   697,   697,   697,   697,   698,   698,
     698,   699,   699,   701,   700,   702,   702,   703,   703,   704,
     704,   705,   705,   706,   706,   707,   708,   709,   709,   710,
     710,   711,   712,   712,   712,   712,   713,   713,   714,   714,
     715,   715,   717,   716,   716,   718,   716,   719,   716,   720,
     720,   721,   721,   722,   723,   723,   724,   725,   725,   726,
     726,   726,   726,   726,   727,   728,   728,   729,   729,   730,
     730,   731,   731,   732,   732,   732,   733,   733,   733,   733,
     733,   733,   733,   733,   733,   733,   733,   733,   734,   735,
     736,   736,   737,   737,   738,   738,   739,   740,   740,   741,
     741,   742,   743,   743,   744,   745,   745,   745,   745,   745,
     745,   745,   745,   745,   745,   745,   745,   745,   746,   746,
     747,   748,   747,   749,   749,   749,   749,   749,   749,   749,
     749,   749,   749,   749,   749,   749,   751,   750,   753,   752,
     755,   754,   757,   756,   758,   759,   760,   762,   761,   763,
     764,   764,   764,   765,   765,   767,   768,   769,   766,   770,
     770,   770,   771,   771,   773,   774,   772,   776,   775,   777,
     777,   778,   778,   780,   781,   779,   783,   784,   782,   785,
     785,   787,   786,   788,   788,   790,   789,   792,   791,   794,
     793,   795,   796,   797,   795,   798,   799,   795,   800,   800,
     801,   801,   801,   802,   803,   804,   805,   805,   806,   806,
     807,   808,   809,   809,   811,   810,   812,   812,   812,   813,
     813,   813,   814,   814,   815,   815,   815,   816,   816,   816,
     816,   816,   816,   816,   816,   817,   817,   818,   818,   818,
     819,   819,   819,   819,   819,   820,   820,   821,   821,   821,
     822,   822,   822,   822,   822,   822,   822,   823,   823,   824,
     824,   824,   825,   825,   825,   826,   827,   828,   829,   830,
     831,   831,   831,   832,   833,   834,   835,   836,   837,   838,
     839,   840,   841,   841,   842,   842,   843,   843,   843,   843,
     844,   845,   844,   846,   847,   846,   848,   846,   849,   850,
     850,   852,   851,   853,   855,   854,   856,   857,   858,   857,
     857,   857,   857,   857,   859,   859,   860,   860,   861,   861,
     862,   863,   864,   865,   866,   866,   867,   868,   867,   869,
     867,   870,   870,   871,   872,   873,   873,   874,   874,   875,
     875,   877,   876,   878,   879,   880,   879,   881,   879,   882,
     882,   883,   883,   884,   884,   886,   887,   885,   888,   888,
     889,   889,   890,   890,   891,   891,   893,   892,   894,   895,
     895,   896,   896,   897,   897,   897,   897,   897,   897,   897,
     897,   899,   900,   898,   901,   901,   902,   902,   903,   903,
     904,   904,   905,   905,   906,   906,   907,   908,   908,   909,
     909,   910,   910,   911,   911,   911,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   913,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   914,   915,   916,
     917,   918,   918,   918,   918,   918,   918,   919,   919,   919,
     920,   920,   921,   921,   921,   921,   922,   923,   923,   924,
     924,   925,   925,   926,   926,   926,   926,   926,   926,   927,
     927,   928,   929,   929,   930,   932,   931,   933,   933,   933,
     933,   933,   933,   933,   933,   933,   933,   933,   933,   933,
     933,   933,   933,   933,   933,   933,   933,   933,   933,   933,
     933,   933,   933,   933,   933,   933,   933,   933,   933,   933,
     933,   933,   934,   933,   935,   933,   933,   933,   936,   936,
     936,   936,   936,   936,   936,   936,   937,   938,   938,   939,
     939,   940,   940,   940,   940,   940,   941,   941,   941,   941,
     941,   942,   942,   942,   943,   943,   943,   944,   945,   945,
     946,   946,   946,   947,   947,   948,   948,   949,   949,   949,
     950,   950,   950,   950,   951,   951,   952,   952,   953,   953,
     954,   954,   955,   955,   955,   955,   955,   955,   955,   955,
     955,   955,   955,   955,   955,   955,   955,   955,   955,   956,
     957,   958,   958,   959,   959,   960,   960,   961,   961,   962,
     962,   963,   963,   964,   964,   965,   966,   966,   967,   967,
     968,   968,   969,   969,   969,   970,   970,   970,   971,   971,
     971,   971,   971,   971,   971,   972,   972,   974,   973,   975,
     975,   976,   977,   977,   977,   977,   978,   979,   980,   980,
     981,   982,   982,   983,   983,   984,   984,   985,   986,   986,
     987,   987,   988,   988,   988,   988,   989,   989,   989,   989,
     989,   990,   990,   990,   990,   990,   991,   992,   992,   993,
     993,   994,   994,   995,   995,   995,   996,   996,   997,   998,
     999,  1000,  1000,  1001,  1001,  1002,  1002,  1003,  1003,  1004,
    1004,  1005,  1005,  1006,  1006,  1007,  1007,  1008,  1008,  1009,
    1009,  1010,  1011,  1011,  1012,  1012,  1012,  1013,  1013,  1014,
    1014,  1015,  1015,  1016,  1016,  1017,  1017,  1019,  1018,  1020,
    1018,  1018,  1021,  1018,  1022,  1018,  1023,  1018,  1024,  1018,
    1025,  1018,  1018,  1018,  1018,  1018,  1018,  1018,  1026,  1026,
    1027,  1027,  1027,  1027,  1028,  1028,  1029,  1029,  1030,  1030,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1032,  1031,  1031,  1033,  1031,  1034,  1031,  1031,  1031,  1031,
    1031,  1035,  1036,  1036,  1038,  1037,  1039,  1039,  1039,  1041,
    1040,  1042,  1043,  1042,  1044,  1044,  1045,  1046,  1046,  1047,
    1048,  1048,  1048,  1049,  1048,  1050,  1051,  1048,  1048,  1048,
    1048,  1048,  1048,  1048,  1048,  1048,  1048,  1048,  1048,  1048,
    1048,  1048,  1048,  1052,  1052,  1052,  1052,  1052,  1053,  1053,
    1054,  1054,  1055,  1055,  1056,  1056,  1057,  1057,  1057,  1058,
    1058,  1058,  1059,  1059,  1059,  1059,  1061,  1060,  1060,  1062,
    1063,  1063,  1064,  1064,  1065,  1065,  1065,  1066,  1067,  1067,
    1068,  1068,  1069,  1069,  1070,  1070,  1071,  1071,  1072,  1072,
    1073,  1073,  1074,  1074,  1075,  1075,  1075,  1075,  1075,  1077,
    1076,  1078,  1078,  1078,  1080,  1079,  1081,  1081,  1082,  1082,
    1083,  1083,  1083,  1085,  1084,  1086,  1088,  1087,  1089,  1089,
    1090,  1090,  1091,  1091,  1091,  1091,  1091,  1091,  1093,  1092,
    1094,  1094,  1094,  1096,  1095,  1095,  1097,  1097,  1098,  1098,
    1099,  1101,  1100,  1102,  1102,  1103,  1103,  1104,  1105,  1106,
    1106,  1108,  1107,  1109,  1109,  1110,  1110,  1111,  1112,  1114,
    1113,  1116,  1115,  1117,  1117,  1118,  1118,  1119,  1120,  1121,
    1121,  1122,  1123,  1123,  1123,  1123,  1124,  1124,  1125,  1125,
    1126,  1126,  1127,  1127,  1129,  1128,  1131,  1132,  1130,  1133,
    1133,  1133,  1133,  1133,  1134,  1134,  1135,  1135,  1136,  1136,
    1137,  1137,  1137,  1138,  1138,  1138,  1139,  1139,  1139,  1140,
    1140,  1141,  1142,  1143,  1143,  1143,  1143,  1143,  1144,  1144,
    1145,  1145,  1145,  1145,  1145,  1145,  1145,  1145,  1145,  1145,
    1145,  1146,  1146,  1146,  1146,  1146,  1146,  1147,  1147,  1147,
    1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,
    1147,  1148,  1148,  1148,  1148,  1148,  1148,  1148,  1148,  1148,
    1148,  1148,  1148,  1148,  1148,  1148,  1149,  1149,  1150,  1150,
    1151,  1151,  1152,  1152,  1153,  1153,  1153,  1153,  1153,  1153,
    1154,  1154,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,
    1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,
    1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1157,
    1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,
    1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,
    1157,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1158,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1161,  1160,  1160,  1162,  1162,  1163,
    1163,  1164,  1164,  1165,  1165,  1166,  1166,  1167,  1168,  1168,
    1168,  1168,  1168,  1168,  1168,  1169,  1170,  1168,  1168,  1168,
    1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,  1171,  1168,
    1173,  1172,  1174,  1174,  1174,  1175,  1175,  1176,  1176,  1177,
    1177,  1179,  1178,  1180,  1180,  1180,  1180,  1180,  1180,  1180,
    1180,  1180,  1180,  1180,  1181,  1181,  1182,  1182,  1183,  1183,
    1184,  1184,  1185,  1185,  1186,  1186,  1187,  1187,  1188,  1188,
    1189,  1190,  1190,  1191,  1191,  1192,  1192,  1193,  1192,  1194,
    1192,  1195,  1192,  1192,  1196,  1192,  1197,  1192,  1192,  1198,
    1192,  1199,  1192,  1192,  1200,  1200,  1200,  1201,  1201,  1202,
    1204,  1203,  1203,  1203,  1205,  1206,  1207,  1205,  1208,  1210,
    1211,  1209,  1213,  1212,  1215,  1216,  1214,  1217,  1218,  1219,
    1219,  1220,  1220,  1220,  1220,  1221,  1221,  1223,  1222,  1224,
    1222,  1225,  1225,  1226,  1227,  1226,  1229,  1228,  1230,  1230,
    1231,  1231,  1232,  1232,  1233,  1233,  1234,  1234,  1234,  1234,
    1234,  1234,  1234,  1234,  1234,  1234,  1234,  1234,  1235,  1235,
    1235,  1235,  1235,  1235,  1235,  1235,  1235,  1236,  1236,  1236,
    1236,  1237,  1237,  1237,  1238,  1238,  1239,  1239,  1240,  1241,
    1240,  1242,  1243,  1242,  1244,  1244,  1245,  1245,  1246,  1246,
    1247,  1247,  1247,  1248,  1249,  1249,  1250,  1251,  1251,  1253,
    1252,  1254,  1254,  1255,  1255,  1255,  1256,  1256,  1257,  1257,
    1258,  1259,  1259,  1259,  1260,  1260,  1260,  1260,  1260,  1261,
    1261,  1262,  1262,  1262,  1262,  1262,  1262,  1263,  1263,  1263,
    1263,  1263,  1264,  1264,  1264,  1264,  1264,  1265,  1265,  1265,
    1265,  1266,  1267,  1267,  1268,  1269,  1268,  1270,  1270,  1270,
    1271,  1273,  1272,  1274,  1274,  1275,  1275,  1277,  1276,  1279,
    1280,  1278,  1278,  1278,  1282,  1281,  1284,  1283,  1285,  1286,
    1283,  1283,  1283,  1283,  1283,  1283,  1287,  1283,  1283,  1283,
    1283,  1283,  1283,  1288,  1288,  1289,  1290,  1291,  1291,  1292,
    1293,  1293,  1294,  1294,  1295,  1295,  1296,  1296,  1296,  1297,
    1297,  1299,  1300,  1298,  1302,  1303,  1301,  1304,  1304,  1304,
    1304,  1305,  1305,  1306,  1306,  1307,  1308,  1308,  1308,  1309,
    1308,  1310,  1310,  1311,  1311,  1312,  1311,  1313,  1311,  1314,
    1314,  1315,  1315,  1316,  1317,  1317,  1318,  1318,  1320,  1319,
    1321,  1321,  1322,  1322,  1323,  1323,  1324,  1325,  1324,  1327,
    1328,  1326,  1329,  1329,  1330,  1331,  1331,  1332,  1333,  1333,
    1335,  1334,  1337,  1336,  1338,  1336,  1339,  1336,  1340,  1340,
    1341,  1341,  1342,  1342,  1343,  1343,  1344,  1344,  1344,  1346,
    1345,  1347,  1347,  1348,  1348,  1349,  1349,  1350,  1350,  1350,
    1350,  1350,  1350,  1350,  1350,  1350,  1351,  1351,  1353,  1352,
    1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,
    1354,  1354,  1355,  1354,  1356,  1354,  1354,  1354,  1354,  1354,
    1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,
    1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,  1354,
    1354,  1354,  1354,  1354,  1354,  1354,  1354,  1357,  1357,  1357,
    1358,  1358,  1359,  1359,  1360,  1360,  1361,  1361,  1362,  1362,
    1363,  1363,  1364,  1364,  1365,  1365,  1365,  1366,  1367,  1366,
    1368,  1366,  1369,  1369,  1369,  1369,  1369,  1370,  1370,  1371,
    1371,  1371,  1371,  1372,  1372,  1372,  1374,  1373,  1376,  1377,
    1375,  1375,  1378,  1378,  1379,  1378,  1380,  1380,  1381,  1381,
    1381,  1381,  1381,  1381,  1381,  1381,  1381,  1381,  1381,  1381,
    1381,  1382,  1382,  1384,  1383,  1385,  1385,  1387,  1386,  1386,
    1386,  1388,  1388,  1390,  1389,  1391,  1392,  1392,  1393,  1394,
    1394,  1394,  1395,  1397,  1398,  1399,  1400,  1396,  1401,  1401,
    1402,  1402,  1403,  1403,  1403,  1404,  1404,  1404,  1405,  1405,
    1406,  1406,  1407,  1407,  1407,  1407,  1408,  1408,  1409,  1409,
    1410,  1410,  1411,  1411,  1412,  1412,  1413,  1413,  1414,  1414,
    1414,  1415,  1415,  1416,  1416,  1417,  1417,  1418,  1418,  1419,
    1420,  1420,  1420,  1420,  1421,  1421,  1421,  1422,  1423,  1423,
    1423,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
    1424,  1425,  1425,  1425,  1425,  1425,  1426,  1426,  1426,  1427,
    1427,  1428,  1428,  1429,  1430,  1430,  1431,  1431,  1432,  1432,
    1432,  1433,  1433,  1433,  1433,  1434,  1434,  1434,  1435,  1435,
    1436,  1437,  1437,  1438,  1439,  1440,  1441,  1442,  1442,  1443,
    1443,  1444,  1444,  1444,  1445,  1445,  1445,  1446,  1446,  1446,
    1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1446,  1446,  1446,  1446,  1446,  1446,  1446,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1449,  1448,  1451,  1450,  1452,  1450,  1453,  1450,  1455,  1454,
    1454,  1456,  1456,  1458,  1457,  1459,  1457,  1461,  1460,  1460,
    1462,  1462,  1462,  1463,  1463,  1463,  1463,  1464,  1464,  1464,
    1464,  1465,  1467,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1466,  1468,  1468,  1468,  1469,  1469,  1469,  1469,  1470,  1471,
    1472,  1472,  1473,  1473,  1473,  1473,  1474,  1474,  1474,  1475,
    1475,  1475,  1475,  1475,  1477,  1476,  1478,  1478,  1479,  1479,
    1480,  1481,  1481,  1481,  1481,  1483,  1482,  1484,  1484,  1485,
    1484,  1486,  1486,  1487,  1487,  1488,  1488,  1488,  1488,  1489,
    1488,  1490,  1490,  1490,  1490,  1490,  1491,  1492,  1492,  1492,
    1492,  1492,  1493,  1494,  1494,  1494,  1494,  1495,  1495,  1496,
    1496,  1497,  1497,  1498,  1498,  1500,  1499,  1501,  1499,  1502,
    1499,  1503,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,
    1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,
    1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1504,
    1504,  1505,  1505,  1506,  1506,  1506,  1507,  1507,  1507,  1507,
    1508,  1508,  1509,  1509,  1510,  1510,  1510,  1510,  1510,  1511,
    1511,  1512,  1512,  1513,  1514,  1514,  1514,  1514,  1514,  1515,
    1515,  1516,  1516,  1517,  1517,  1518,  1518,  1518,  1518,  1518,
    1520,  1519,  1521,  1521,  1522,  1522,  1522,  1523,  1523,  1523,
    1524,  1524,  1525,  1526,  1526,  1527,  1528,  1529,  1529,  1531,
    1530,  1532,  1532,  1532,  1533,  1533,  1535,  1534,  1536,  1536,
    1537,  1537,  1537,  1538,  1538,  1539,  1540,  1539,  1541,  1542,
    1543,  1544,  1544,  1545,  1545,  1546,  1546,  1546,  1546,  1546,
    1546,  1546,  1546,  1547,  1547,  1547,  1548,  1548,  1548,  1548,
    1548,  1549,  1549,  1549,  1549,  1549,  1549,  1550,  1550,  1551,
    1552,  1553,  1553,  1553,  1554,  1555,  1555,  1555,  1556,  1556,
    1556,  1558,  1557,  1559,  1559,  1560,  1560,  1562,  1561,  1564,
    1563,  1563,  1565,  1565,  1567,  1566,  1568,  1568,  1568,  1568,
    1570,  1571,  1572,  1569,  1573,  1573,  1575,  1576,  1577,  1578,
    1579,  1574,  1581,  1582,  1583,  1584,  1580,  1585,  1585,  1585,
    1585,  1585,  1585,  1586,  1586,  1586,  1587,  1587,  1588,  1588,
    1588,  1589,  1589,  1590,  1591,  1590,  1592,  1592,  1593,  1594
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     3,     1,     0,     1,     3,     1,     3,     3,     3,
       3,     0,     7,     0,     0,    14,     0,     0,    14,     0,
       0,    14,     0,     6,     0,     3,     4,     4,     3,     2,
      10,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    13,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     3,     4,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     1,     0,     2,     0,
       2,     2,     2,     2,     2,     3,     3,     1,     1,     1,
       2,     3,     3,     0,     4,     0,     3,     0,     1,     3,
       1,     0,     1,     3,     1,     0,     3,     0,     1,     3,
       1,     4,     0,     1,     1,     1,     0,     3,     2,     3,
       0,     3,     0,     5,     5,     0,     7,     0,     6,     1,
       1,     1,     3,     1,     1,     1,     3,     0,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     0,     1,     0,
       2,     3,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     4,
       0,     1,     1,     3,     1,     3,     3,     1,     2,     1,
       1,     1,     1,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       0,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     2,
       0,     3,     0,     2,     2,     2,     2,     0,     6,     2,
       0,     2,     1,     1,     3,     0,     0,     0,     7,     0,
       2,     2,     1,     1,     0,     0,     8,     0,     6,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     5,     0,     1,     0,     5,     0,     2,     0,
       5,     4,     0,     0,     8,     0,     0,     8,     1,     1,
       1,     1,     1,     2,     4,     5,     0,     4,     4,     4,
       3,     3,     2,     2,     0,     2,     1,     2,     3,     1,
       1,     1,     0,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     1,     1,     1,     1,     2,     3,     2,     4,
       5,     0,     5,     0,     0,     5,     0,     7,     1,     0,
       1,     0,     4,     0,     0,     3,     5,     5,     0,     4,
       2,     2,     2,     2,     0,     1,     0,     1,     1,     3,
       1,     4,     5,     5,     0,     2,     0,     0,     7,     0,
       9,     1,     3,     1,     1,     0,     2,     0,     3,     1,
       3,     0,     6,     1,     0,     0,     5,     0,     4,     1,
       1,     1,     3,     1,     3,     0,     0,     5,     1,     3,
       1,     1,     0,     3,     1,     3,     0,     4,     1,     0,
       1,     2,     1,     3,     4,     3,     3,     3,     4,     4,
       3,     0,     0,     6,     0,     1,     0,     1,     1,     2,
       1,     1,     0,     1,     1,     2,     1,     0,     3,     0,
       1,     1,     2,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     0,     6,     1,     1,     3,
       4,     4,     2,     2,     2,     3,     3,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     2,     2,     7,     8,     8,     8,     8,     2,     0,
       1,     4,     0,     1,     2,     0,     4,     3,     3,     3,
       1,     2,     1,     1,     3,     2,     3,     2,     2,     1,
       3,     3,     2,     3,     1,     2,     2,     2,     1,     2,
       1,     1,     1,     2,     3,     2,     3,     2,     2,     3,
       3,     3,     0,     6,     0,     6,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     2,     0,     1,     1,     5,     0,     3,
       0,     2,     3,     0,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       2,     1,     1,     2,     2,     3,     1,     3,     2,     1,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     2,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       0,     1,     1,     2,     2,     1,     2,     2,     0,     1,
       1,     1,     3,     1,     3,     0,     1,     0,     4,     1,
       1,     1,     0,     1,     2,     1,     1,     2,     1,     3,
       3,     1,     1,     0,     2,     0,     1,     5,     0,     3,
       3,     1,     0,     2,     2,     2,     0,     3,     3,     6,
       6,     1,     1,     2,     2,     2,     1,     2,     2,     1,
       1,     0,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     1,     2,     0,     1,     0,     1,     0,     1,     1,
       2,     1,     2,     1,     2,     2,     2,     3,     2,     1,
       1,     1,     1,     3,     1,     1,     1,     4,     2,     1,
       4,     0,     1,     0,     2,     1,     3,     0,     6,     0,
       5,     7,     0,     5,     0,     5,     0,     5,     0,     4,
       0,    10,     3,     4,     3,     3,     7,     4,     3,     5,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     3,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       7,     3,     1,     1,     0,     5,     0,     3,     2,     0,
       5,     0,     0,     6,     1,     3,     1,     1,     3,     2,
       3,     2,     4,     0,     6,     0,     0,     8,     4,     4,
       3,     3,     2,     2,     6,     5,     3,     5,     1,     1,
       1,     1,     1,     0,     1,     1,     2,     2,     3,     3,
       3,     3,     0,     1,     0,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     3,     3,
       0,     1,     1,     3,     3,     2,     2,     4,     0,     3,
       0,     3,     0,     3,     0,     3,     0,     1,     1,     3,
       1,     1,     0,     2,     1,     3,     3,     3,     1,     0,
       5,     0,     1,     1,     0,     6,     0,     1,     1,     2,
       1,     1,     1,     0,     5,     2,     0,     5,     0,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     0,     5,
       0,     1,     1,     0,     4,     4,     3,     5,     1,     3,
       3,     0,     6,     1,     1,     1,     3,     2,     3,     1,
       1,     0,     6,     1,     1,     1,     3,     3,     4,     0,
       6,     0,     2,     0,     4,     0,     2,     4,     1,     0,
       1,     3,     0,     3,     1,     1,     0,     2,     2,     4,
       2,     3,     2,     3,     0,     3,     0,     0,     6,     2,
       1,     1,     2,     2,     8,     4,     0,     1,     2,     1,
       1,     1,     1,     0,     2,     4,     3,     1,     1,     3,
       4,     0,     0,     0,     2,     2,     1,     1,     0,     2,
       3,     3,     3,     2,     3,     4,     3,     4,     3,     4,
       1,     3,     4,     3,     3,     6,     1,     5,     6,     5,
       7,     6,     8,     5,     6,     4,     4,     5,     3,     4,
       1,     3,     3,     3,     3,     3,     3,     5,     5,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     3,     2,     2,     2,     2,     3,     3,     5,
       6,     4,     4,     7,     2,     6,     5,     6,     6,     4,
       4,     5,     4,     6,     2,     4,     4,     4,    10,     6,
       8,     6,     4,     4,     6,     4,     4,     4,     6,     4,
       7,     7,     7,     6,     6,     6,     6,     3,     4,     6,
       8,     2,     2,     8,     8,     6,     6,     1,     6,     6,
       8,     8,     6,     8,     6,     2,     8,     8,     2,     2,
       2,     4,     4,     4,     4,     3,     8,     6,     8,     4,
       6,     4,     4,     4,     6,     8,     4,     3,     6,     4,
       6,     5,     8,     7,    10,     1,     6,     4,     4,     4,
       4,     4,     6,     4,     0,     5,     6,     2,     3,     0,
       4,     0,     3,     0,     1,     1,     3,     4,     4,     5,
       4,     4,     4,     5,     4,     0,     0,     7,     4,     5,
       4,     5,     4,     4,     4,     4,     4,     5,     0,     8,
       0,     3,     3,     1,     4,     0,     1,     0,     2,     0,
       1,     0,     3,     2,     3,     2,     1,     2,     1,     2,
       1,     2,     2,     2,     0,     1,     1,     3,     1,     3,
       1,     3,     0,     1,     0,     2,     4,     5,     1,     1,
       1,     1,     4,     1,     3,     3,     3,     0,     6,     0,
       6,     0,     8,     4,     0,     8,     0,    10,     6,     0,
       8,     0,    10,     6,     1,     2,     2,     0,     1,     5,
       0,     5,     3,     5,     2,     0,     0,     7,     1,     0,
       0,     6,     0,     3,     0,     0,     5,     0,     1,     0,
       1,     0,     2,     3,     3,     1,     1,     0,     7,     0,
       7,     1,     2,     0,     0,     2,     0,     2,     0,     1,
       1,     1,     1,     3,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     1,     0,     2,     0,     1,     0,     0,
       3,     0,     0,     3,     2,     0,     0,     4,     4,     2,
       0,     1,     1,     3,     3,     1,     2,     0,     1,     0,
       4,     4,     2,     0,     1,     1,     0,     1,     0,     1,
       2,     1,     3,     3,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     0,     6,     0,     1,     3,
       1,     0,     2,     3,     1,     2,     1,     0,     3,     0,
       0,     7,     2,     1,     0,     3,     0,     7,     0,     0,
       8,     4,     6,     4,     4,     4,     0,     6,     4,     4,
       4,     5,     4,     1,     3,     1,     2,     1,     3,     1,
       0,     2,     0,     1,     0,     1,     1,     2,     3,     1,
       1,     0,     0,     8,     0,     0,     6,     0,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     3,     4,     0,
       3,     3,     1,     2,     2,     0,     3,     0,     5,     3,
       1,     3,     1,     3,     1,     1,     0,     1,     0,     4,
       0,     1,     3,     1,     1,     1,     0,     0,     6,     0,
       0,    11,     3,     1,     3,     3,     1,     3,     0,     1,
       0,     4,     0,     7,     0,     5,     0,     6,     1,     3,
       2,     4,     0,     2,     0,     2,     1,     1,     1,     0,
       4,     0,     1,     0,     1,     1,     3,     1,     1,     2,
       2,     2,     1,     1,     1,     1,     0,     3,     0,     3,
       2,     4,     4,     3,     4,     4,     1,     3,     3,     6,
       2,     2,     0,     6,     0,     6,     5,     2,     1,     1,
       1,     5,     5,     2,     2,     1,     4,     3,     2,     3,
       2,     2,     1,     3,     4,     3,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     0,     1,     0,     2,     0,     1,     1,     1,
       0,     2,     0,     2,     0,     2,     2,     5,     0,     4,
       0,     4,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     3,     0,     1,     1,     0,     4,     0,     0,
       5,     1,     0,     3,     0,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     0,     1,     0,     3,     3,     1,     0,     3,     1,
       2,     0,     1,     0,     3,     3,     2,     2,     3,     0,
       1,     1,     2,     0,     0,     0,     0,    22,     1,     1,
       0,     1,     0,     1,     1,     0,     1,     1,     0,     2,
       2,     1,     3,     4,     3,     3,     0,     2,     2,     1,
       3,     3,     0,     4,     0,     3,     1,     1,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     3,     1,     5,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     2,     1,
       1,     3,     5,     1,     1,     1,     1,     1,     3,     4,
       5,     1,     5,     3,     2,     1,     3,     2,     2,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       2,     0,     2,     0,     2,     0,     4,     0,     3,     1,
       1,     1,     1,     0,     1,     1,     1,     0,     2,     2,
       2,     3,     0,     4,     4,     6,     2,     3,     3,     3,
       5,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       2,     2,     2,     2,     2,     1,     1,     4,     4,     1,
       1,     1,     1,     1,     0,     4,     1,     1,     1,     3,
       3,     1,     1,     2,     2,     0,     3,     4,     3,     0,
       7,     1,     2,     1,     1,     1,     1,     1,     1,     0,
       5,     1,     1,     1,     1,     1,     3,     6,     6,     6,
       7,     5,     3,     8,     8,     8,     6,     0,     1,     1,
       2,     0,     1,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     0,
       1,     3,     1,     2,     2,     2,     1,     3,     3,     1,
       1,     3,     1,     3,     4,     5,     4,     6,     1,     0,
       3,     3,     1,     1,     0,     2,     2,     2,     2,     0,
       2,     0,     3,     2,     1,     2,     2,     2,     2,     2,
       0,     3,     0,     1,     0,     3,     2,     0,     1,     2,
       0,     1,     4,     4,     5,     2,     3,     0,     1,     0,
       4,     0,     1,     1,     0,     1,     0,     2,     2,     1,
       0,     1,     1,     2,     3,     2,     0,     6,     3,     0,
       0,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     0,
       3,     4,     1,     3,     0,     3,     0,     3,     4,     4,
       0,     0,     0,    16,     8,     7,     0,     0,     0,     0,
       0,    15,     0,     0,     0,     0,    12,     4,     4,     3,
       4,     3,     2,     1,     3,     5,     1,     1,     0,     1,
       1,     0,     2,     0,     0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2609,  1080,  2540,     0,     0,     0,     0,     0,     0,
    2542,   124,  1119,    64,  1710,  1827,  1828,  1614,  1642,     2,
       0,  1080,   270,   174,     0,    76,  1651,     0,  1879,     0,
       0,  1080,   484,     0,  1873,     0,     0,  1080,  1654,  1863,
     247,   174,  2542,     0,  1136,  2350,  1748,     0,     0,     0,
    1731,     0,  2425,  1699,     0,     0,     0,     0,     3,     8,
      19,     0,    39,    24,    29,    14,    18,    13,    53,    46,
      26,    37,    10,    55,    56,    16,    43,    11,    12,    15,
      35,    42,    36,    38,    51,    50,  1118,    22,    23,    30,
      44,    60,    20,    57,    54,    21,  1829,    25,    45,    40,
      32,    61,    33,    52,    34,    59,    28,    47,    27,     9,
      17,    48,    49,    41,    62,    31,    58,     0,   928,     0,
       0,  1005,     0,     0,     0,     0,   174,     0,   908,  2607,
    2608,  2609,  1082,  1081,     0,  2542,  1984,  1065,  1091,  2047,
    2048,  2049,  2050,  2051,  2052,  2053,  2054,  1998,  2055,  2056,
    2058,  2057,  2059,  2060,  1999,  2000,  2061,  2062,  2063,  2065,
    2064,  2066,  2001,  2002,  2067,  2068,  2069,  2070,  2003,  2004,
    2071,  2073,  2072,  2005,  2074,  2075,  2076,  2079,  2078,  2077,
    2006,  2080,  2007,  2081,  2082,  2083,  2084,  2085,  2086,  2087,
    2089,  2088,  2008,  2090,  2091,  2092,  2093,  2094,  2095,  2097,
    2096,  2098,  2099,  2100,  2009,  2101,  2102,  2103,  2104,  2105,
    2106,  2107,  2108,  2109,  2010,  2110,  2111,  2112,  2132,  2011,
    2113,  2116,  2115,  2114,  2117,  2118,  2119,  2121,  2120,  2122,
    2123,  2012,  2124,  2125,  2126,  2127,  2128,  2130,  2129,  2134,
    2135,  2136,  2013,  2014,  2131,  2133,  2330,  2137,  2139,  2138,
    2140,  2142,  2141,  2015,  2143,  2016,  2017,  2144,  2145,  1981,
    2146,  1982,  2147,  2149,  2150,  2151,  2156,  2018,  2148,  2152,
    2153,  2154,  2155,  2157,  2019,  2158,  2159,  2160,  2161,  2162,
    2163,  2164,  2165,  2166,  2167,  2189,  2178,  2180,  2171,  2173,
    2174,  2176,  2172,  2179,  2177,  2183,  2182,  2184,  2185,  2186,
    2187,  2188,  2181,  2169,  2175,  2170,  2190,  2191,  2168,  2192,
    2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,  2202,
    2204,  2203,  2205,  2206,  2207,  2208,  2209,  2210,  2212,  2211,
    2213,  2214,  2215,  2217,  2216,  2219,  2220,  2020,  2218,  2221,
    2222,  2223,  2224,  2225,  2226,  2021,  2022,  2023,  2227,  2228,
    2024,  2229,  2231,  2230,  2232,  2233,  2234,  2235,  2236,  2237,
    2238,  2025,  2026,  2239,  2240,  2241,  2242,  2243,  2244,  2245,
    2246,  2247,  2248,  2249,  2250,  2251,  2252,  2254,  2253,  2255,
    2256,  2257,  2258,  2259,  2260,  2261,  2027,  2262,  2028,  2263,
    2264,  2029,  2265,  2030,  2266,  2267,  2268,  2269,  2031,  2270,
    2271,  2272,  2274,  2275,  2273,  2276,  2032,  2277,  2278,  2279,
    2033,  2281,  2280,  2282,  2034,  2284,  2285,  2035,  2283,  2037,
    2286,  2287,  2036,  2038,  2288,  2289,  2290,  2291,  2292,  2294,
    2293,  2295,  2296,  2297,  2039,  2298,  2299,  2300,  2301,  2040,
    2302,  2303,  2304,  2305,  2306,  2308,  2307,  2309,  2310,  2311,
    2312,  2314,  2316,  2315,  2313,  2317,  2318,  2319,  2320,  2323,
    2324,  2325,  2326,  2321,  2322,  2041,  2327,  2328,  2329,  2331,
    2332,  2334,  2333,  2042,  2043,  2335,  2336,  2046,  2337,  2338,
    2341,  2339,  2340,  2343,  2342,  2344,  2346,  2345,  2044,  2347,
    2045,  2348,  2349,   193,  1987,   176,  1988,  1997,     0,  2417,
    2416,  1049,  1066,  2543,  2544,   577,   858,     0,     0,   859,
       0,   576,   857,   174,  2609,   129,     0,   573,   574,     0,
       0,     0,  1120,  1161,  1724,     0,  1640,  1640,  1640,     0,
       0,  1640,  1640,     0,  1643,  1640,   174,  1640,     0,    69,
    1836,   271,     0,     0,     0,     0,     0,  1980,     0,  1657,
       0,  1880,  1881,     0,  1888,     0,  1889,  1883,  2414,     0,
       0,     0,     0,     0,   174,  1083,     0,  1708,     0,   237,
     246,   248,   249,   245,     0,  2544,  2555,  1128,  1134,  1146,
       0,  1806,   249,  1036,  1020,  1036,  1732,  1729,     0,     0,
    1708,  1882,  2666,     0,     0,     0,  2662,     0,  2667,     0,
    1136,     0,     0,     1,     5,     0,     0,  1119,  2127,  2014,
    2231,  1820,  1818,  1975,     0,   899,   929,     0,   904,     0,
     902,  1993,  1992,  1991,     0,   915,   914,   912,     0,   448,
       0,     0,     0,  2618,   906,  1063,  2541,     0,   195,     0,
      78,     0,     0,     0,  2547,     0,     0,     0,     0,   128,
       0,     0,     0,   125,  1161,  1161,  2609,  2611,  2613,   577,
     575,     0,     0,     0,  1125,     0,  1124,     0,  1728,  1727,
    1726,     0,  1724,  2048,  1998,  2060,     0,  1948,     0,     0,
       0,  1412,     0,  2003,     0,  2074,  2076,  2008,     0,     0,
    1168,  1168,   730,     0,     0,     0,  2099,  2100,  1954,     0,
       0,     0,  1945,  1955,  2014,  2139,  2140,     0,  1947,  2145,
       0,     0,     0,     0,  2162,  1952,     0,     0,  2199,  2201,
       0,     0,  2205,  2206,  2207,  2208,  1931,  1223,     0,   730,
    1944,  1951,  2224,  1937,  2232,  2237,  2238,     0,  2247,     0,
       0,  2269,     0,  2275,  2273,  2279,     0,     0,  2305,     0,
       0,   730,  1930,  2323,  2324,  2325,  2326,     0,  1946,  2041,
    1953,     0,  2337,  1168,   730,   730,     0,     0,     0,  2344,
    2346,  2349,     0,     0,     0,  2579,  1222,     0,  1380,     0,
    1297,  1406,  1180,  1186,  1200,     0,  1215,  1233,  1234,  1236,
    1335,  1235,  1241,  1240,  1615,  1941,  1239,  1238,  1942,  1943,
    1232,  1965,  1987,  1964,     0,     0,     0,     0,     0,     0,
       0,     0,  1644,     0,     0,  1626,  1640,    71,     0,     0,
    2461,  2476,  2477,  2473,  2478,  2496,  2479,  2483,     0,  2475,
    2467,     0,  2482,     0,  2471,  2480,     0,  2465,     0,  2481,
    2486,  2497,  2469,  2474,  2452,     0,  2459,  2463,  1977,  1521,
    2428,  2429,     0,    77,  1659,  1660,  1658,  1004,     0,  1878,
       0,  1892,     0,  1078,   494,   485,     0,  1801,  1800,     0,
    1874,  2556,     0,     0,  1054,  1662,  1709,     0,  1661,  1869,
       0,  1867,  1864,  1866,   238,     0,     0,   268,  2461,     0,
    2446,     0,  2550,  2547,  2557,  2592,  2587,  2586,  2589,  2590,
    1152,  2591,  1151,  2588,  2585,  1161,  1147,  1149,  1150,   774,
       0,     0,  2370,  2371,  2212,  2232,  2372,  2321,     0,     0,
    2391,  2351,  2356,  2352,     0,  1768,     0,   774,  1814,  1769,
       0,     0,  1814,     0,  1556,  1804,  1807,     0,  2374,  1782,
     855,   854,   853,  2375,  1800,     0,  1756,  1770,     0,  1733,
    1775,     0,  2376,     0,  1803,     0,  1556,  1814,     0,  1749,
       0,     0,     0,     0,   244,  1041,  1040,  1016,  1037,  1038,
       0,     0,  1019,  1021,  1022,  1018,     0,  2679,  2426,  1004,
    1936,  1935,  1985,  2663,  1934,  2671,  2673,  2659,  2661,  2668,
    1130,     0,  2561,     6,    63,  1161,     0,     0,  1833,  2616,
    2617,  2615,   790,     0,  1168,  1994,  2610,   177,   913,     0,
     449,   177,     0,     0,     0,     0,     0,   450,   451,   383,
     917,     0,   897,   910,     0,     0,   909,  2618,     0,     0,
    1093,  1095,  1094,  1111,   197,   194,   175,     0,  1051,  1633,
    1635,  1068,  2546,     0,     0,  2548,  2552,  1221,  1220,     0,
     122,   127,     0,     0,     0,  2518,   126,  2512,  2614,  1161,
    1161,  1161,  2606,     0,  2594,  2601,  2602,  2605,  2604,  2603,
    2600,     0,  2593,  2596,  2597,  2599,  2598,  2618,  2612,     0,
     860,   860,   860,  1450,  1161,  1117,  1162,  1162,  1964,     0,
    1711,  1714,  1718,  1722,  1725,     0,     0,  1526,  1254,  1526,
    1526,  1526,  1413,     0,     0,     0,     0,     0,     0,     0,
       0,  1526,     0,  1291,  1264,     0,  1292,     0,     0,     0,
    1956,     0,     0,     0,  2579,     0,     0,     0,     0,  1385,
       0,     0,     0,  2579,     0,     0,     0,     0,     0,  1408,
    1410,  1964,  1526,     0,     0,  1526,     0,     0,     0,     0,
       0,  1173,   770,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1526,  1526,     0,     0,
    1526,  1305,  1958,     0,     0,     0,  1957,     0,     0,     0,
    1950,  1949,  1932,     0,  1308,  1310,  1309,     0,  1526,  1526,
       0,     0,     0,  1244,  1243,  1245,     0,     0,     0,     0,
       0,     0,  1219,  1218,  1217,  1216,     0,     0,     0,  1224,
       0,  1225,  1226,     0,  1227,  1228,  1229,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1246,     0,     0,     0,
    1933,  1344,     0,  1641,  1621,  1628,  1623,     0,  1644,  1624,
    1632,   463,   462,  1649,  1650,  1630,  1645,  1646,     0,  1629,
    2510,  1625,     0,  1616,     0,    70,     0,  1859,     0,     0,
       0,  1855,  1857,  1856,     0,     0,  1860,     0,  1858,  1837,
    1841,  1847,  1838,     0,     0,   269,   272,   274,     0,   277,
    2462,  2460,  2494,  2493,  2498,     0,  2495,  2491,  2484,  2519,
    2488,     0,  2519,  2490,  2489,  2519,  2485,  2492,  2519,  2457,
       0,  1522,  1523,     0,  2427,     0,  1976,     0,     0,  1101,
    1893,  1894,  1890,  1521,  2415,  2418,     0,   495,     0,     0,
     504,     0,     0,    66,    67,     0,  1085,     0,  1084,  1088,
       0,     0,     0,  1665,  1655,  1664,  1447,  1870,  1871,     0,
     236,   261,   256,   264,   258,   260,   259,   265,   266,   267,
     262,   257,   263,   250,     0,  2460,     0,  2457,  2551,     0,
    2553,  2570,  1135,  2558,  1158,  1137,  1157,  1148,   773,     0,
     776,   778,  1684,  1685,   777,   786,     0,   775,     0,     0,
       0,  2377,     0,   782,   784,   783,  2386,   781,     0,     0,
    2361,  2382,  1810,     0,     0,  1781,     0,   577,     0,     0,
       0,     0,     0,     0,  1750,     0,     0,   620,     0,  1774,
    1557,  1808,  1809,  1814,     0,     0,  1814,     0,  1787,  1804,
       0,  1814,  1745,     0,     0,  1737,  1742,  1738,     0,  1744,
    1743,  1746,  1734,  1735,  1810,  1761,  1788,  1804,  1773,  1780,
       0,  1760,  1767,     0,  1778,  1804,  1804,  1814,  1814,  1042,
       0,  1025,  1026,     0,     0,  1730,  1450,     0,     0,  2660,
    2674,  2658,  2669,  2670,  2657,  1131,  2562,  1129,  2563,     0,
       7,     4,     0,  1832,  1822,  1823,  1824,  1825,  1826,  1821,
    1819,  1834,  1835,   791,   790,   568,   571,   570,     0,     0,
    1996,     0,   905,     0,   437,   903,     0,     0,   415,   394,
     415,   452,     0,     0,   790,   920,     0,     0,   907,  1064,
       0,     0,   483,  1111,  1097,  1113,     0,   198,   200,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    79,    80,   102,  1053,  1052,     0,  1050,
    1076,  1075,  1073,     0,  1074,  1072,  1067,  1069,  1070,  2545,
    2549,   578,   790,   425,     0,   386,     0,     0,     0,     0,
       0,   577,     0,     0,  2595,   111,   861,     0,     0,     0,
    1468,  1467,     0,  1421,  1126,  1423,  1420,  1419,  1418,     0,
    1467,  1123,  1163,  1159,     0,  1716,  1637,  1447,  1639,  1975,
       0,     0,     0,  1720,     0,     0,  1527,  1526,     0,  1391,
       0,     0,     0,     0,  1414,     0,     0,     0,     0,     0,
       0,     0,  1365,     0,  1391,  1169,     0,   731,  1315,     0,
       0,     0,     0,     0,     0,  1497,  1498,  1499,  1500,  1508,
    1501,  1502,  1503,  1510,  1515,  1504,  1505,  1511,  1512,  1513,
    1506,  1514,  1509,  1507,  1516,     0,  1496,     0,     0,  1520,
    1517,  1519,  1518,     0,  1386,  1378,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1526,     0,     0,
       0,  1526,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1327,
       0,     0,     0,     0,     0,  1526,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1287,     0,  1967,  1966,
       0,     0,     0,   823,     0,  1248,     0,  1247,  1459,     0,
    2564,  2580,     0,  2377,  1381,  1383,     0,  1171,  1170,  1172,
    1183,  1176,  1181,  1174,  1178,     0,  1230,  2054,  1184,     0,
       0,  1212,  2579,  1535,  1213,  1198,  1203,  1204,     0,  1201,
    1202,     0,  1206,     0,  1205,  1209,  1210,  1211,  1214,     0,
       0,     0,     0,  1237,  1242,  1407,  1161,  1968,     0,  1618,
    1631,  1802,  1647,  1686,     0,  1006,     0,     0,    72,    74,
    1852,  1849,  1848,  1850,  1854,  1853,  1851,     0,  1861,  2099,
    2323,  2326,   281,     0,   254,   253,   255,   278,     0,     0,
    2487,     0,  2468,     0,  2472,  2466,  2470,     0,     0,  2458,
       0,  2464,  1525,  2135,  2216,     0,  1528,  2431,  1652,  2678,
       0,  1891,     0,     0,     0,  1079,     0,  1161,   493,   492,
     491,   490,     0,   506,   488,     0,    68,     0,     0,  1875,
       0,     0,     0,     0,  1056,  1663,     0,     0,  1636,  1448,
    1872,  1868,  1865,     0,     0,     0,     0,     0,     0,     0,
    2554,  2572,  2571,  2559,  1161,  1547,  2393,     0,  2388,  2387,
       0,     0,     0,  2406,  2389,     0,     0,  2355,  2394,  2395,
    2398,     0,     0,     0,     0,     0,  2392,  2321,  2357,  2358,
       0,  2363,  2353,     0,     0,  1812,  1815,  1816,     0,     0,
    1796,  1790,  1789,  1785,  1791,  1786,  1799,  1798,  1797,  1758,
    1757,  1567,  1568,  1566,  1560,  1561,  1565,  1564,  1753,  1805,
    1795,  1793,  1783,  1814,  1794,  1792,  1739,  1740,  1741,     0,
    1556,     0,  1812,  1814,  1804,     0,  1814,  1814,  1777,  1779,
       0,  1028,  1039,  1024,  1023,     0,  2664,  2672,  2676,     0,
    1556,  2569,  2567,  1817,   569,  1686,  1686,     0,  1995,     0,
       0,     0,     0,     0,     0,     0,   178,   187,     0,     0,
     392,   393,  1686,   391,   438,   439,   442,   443,   444,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   445,  1686,
    1686,   388,   416,   417,   420,   421,   422,   423,   424,   384,
       0,   389,     0,   918,  1002,  1686,  1002,     0,  1686,  1686,
    1002,  1686,     0,     0,  1686,  1686,     0,     0,  1686,     0,
       0,  1002,     0,  1686,     0,   989,     0,     0,  1686,  1686,
    1686,  1686,  1686,  1002,     0,     0,  1686,   483,  1686,     0,
       0,  1012,     0,     0,  1686,  1686,  1686,  1686,     0,     0,
    1686,     0,  1686,   936,   988,   581,   607,   608,   898,   935,
     937,   949,   479,     0,   967,   991,   992,   990,     0,   922,
     924,  2619,  2620,  2621,  1100,  1092,  1099,  1096,  1111,  1109,
    1098,   850,   849,     0,  1112,   196,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1634,  1077,  1071,   123,   790,  1686,  1686,  1686,
    1686,   390,   426,   427,   430,   431,   432,   433,   436,   434,
     435,     0,     0,   402,     0,     0,  2513,     0,  2652,     0,
       0,     0,   176,   579,     0,     0,   862,     0,     0,     0,
    1467,  1450,     0,     0,  1444,  1469,     0,  1469,  1450,  1450,
       0,  1121,  1450,  1447,  1464,     0,  1160,  1167,  1166,  1961,
    1968,     0,     0,  1712,     0,  1978,  1719,  1450,  1723,  1722,
       0,  1311,     0,  1358,     0,  1360,  1361,  1362,     0,     0,
       0,     0,     0,  1312,     0,  1262,  1313,  1314,     0,     0,
       0,     0,  1364,     0,   732,     0,     0,  1265,  1266,  1259,
    1251,     0,     0,  1337,     0,     0,  1267,     0,     0,     0,
       0,     0,  1338,  1409,     0,  1411,  1968,     0,  1370,  1319,
    1272,     0,  1368,     0,  1273,  1339,  1340,  1341,  1321,  1322,
       0,  1343,     0,  1323,     0,     0,  1326,     0,     0,  1275,
    1374,  1372,     0,     0,     0,     0,  1376,  1277,     0,     0,
       0,  1276,     0,     0,     0,     0,     0,     0,     0,  1279,
       0,  1260,  1373,  1375,  1329,     0,     0,     0,     0,     0,
    1288,     0,  2573,  1458,  2581,  1459,     0,     0,  2575,  2565,
    2570,  2578,  1252,     0,     0,  1969,  1177,  1182,  1175,  1179,
    2579,     0,     0,     0,     0,  1196,  1195,     0,     0,     0,
    2579,  1535,  1199,     0,     0,  1354,  1355,  1404,     0,  1622,
    1619,  1648,  1687,     0,  2511,  1008,  1007,  1627,  1006,    75,
       0,  1846,  1862,  1839,     0,   273,   282,   275,   279,   280,
     276,  2523,     0,  2522,     0,  2506,  2509,  1975,     0,     0,
       0,  2441,  2435,  2442,  2444,  2438,  2443,  2445,  2436,  2437,
    2432,  2439,  1529,  1558,     0,  1102,  1104,  1105,  1103,  1111,
       0,     0,  2421,  2422,  2420,  2419,   496,     0,  1592,  1593,
    1578,  1579,  1577,  1580,   505,  1581,  1591,     0,   517,     0,
     496,  1877,  1876,     0,  1086,  1089,  1090,  1061,  1060,  1062,
    1055,  1057,  1058,   561,  1669,     0,     0,     0,  1675,  1656,
    1666,     0,     0,   251,     0,     0,     0,     0,     0,     0,
    1156,  1450,  1607,  1153,  1141,  1558,  1548,  1140,   789,   788,
     787,   785,     0,     0,     0,     0,  2400,  2401,     0,     0,
    2378,  2379,  2380,     0,  2384,  2360,  2361,     0,  2362,     0,
    2412,  2413,  2410,  2411,  2409,  2383,  1811,     0,  1762,     0,
    1784,     0,     0,  1755,     0,  1776,  1736,  1764,  1754,  1528,
    1804,  1751,  1752,     0,  1048,     0,  1044,  1043,     0,  1017,
    1030,     0,     0,     0,  2675,  1549,  2568,     0,     0,   901,
     181,   184,   182,     0,   183,     0,     0,   447,   446,     0,
    1802,   440,   135,   134,   136,   137,  1575,  1576,  1572,  1573,
    1571,  1574,   139,   138,   133,   916,     0,     0,     0,  1802,
     418,   395,   396,   399,   400,   401,     0,  1003,   891,  1080,
     971,     0,   653,   891,   846,   851,   851,   969,     0,     0,
    1080,     0,     0,     0,     0,     0,  1080,     0,     0,     0,
    1686,     0,   982,   931,     0,     0,     0,     0,     0,   983,
       0,     0,   932,  1686,     0,     0,     0,     0,     0,     0,
    1080,     0,     0,   481,     0,  1080,   483,  1015,  1014,  1013,
       0,  1080,  1080,     0,     0,     0,     0,   613,   614,   612,
       0,     0,   605,   582,   790,   933,   480,   934,   652,     0,
    1009,   649,   655,  1971,     0,     0,     0,   145,  2623,     0,
    1488,   199,   103,   101,    83,  1983,    87,    89,    82,   107,
    1585,  1586,  1584,  1582,  1583,   108,    85,    86,    88,    92,
      91,    93,    94,    97,    98,    95,    90,    96,    84,    99,
     109,   110,    81,     0,     0,     0,     0,  1802,   428,     0,
       0,  1686,   385,   403,   404,   407,   408,   409,   410,   411,
     414,   412,   413,     0,  2514,  2516,     0,     0,   379,   378,
       0,   140,  2646,     0,     0,   652,   112,   479,   580,   583,
     884,   886,   885,   876,   875,   113,   116,   119,     0,  2564,
    1462,     0,  1446,  1445,  1470,     0,  1450,  1469,  1469,     0,
    1426,  1425,  1127,  1424,  1521,  1452,  1146,  1165,  1164,     0,
    1638,  1722,  1450,  1528,  1976,  1528,     0,  1721,     0,     0,
    1359,  1392,     0,  1415,     0,  1256,   744,   744,   728,  1400,
     724,   744,  1396,   728,  1398,     0,     0,     0,     0,     0,
    1366,  1363,     0,     0,     0,     0,     0,  1389,     0,     0,
       0,  1261,     0,  1349,  1371,  1369,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1377,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   812,   818,   821,   822,   824,   816,     0,  1331,
    1249,  1161,  2582,  2584,  1132,     0,  2574,  2576,   893,  1382,
       0,  1193,  1189,     0,  1187,  1534,  1208,  1207,     0,     0,
       0,  1197,  1162,  1345,  1161,     0,  1405,  1970,   993,   461,
     619,  1617,    73,  1842,     0,     0,  2520,     0,  2531,     0,
       0,     0,     0,     0,     0,     0,  2430,  1559,  1696,     0,
    1111,  1115,  1986,  1884,  2423,  2424,     0,   497,   498,   500,
    1162,   514,   494,     0,   486,   489,     0,     0,  1059,  1146,
       0,  1688,  1673,  1680,  1674,     0,     0,     0,  1672,  1960,
    1959,  1966,  2557,     0,  1494,     0,     0,  2451,     0,     0,
       0,  2560,  1528,  1528,  1601,     0,     0,  1138,  1143,  1139,
    1142,  2390,     0,     0,     0,     0,  2405,  2399,  2396,  2397,
       0,  2359,  2381,  2365,  2364,  2367,  2369,  1813,  1556,  1772,
    1771,  1563,  1562,  1747,  1556,  1766,  1814,     0,     0,     0,
       0,     0,  1032,  1700,  1703,     0,  2665,  2677,     0,   618,
     617,   186,   185,   191,   192,   465,   453,   464,   441,   132,
     454,   455,   419,     0,   397,   919,   654,   892,   954,     0,
       0,     0,   851,   648,   891,   860,   852,   891,   891,   998,
     999,     0,     0,   592,   589,   973,   601,   952,   943,   953,
     964,   966,     0,   591,   615,     0,     0,   603,     0,   938,
     980,   981,  1006,   586,     0,     0,   628,   629,   627,   609,
     616,  1000,  1001,   587,   588,   975,     0,  1543,  1545,  1553,
     594,   593,     0,   590,     0,   951,   986,   959,     0,   626,
     624,   621,   623,   622,   625,   604,   596,   595,   598,   597,
     600,   599,   602,   948,     0,  1002,  1002,   968,     0,   636,
     637,   639,   640,  1974,     0,  1011,   970,     0,   641,   650,
     642,     0,     0,     0,   155,     0,     0,   921,     0,   148,
     146,   157,     0,     0,     0,  1491,     0,  1492,  1489,  1490,
       0,   104,   106,   460,   459,   458,   457,   429,     0,     0,
       0,  1802,   405,  2515,     0,     0,  2653,   382,   380,   381,
       0,     0,   201,   634,   635,   633,   632,     0,   468,     0,
     466,     0,   478,     0,  1895,   790,   584,     0,     0,     0,
    2570,  1521,  1454,  1450,  1422,  1450,  1433,     0,     0,  1450,
    1429,  1427,  1431,  1486,  1161,  1962,     0,  1528,  1547,  1979,
    1715,     0,  1289,  1416,     0,     0,   745,  1393,   798,     0,
    1402,     0,  1403,   726,   725,  1395,  1397,  1401,  1399,  1255,
    1263,  1336,  1258,  1257,     0,     0,     0,  1295,  1317,     0,
    1296,  1387,  1390,     0,     0,  1269,     0,  1271,     0,     0,
    1351,  1320,  1342,  1298,  1324,     0,  1274,  1250,     0,  1299,
       0,  1304,  1302,     0,  1278,     0,     0,  1285,     0,  1283,
       0,  1284,     0,  1286,  1328,  1330,     0,     0,   823,   809,
     810,   811,     0,   813,   815,   817,     0,     0,  1460,  2583,
    1133,     0,     0,  1384,  1185,     0,  1194,  1191,     0,  1188,
    1163,  1356,  1346,  1620,   995,   994,  1844,     0,  1840,   290,
     285,   293,   287,   289,   288,   294,   295,   296,   297,   291,
     286,   292,   284,   283,  2521,     0,  2456,  2508,  2507,  2524,
    2524,  2524,     0,  1530,     0,  1653,  1106,  1111,  1115,     0,
    1107,  1895,   501,     0,     0,     0,   521,     0,   519,   487,
    1087,  1161,  1670,  1682,     0,  1690,     0,     0,  1667,  1677,
       0,     0,     0,  1676,   483,     0,   252,     0,  2448,  2449,
    2447,  1558,  1536,     0,     0,  1613,     0,  1608,  1154,     0,
    2408,  2407,  2403,  2402,  2404,  2385,     0,     0,  1763,  1765,
    1759,  1047,  1046,  1045,  1029,     0,     0,  1034,     0,  1528,
       0,  1963,  1550,  1553,   398,   956,     0,   891,   847,   848,
     860,     0,   860,   860,     0,     0,   942,     0,  1068,     0,
     947,   786,   610,   979,   978,     0,   611,     0,   940,     0,
    1554,  1555,  1546,   482,   939,   961,   945,  1861,   972,   652,
    1010,   828,   720,   669,   660,   744,   663,   662,   706,   728,
     674,   724,   722,   692,   724,   724,   699,   698,   716,   702,
     682,   798,   798,   681,   719,   798,   703,   701,   705,     0,
     707,   724,   712,   700,   704,   721,   697,   694,   718,   744,
     728,   728,   678,   717,   798,     0,   710,   744,   748,   680,
     798,   805,     0,     0,   744,   746,  1973,   156,   144,     0,
       0,   923,   925,     0,     0,   926,  2625,     0,  2627,     0,
    1114,     0,   100,     0,     0,   387,   456,   406,  2517,     0,
     212,  1161,     0,     0,   202,   204,   205,     0,     0,     0,
     579,  1897,  1896,   467,   564,   585,     0,     0,     0,  1455,
    1453,  1463,     0,  1418,  1450,  1450,     0,  1418,     0,     0,
       0,  1451,  1483,  1465,  1722,  1717,  1569,     0,  1417,     0,
       0,     0,     0,   792,   803,   801,   795,     0,   799,   800,
    1394,     0,     0,  1367,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1253,     0,  1347,     0,     0,     0,
       0,     0,     0,  1282,  1280,  1281,   807,  1333,     0,   820,
     814,   812,   819,     0,  1558,  2564,   894,  1190,     0,  1357,
     997,   996,     0,     0,     0,     0,  2529,  2529,  2529,  1695,
    1694,     0,  1693,  1697,  1108,  1116,     0,   499,   502,     0,
       0,     0,   518,     0,   562,     0,     0,     0,  1691,  1679,
    2561,  1668,  1671,  1968,  1449,  1495,  2450,  1145,     0,  1531,
    1612,  1609,     0,  1602,  1604,  1606,     0,  2366,  2368,  1031,
       0,     0,  1027,  1702,  1547,  1704,     0,  1552,     0,     0,
     955,     0,     0,     0,     0,     0,     0,   985,     0,  1009,
     944,   965,   987,     0,   748,  1080,  1544,   960,   962,  1056,
       0,   638,     0,   832,   668,   661,   679,   677,   733,   723,
       0,   733,   733,   688,   706,   683,     0,   798,   696,   687,
     708,   711,   713,   715,   733,     0,   798,   676,   675,   685,
     672,   733,   756,     0,     0,     0,     0,   752,     0,   826,
       0,     0,   759,   656,   749,   751,     0,     0,   709,   798,
     665,   806,   805,   667,   798,   805,   733,     0,   747,   733,
       0,   142,   147,   158,   159,   911,  2624,     0,  2622,     0,
    1110,  1493,   105,     0,     0,   215,   213,   214,     0,   208,
     210,   205,  2640,     0,  2647,     0,     0,  2645,   469,   471,
     479,   565,     0,     0,  1553,   889,     0,     0,     0,  1434,
       0,  1438,  1443,  1439,     0,  1430,  1428,     0,  1487,     0,
    1558,     0,  1713,  1290,   742,   740,   743,   741,   794,   793,
     797,     0,   796,   805,   729,     0,  1293,  1294,  1318,  1388,
    1379,  1316,     0,  1270,  1348,     0,     0,  1325,  1300,  1303,
    1301,  1306,  1307,     0,  1332,     0,  1153,  1153,   630,  2577,
    1192,  1845,  1843,  2532,     0,     0,  2528,  2526,     0,  2527,
    2525,  2499,     0,  2454,  2455,  2453,  2440,     0,     0,     0,
    1161,   507,     0,   524,   523,   520,  1558,  1681,  1683,  1689,
    1678,     0,  1532,  1547,   779,  1605,     0,  1155,  1033,     0,
    1569,  1553,   958,     0,   651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   984,  1938,   974,   483,   976,
     941,     0,   946,   606,     0,   831,     0,   836,   737,   738,
     739,   689,   734,   736,     0,   691,   659,   684,   714,   690,
       0,   686,   673,   762,   763,   765,   764,   761,   771,   754,
     772,     0,     0,   766,   767,   768,   760,   750,   758,   753,
     664,   666,   670,   671,   657,     0,   658,  1972,   149,   927,
     318,  2626,  2634,     0,  2636,  2629,   130,  2644,  2654,   212,
       0,     0,   153,     0,   203,   786,   206,  2561,  1895,     0,
     474,   863,     0,   888,     0,   865,   867,  1456,     0,     0,
       0,     0,     0,  1475,  1476,     0,     0,  1481,  1485,  1466,
    1570,   804,   802,     0,     0,  1350,  1352,   808,     0,  1461,
     631,  2505,  2504,  2503,  2500,     0,     0,     0,     0,     0,
       0,  2530,  2534,  1692,     0,     0,     0,   515,     0,   511,
     513,     0,   549,   563,  1540,  1553,     0,  1558,     0,  1610,
    1603,  1035,  1701,  1551,   957,     0,     0,   863,     0,     0,
    1940,  1939,   950,  1009,     0,   829,     0,   833,   834,   835,
       0,   827,   735,     0,   895,     0,   755,   757,     0,   151,
     344,     0,   330,   316,     0,     0,     0,   320,   160,   163,
     161,     0,   162,   168,     0,   169,   170,   171,   172,   173,
     164,   342,   343,   167,   165,   166,     0,  1989,     0,  1990,
    1136,     0,     0,  2632,     0,  2628,  2557,   179,   209,     0,
       0,   145,   154,  2648,   769,   472,   470,     0,  2557,     0,
    1686,   114,   864,   880,   879,   869,  1553,     0,     0,   117,
     866,   882,   873,   120,   868,   881,   871,  2564,  1435,     0,
    1440,     0,  1432,  1471,  1471,  1482,   727,  1268,  1334,  2501,
    2535,  2538,  2536,  2537,  2539,  2533,     0,  1447,  1162,     0,
     508,   509,     0,   527,     0,  1686,     0,     0,  1686,  1686,
    1686,  1686,   542,   550,   552,     0,  1541,  1542,     0,  1537,
    1539,  1533,  1594,   780,  1898,     0,   863,   643,   865,   867,
     977,     0,   830,     0,     0,   798,     0,   798,   150,     0,
     143,     0,     0,   329,   332,     0,     0,   335,   325,   324,
     326,     0,   319,   318,   318,   372,   323,   369,   368,   361,
    2635,     0,  2561,     0,     0,     0,  2630,  2655,   211,  1161,
     157,     0,   476,   475,   878,     0,   993,   870,   887,   890,
       0,   993,   874,   993,   872,  1457,     0,     0,     0,  1479,
    1477,  1698,  1706,     0,  1885,     0,   516,   515,   512,     0,
     525,     0,  1686,  1686,     0,     0,     0,     0,     0,   522,
     551,  1686,  1553,     0,  1144,     0,  1906,   647,   646,   644,
     645,     0,   842,     0,   841,     0,   838,   837,   693,   896,
     695,   152,   345,   356,   359,   351,   331,     0,     0,     0,
     321,   318,     0,   305,   303,   304,   310,   311,   312,   313,
     314,   315,   306,   309,   307,   308,   318,     0,   220,     0,
       0,  2633,  2631,     0,  2637,     0,   189,   188,   180,     0,
     318,  2641,     0,  2649,  2561,   877,   115,   883,   118,   121,
    1437,  1442,     0,  1472,     0,     0,     0,     0,     0,   779,
     503,   510,   535,   528,   531,     0,   560,     0,     0,  1589,
    1587,  1588,   556,  1590,   557,   555,   553,   546,     0,   544,
       0,  1538,  1595,     0,     0,     0,     0,  1899,  1901,     0,
    1611,   963,   844,   845,   843,     0,     0,     0,     0,   318,
     352,     0,   327,     0,   336,     0,     0,   218,   375,   373,
     216,   363,   363,  2638,  2639,   190,  2656,     0,   159,   179,
     477,  1474,  1473,  1488,     0,  1705,  1707,  1886,   535,     0,
     533,     0,   529,   526,   530,   558,   559,     0,   543,     0,
     554,     0,     0,     0,     0,     0,  1900,     0,     0,  1907,
    1909,     0,     0,   353,   359,   349,   357,   318,     0,     0,
     317,     0,   371,   219,     0,     0,     0,   318,     0,   362,
     364,   366,     0,   141,  2650,     0,     0,  1912,   532,     0,
     540,   536,   538,   541,   549,   548,   545,  1597,  1904,  1905,
       0,  1902,     0,     0,  1908,   840,   839,     0,   350,     0,
       0,   348,   328,   333,   318,   376,   318,   230,   229,     0,
     222,   298,   370,     0,   221,  2642,   318,  1480,  1478,     0,
    1898,   534,     0,     0,   547,  1600,     0,  1598,  1903,  1911,
    1910,   354,     0,   318,     0,   318,     0,   318,     0,     0,
       0,     0,     0,   217,   318,  2651,     0,  1906,   539,   537,
    1596,     0,     0,   346,   318,   334,   339,     0,     0,   225,
     299,   300,     0,   227,  2643,     0,  1914,  1599,   318,   318,
     335,   338,   377,   374,     0,   301,   223,   224,   235,   234,
       0,  1913,     0,  1918,   318,   318,   340,   243,   241,   318,
     231,   239,   233,     0,   240,     0,   228,     0,     0,  1925,
       0,   226,   242,   302,  1916,  1917,  1915,  1920,     0,     0,
    1922,  1923,     0,  1887,   232,  1924,  1919,     0,  1926,  1928,
       0,  1921,     0,  1161,  1927,     0,  1162,  1929
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    57,   605,  1481,    58,    59,    60,    61,    62,  1333,
      63,   817,  1265,  1798,  1799,    64,   548,    65,  1037,  1553,
    1554,  3080,  3081,  1555,    66,  2163,  3117,  4156,  3118,  4161,
    3119,  4163,  1572,   514,   515,  2006,  2007,  1062,  3101,  3067,
    3878,  3071,  3989,  4120,  4031,  2089,  3435,  3879,  3880,  3998,
     543,  2161,  1502,  4147,  1986,  4248,  1987,    67,   638,  1035,
    1526,  1527,  3453,  3454,  3706,  3455,  3698,  3699,  3700,  3701,
    4377,  4221,  4320,  4378,  4450,  4484,  4490,  4419,  4499,  4500,
    4501,  4488,   885,  4502,    68,   571,   572,   887,  1363,  1812,
    1364,    69,    70,   542,  1285,  1286,  1287,  1288,  2360,  1813,
    2355,  2356,  3252,  4420,  4486,  4505,  4222,  4223,  4127,  4224,
    4001,  4225,  4131,  4226,  4004,  4227,  4228,  4229,  4230,  4369,
    4231,  4126,  4412,  4218,  4219,  4371,  4466,  4481,  4232,  4011,
    4121,  4307,  4012,  4122,  4364,  4214,  4365,  4407,  4462,  4215,
    4308,  4410,  4311,  4233,  4239,  4379,  4234,  4240,  4235,  4016,
    4138,  4238,  4136,  4237,  4375,  4374,  4446,  2690,  3100,   625,
     626,   649,  2153,   627,  1051,  1008,  1504,  2019,  2020,  2541,
    2542,  2672,  2673,  2674,  2011,  2012,  2013,  2141,  2142,  2143,
    1993,  1994,  1995,  1508,  1990,  1991,   628,  1009,  1019,  2014,
    2015,  2016,  2678,  2145,  2146,  2147,  2148,  1253,  1254,  2956,
    2696,  3110,  3897,  3463,  4038,  4254,  3111,  3112,  2616,  3022,
    2099,    71,   560,   865,  1330,  2409,  1331,  2866,  2867,  2868,
    1848,  1849,  3791,  1853,  2408,  3947,  4177,  3948,  3949,  2870,
    4080,  2874,  3277,  3278,  3561,  3793,  3952,  4275,  4179,  4343,
    4273,  4339,  4274,  4341,  4433,  4391,  4392,  4189,  4288,  4289,
    4347,  4394,  4092,  4093,  4094,  2428,  2879,  3796,  3712,  2135,
    1494,  1495,   516,   517,   518,   646,  2697,  2074,  2698,  2699,
    3044,  2076,  2077,  2839,  1416,  3035,  3009,  3766,  3107,  3048,
    3049,  3050,  3051,  3052,  3058,  2973,  2551,  2552,  2621,  3061,
    3895,  3630,  3645,  3419,  3420,  3421,  3422,  3423,  3424,  3425,
    3152,  3153,  3150,  1116,  3841,  3842,  3843,  3146,  3147,  3679,
    3663,  3664,  3665,  3896,   780,  3859,  3497,  1384,  1385,  3959,
    1395,  1396,  2449,  1888,  2450,  1498,  3498,  3499,  3500,  3673,
    3207,  3763,  3213,  3214,  3215,  2802,  2803,  2804,  2805,  2806,
    2299,  3666,  3060,  3623,  3834,  3837,  3981,  4206,  2553,  2974,
    2554,  2977,   958,   519,  2555,  2556,  1586,  1587,  4041,  4049,
    4053,  4042,  4054,  4050,  4043,  4044,  4045,  4056,  4052,  2703,
    3713,  3714,  2966,  3223,  3983,    72,  1514,  1002,  1011,  1007,
    1027,   633,  1515,  1020,  2090,  2627,  3685,   615,  2078,  3615,
    3348,  3619,  2079,  2988,  2080,  3335,  3600,  2081,  3365,  3617,
    3831,  2989,  2990,  2082,  2083,  2084,  3347,  3357,  3973,  3233,
    3234,  3235,  2557,   127,  2347,  3056,  2600,    73,  1459,    74,
     972,   973,   974,  2499,  2500,  2942,  3327,  3592,   967,   968,
     969,  1961,  2497,    75,   641,  1559,    76,  1341,  2420,  2421,
    2422,    77,  1028,    78,    79,   642,  1566,  1567,  1568,    80,
    1326,   134,    81,   873,  1336,  1338,  1339,    82,   637,  1029,
    1030,  1031,  1032,  2095,    83,  1840,  2385,  2386,  2387,  2388,
    1523,  2629,  1524,  1525,  2104,  3270,    84,    85,   523,  1085,
     665,  2181,    86,   602,  2307,   577,   894,   578,   579,  1885,
    2443,  3767,   905,   906,   907,  2907,  1375,  1376,   667,  1602,
    2186,  1113,   781,   782,   783,   784,  1207,  1208,  3667,   785,
    1217,  1759,   786,   787,   788,   789,   790,   791,  1786,  3179,
    3180,  3516,  2334,  2335,  2336,   792,  2221,  3164,  2235,   793,
    1200,  1744,  1675,  3508,  3171,  1618,  2204,  2755,  2835,  2301,
    1138,  1139,  1103,  2211,  1624,  1593,  1594,  1595,  1596,  1597,
    3479,  3478,  3480,  3908,  3720,  3910,  3724,  2179,  1868,  1869,
    1598,  1599,  2708,  3718,  4057,  2302,  2303,  2304,  3534,  2709,
    3123,  2725,  2726,  3730,  2170,  1600,  2715,  4169,  3916,  3917,
    4266,  4265,  3918,  3728,  3729,  3481,  3482,  3076,  3077,  3078,
    2893,  1665,  1666,  1673,  1313,  1314,  1619,  2383,  2855,  3803,
    3956,  2325,  3579,  3954,  4099,  2087,  3017,  3018,  2445,  2446,
    2948,  3332,  3362,  1419,  3768,  2857,  1934,  1935,  3732,  4489,
    2957,  2645,  4282,  2405,  2406,  4194,  4351,  4436,  4437,  3305,
    3306,  3583,  3584,  2447,  2904,  3307,  3804,  4104,    87,   525,
      88,  1796,  2340,  2838,  1262,  2352,  1039,  1343,  1605,  1606,
     805,   538,  1255,  1256,  1257,    89,   549,  2384,    90,   567,
    1866,   857,   877,  1344,  1345,  2429,  2880,  2887,  2430,  2892,
    3570,  2882,  3282,  3283,  2342,  2343,  2883,  3285,  3567,  3551,
    3552,  3265,  3788,    91,   590,  3329,  2943,  2944,  4171,  4172,
     878,    92,   524,  1090,  2733,  1611,  2192,  1091,  1092,  2195,
     671,   672,    93,   976,   587,  1441,  1442,  1443,  1950,    94,
     581,   959,  2928,  2934,  1929,   869,  1258,  1423,   962,  1424,
    1915,  2478,  1405,    95,   998,   997,  1489,    96,   611,  1490,
      97,   818,  1279,  1808,  2843,  3238,  3542,  1280,  1281,  2353,
      98,   568,   882,   883,  1348,  1871,    99,   562,   870,  1859,
     100,   553,   101,   102,   861,  3271,  4269,  4387,   557,  1842,
    1322,  3464,  4196,  4297,  4298,  4300,  4359,  4360,  4430,  4493,
    4516,  4509,  4519,  4520,  4523,  4528,  4529,   795,   983,   796,
    3825,   797,   798,   799,  2888,  2889,  3333,   800,  2890,   801,
    2967,  1040,  1608,   546,   494,  2634,   622,   984,  2863,   803,
    4018,  1005,  1055,   496,   497,   103,   580,   921,  1400,  1390,
    1399,  1908,  2466,  1912,  2468,  2469,  3316,  2924,  3317,  2925,
     963,  1904,  1909,  2926,  1913,   924,  1897,  1898,  1899,  1900,
    2917,  1894,  2475,   104,   862,   501,  1324,  1325,  2394,   105,
     589,   106,  1315,  1836,  1837,  2380,  2854,  2381,   107,   890,
     108,   844,  1830,   845,  1291,   846,   847,  1305,  1299,  1308,
    1302,  3935,  3780,  3781,  2368,  1261,  1056,  1057,  1822,  2362,
    2363,  3546,  3783,  3256,  3941,  3942,   109,   135,   504,   644,
    1046,  1369,   110,   111,   112,   113,  1372,  1476,  2439,  1477,
    2308,  1478,  1479,  1972,  1883,  1740,  1741,  3221,  1197,  1198,
    2311,  2811,  2812,   908,   653,  1072,  1064,   128,   129,   130,
     656,   657,   131,  1025,  1026,  2628,  3073,  3437,  3688,  3689,
    3884,  4026,  4022,  4023,  4020,  4025,  1066,  3891,  4327,  4454,
    1067,  1068,  3102,  3893,  4151,  4329,  4426,  1069,  2687,  3450,
    4027,  4250,   114,   985,   599,  1474,  1469,  1471,  1968,  2504,
     115,   116
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3431
static const int yypact[] =
{
    4390,  2294,  1389, -3431,  -196,   792, 47406,    82,  1499,  1499,
     484,  3485,   982, -3431, -3431, -3431, -3431, -3431,  3401, -3431,
   47406,  1389,  1084, -3431, 23975, -3431, -3431,   771,   150,   253,
    1499,  1389, -3431, 47406, -3431,   770,  1435,  1389, -3431, -3431,
   41246, -3431,   484, 47406, -3431, -3431, -3431, 41246,  -129,   810,
     720,   965, -3431, -3431, 47406,  2272,  -163,  1413,  1340, -3431,
   -3431,  1050, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, 20252, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431,  1349, 47406,  1512,
   47406, -3431,  1522, 47406, 39398, 47406, -3431,  1005,  1539, -3431,
   -3431,  1608, -3431, -3431,  1499,   484, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  1100, -3431, -3431,  1236, -3431,
   -3431, -3431, -3431, -3431,  1794,  1642, -3431,  1638, 39398, -3431,
   47406, -3431, -3431, -3431,   239, -3431,  1307, -3431,  1352,  1712,
    1720,  1726, -3431,   302,   914, 10783,  1739,  1739,  1739, 47406,
    1771,  1739,  1739, 47406, -3431,  1739, -3431,  1739,  1499, -3431,
   -3431, -3431,  1871,  5410, 47406,  1643,   160,  -134, 39398,  1384,
   47406, -3431, -3431, 10783, -3431,  1770, -3431, -3431, -3431,  1499,
    1974,  1864,   240, 47406, -3431, -3431,  1499,   906,    31,  1454,
   -3431, -3431,  1585, -3431,  5477,   138, -3431, -3431, -3431,  1463,
   25832,  4525,  1585,   -58,  -125,   -58, -3431, -3431, 47406,  1499,
    1785, -3431, -3431,   229,   229,   229, -3431,   229, -3431,   229,
   -3431,  -163,  1459, -3431, -3431,  1436, 47406,   982,  1584,  1946,
    1595, -3431, -3431,  1476,   881, -3431,  1520, 36318, -3431, 47406,
   -3431, -3431, -3431, -3431,  1750, -3431, -3431, -3431,  1527, -3431,
   36318, 23975, 47406,  1617, -3431, -3431, -3431, 23975,  1498, 47406,
   -3431, 23975, 23975,   293,  1175,  1706, 47406, 47406,  1948, -3431,
    2147, 36318,  1692, -3431,   472,  1049,  1608,  2137, -3431,  1642,
   -3431, 47406, 47406, 47406, -3431,     3, -3431, 10783, -3431, -3431,
   -3431, 41862,   914,  1535,  1548,  1556, 15242, -3431,  1576,  1590,
    1597, 10783,  1603,  1615,  1631,  1659,  1664,  1673,  1685,  1687,
    1694,  1694,  1700,  1718,  1729,  1732,  1214,  1745, -3431,  1754,
    1756,  1777, -3431, -3431,  1808,  1811,  1820,  1823, -3431,  1826,
    1828,  1841, 11420,  1851,  1861, -3431, 20871,  1875,  1879,  1899,
    1902,  1904,  1907,  1913,  1915,  1917, -3431, -3431, 10783,  1700,
   -3431, -3431,  1923, -3431,  1933,  1949,  1960,  1963,  1968,  1982,
    1998,  2007,  2025,  2028,  2030,  2039,  2042,  2049,  2054,  2061,
    2068,  1700, -3431,  1220,  2074,  2077,  1282,  2081, -3431,  2086,
   -3431,   277,  2095,  1694,  1700,  1700,  2104,  2109,  2114,  2116,
    2119,  2123, 15242, 15242, 15242, 10783, -3431, 47406, -3431, 47406,
   -3431,   499,  3199, -3431,  2570, 15242,   950, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,  1537,  1629, -3431, -3431, -3431, -3431,
   -3431, -3431,  2125,  1630,  2107, 47406, 47406, 47406,  1972, 47406,
   47406, 39398,   855, 47406, 36318, -3431,  1739,  1778,  3780, 28922,
    1969,  1850,  2249, -3431, -3431, -3431, -3431, -3431,  1927, -3431,
   -3431,  1856, -3431,  2016, -3431, -3431,   132, -3431,    90, -3431,
   -3431, -3431, -3431, -3431, -3431,  2036,  1766, -3431, -3431,    94,
   -3431, -3431, 47406, -3431, -3431, -3431, -3431,  2225,  1975,   499,
    2448,   209, 23975, -3431,  1534, -3431,  -194, -3431, -3431,  2281,
   -3431, -3431, 36318, 23975, -3431, -3431, -3431, 21492, -3431, -3431,
    2455, -3431,  1887, -3431, -3431,  1629,  3363, -3431,  1969,  2177,
   -3431,  2224,  2183,  1175,  2184, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  2144,  1463, -3431, -3431,   443,
    2290,  2146,   502,   515, 33854,   842,   529,   759, 26450, 34470,
    2162, -3431, -3431, -3431,    91, -3431,  2627, -3431,    -5, -3431,
    2172,  2157,    -5, 36934,  2544,   194, -3431,   370, -3431,  2629,
   -3431, -3431, -3431, -3431,  2296,  2288, -3431, -3431,   376,  2491,
   -3431,  2656, -3431,    43, -3431,  2310,  2544,    -5,   194, -3431,
    2579,  2709,   826,  1285, -3431, -3431, -3431, -3431,  2234, -3431,
     -10,  2792, -3431,  2246, -3431, -3431, 23975, -3431, -3431,  2225,
   -3431, -3431, -3431,  2251, -3431,  2516,  2361, -3431, -3431,   119,
   -3431,  2265,    26,  2749, -3431,   302, 39398,  1801, 37550, -3431,
   -3431, -3431,  2784,  2801,  1694,  2271, -3431, -3431, -3431,  2909,
   -3431, -3431,  2295,  2826,  2826,  2826,  2936, -3431, -3431, -3431,
    2325,  2572, -3431, -3431,  2494,  2358, -3431,  1617, 23975,  2726,
    2338, -3431, -3431,  2594, 10783, -3431, -3431,  4349,    42, -3431,
   -3431,   146, -3431,  2929,  2554, -3431, -3431, -3431, -3431,  2821,
   -3431, -3431,  2909,  2887,  2826,  2776,  2364, -3431, -3431, -3431,
   -3431, -3431, -3431,  1540, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431,  1721, -3431, -3431, -3431, -3431, -3431,  1617, -3431, 23975,
   -3431, -3431, -3431,   584, -3431, -3431,   499, -3431,  2363, 23975,
   -3431,  2370, -3431,  2366, -3431, 10783, 10783,   311,  2939,  2997,
    2997,  2997,   499,  2403, 10783, 10783, 10783, 10783, 10783, 10783,
   10783,  1193,  2379, -3431, -3431,   -88, -3431,  2380, 10783, 10783,
   -3431, 10783, 10783, 24594, -3431,  3166, 10783, 10783,   412,  2877,
   10783, 10783, 10783, 10783,  3120, 10783, 10783, 24594,  3008,  2384,
   -3431,  2383,  1230, 10783, 10783,  1305, 10783, 10783, 10783, 10783,
   10783, -3431, -3431, 10783, 10783, 10783, 10783, 15242, 10783, 10783,
   10783, 10783, 10783, 10783,  2394, 10783,  2997,  2997, 10783, 10783,
    1500, -3431, -3431, 10783,  2142,  2142, -3431, 10783,  7598, 10783,
   -3431, -3431, -3431,  2395, -3431, -3431, -3431, 24594,  2997,  2997,
   10783, 10783, 10783,  2939,  2939,  2939,   316,  2398,   686, 10783,
   27068,  2385, -3431, -3431, -3431, -3431, 10783, 10783, 10783, -3431,
   15242, -3431, -3431,  1078, -3431, -3431, -3431, 12057, 15242, 15242,
    2401, 15242, 15242, 15242, 15242, 15242,  2770, 15242, 15242, 15879,
   16516, 15242, 15242, 15242, 15242,  1174,  2939, 39398, 15242, 10783,
   -3431, -3431, 47406, -3431, -3431, -3431,  2396, 23975,   855, -3431,
   -3431, -3431, -3431, -3431, -3431,  2409,   855, -3431,  2882, -3431,
   -3431,  2410, 23975, -3431,  2406, -3431,  2777, -3431,  2778,  2780,
    2783, -3431, -3431, -3431,  2998,  2790, -3431,  2793, -3431, -3431,
    2434, -3431, -3431, 17153, 39398, -3431,  2436, -3431,  2916, -3431,
   -3431, -3431, -3431, -3431, -3431,  2538, -3431, -3431, -3431,  2445,
   -3431, 36318,  2445, -3431, -3431,  2445, -3431, -3431,  2445,    30,
    3473, -3431, -3431, 47406, -3431, 48022, -3431, 21492,  -196, -3431,
   -3431, -3431,  2809,   210,  2447, -3431, 23975, -3431,   103,   103,
    2700,  1293, 39398, -3431, -3431,   189,  2449,  2533,  2459, -3431,
    2539, 23975, 23975, -3431, -3431, -3431,  2711, -3431,  3085,    31,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  2465,  2944,  2472, 36318,   937, -3431, 47406,
   -3431,  1544, -3431, -3431, -3431,  2473, -3431, -3431, -3431, 47406,
   -3431, -3431, -3431, -3431, -3431,  3050, 10783, -3431, 36318,  1097,
     781,  1044,    91, -3431, -3431, -3431, -3431, -3431, 47406, 42478,
    2488, -3431,  2883,  -196, 10783, -3431,  2497,  1642, 47406, 47406,
   47406, 23975, 47406, 23975, -3431,  1216,  1216, -3431, 35086, -3431,
   -3431, -3431, -3431,    -5, 47406, 47406,    -5, 36318, -3431,   194,
   47406,    -5, -3431,  2884,  2589, -3431, -3431, -3431,  2952, -3431,
   -3431,  2945,  2504, -3431,  2883, -3431, -3431,   194, -3431, -3431,
   23975, -3431, -3431,   194, -3431,   194,   194,    -5,    -5,  2556,
     -58, -3431, -3431,  2649,  -125, -3431,   584,   229,  2752, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,    75,
   -3431, -3431,     3, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,   191, -3431, -3431, -3431,  1925,  3011,
   -3431, 39398,  1589,  -112,  1707,  1589,  1262,  -196,  1465, -3431,
    1465, -3431, 36318,  2970,  2603,  2782,   218, 23975, -3431,  2512,
   43094, 23975, -3431, -3431, -3431,  1609,  2519,  2515,   499,  3000,
    3001,  3004,  3005,  3006,  3012,  3013,  3015,  3018,  3021,  3022,
    3026,  3029,  3030,  3031,  3033,  3052,  3053,  3055,  3056,  3057,
    3061,  3062,  3067,  2520, -3431, -3431, -3431, -3431, 23975, -3431,
   -3431, -3431, -3431,  2643, -3431, -3431, -3431, -3431,  2244, -3431,
   -3431, -3431,   225,  2577,  2623,  2650,   124, 36318,  3044, 47406,
   47406,  1642, 47406, 47406, -3431, -3431,   677,  2874,  2888,  2890,
   -3431, -3431, 47406,  2323,  2634, -3431,  2614, -3431, -3431, 23975,
   -3431, -3431, 40014, -3431, 30774,  2619, -3431,  2711, -3431,  -219,
   47406,  3066, 31390, -3431,   414,   749, -3431,  2997,  2625, -3431,
    2630,  2631,  2636, 10783,    62,   479,   923,  -215,  1531,   955,
     462,   323, -3431,  2638,  2633, -3431,  2639, -3431, -3431,   467,
     483,   971,  1095,  2641,  2644, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  3071, -3431,   509,  1552, -3431,
   -3431, -3431, -3431,  2652, -3431, -3431,  1105,   513,   532,   321,
    2657,   632,  1565,  1591,  2655, 24594, 47406,  2997,  2658,  1123,
    1138,  2997,  2659,   651,  1147,  1616,  1689,  1695,  1166,  1176,
     688,  1709,  2844,  1194,   802,   852,  1207,   869,   901, -3431,
    1232,  2660,  2662,   915,   364,  2997,  2663,   339,  2666,  2668,
    1244,  8872,  9509, 10146,   865,   928, -3431,  2670, -3431,  2383,
    2672,  2678,   346,   192,  1249, -3431, 10783, -3431, -3431,   757,
      84,  2698,   131,  1044, -3431,  2810, 47406,  2343,   170, -3431,
   -3431, -3431, -3431, -3431, -3431,   958, -3431,  2676, -3431,  2683,
    2008,  2686, 10783,   908,  2686,  3385,  1686,  1686, 15242,  2487,
    2576, 11420,  1011, 11420,  1011,  2686,  2686,  2686, -3431, 15242,
    2688, 15242, 15242, -3431,  2939,   499,  2690,  -240, 47406, -3431,
    2409,   -82, -3431,    91, 36318,   102, 23975, 39398,  2693, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431,  4032, 23975,  2781,
    2785,  2786, -3431, 29540, -3431, -3431, -3431, -3431, 29540,  1066,
   -3431, 47406, -3431,  2766, -3431, -3431, -3431, 22111, 22111, -3431,
   22111, -3431, -3431,    23,   296,  3388,  2721, -3431, -3431, -3431,
   23975, -3431,  3103,   -61, 23975,  2512,  2707, -3431, -3431, -3431,
   -3431, -3431,  1408,  2811, -3431,  2712, -3431, 10783,  -196, -3431,
   36318, 36318, 23975, 23975,   773, -3431,  2227,  2715, -3431, -3431,
   -3431, -3431, -3431,  3363, 17153,  3141,  3157, 22111, 22111, 22111,
   -3431, -3431, -3431, -3431, -3431,  1342, -3431, 38166, -3431,   499,
      91,  2717,  2718, -3431, -3431,  3089,   664, -3431,  2719,  2720,
   -3431,  2723,  2728,  2730, 43710, 10783, -3431,   781, -3431, -3431,
      91, -3431, -3431,  8235,  -196,  3164, -3431,   499,  2733, 47406,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,   -81, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,    -5, -3431, -3431, -3431, -3431, -3431,  2958,
    2544,  2491,  3164,    -5,   194, 23975,    -5,    -5, -3431, -3431,
    2876,  2798, -3431, -3431, -3431,  2902,  2753, -3431,  3200,  3343,
    2544, -3431, -3431, -3431, -3431,    91,    91,  3049, -3431,  -196,
    2885,  2889,  2891,  2892,  2893,  2923, -3431, -3431,  -196,  -196,
   -3431, -3431,    91, -3431,  1903, -3431, -3431, -3431, -3431,  -196,
    -196,  -196,  -196,  2135,  -196,  -196,  1741, -3431, -3431,    91,
      91, -3431,   159, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
    1045, -3431,  3003, -3431,  2612,    91,  3327,  3017,    91,    91,
    3327,    91,  3019,  3023,    91,    91,  2842,  3280,    91,  3169,
    2881,  2645,  3172,    91,  3036, -3431,  2894,  3291,    91,    91,
      91,    91,    91,  3327,  3040,  3383,    91, -3431,    91,  3043,
    3048,   224,  3045,  3051,    91,    91,    91,    91,   197, 47406,
      91,  3064,    91, -3431, -3431,  3454, -3431, -3431, -3431, -3431,
   -3431, -3431,  1308, 22733, -3431, -3431, -3431, -3431,   528, -3431,
    3016, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  2807, -3431, -3431, 10783,  2808,  2135,  -196,
    2135,  2135,  -196,  -196,  1250,  -196,  2135,  2135,  -196,  -196,
    -196,  -196,  -196,  -196,  -196,  2135,  2135,  -196,  2101,  -196,
    2135,  4349, -3431, -3431, -3431, -3431,   244,    91,    91,    91,
      91, -3431,  2291, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, 39398,  3178,  1941,   934, 39398, -3431, 47406, -3431,   384,
   47406,  2824,  -127,  5053,   156,   156, -3431, 23975, 23975, 23975,
   -3431,   783,  3208,  3213, -3431,  3086,    57,  3086,   783,   783,
   10783, -3431,   584,  2711, -3431, 44326, -3431, -3431, -3431, -3431,
    -229, 47406,  2886, -3431, 31390, -3431, -3431,   584, -3431,  2835,
   12694, -3431,  2833, -3431, 10783, -3431, -3431, -3431,   410, 10783,
   10783,  3326,  1958, -3431, 38782, -3431, -3431, -3431, 10783, 38782,
    1958, 10783, -3431,  2845, -3431,  3245,  3247, -3431, -3431, -3431,
   -3431, 10783, 10783, -3431, 10783, 10783, -3431, 10783, 10783, 10783,
   10783, 10783, -3431, -3431, 15242, -3431,  2846,  2851, -3431, -3431,
   -3431,  2855, -3431, 10783, -3431, -3431, -3431, -3431, -3431, -3431,
   10783, -3431, 10783, -3431, 10783, 10783, -3431, 10783, 10783, -3431,
   -3431, -3431, 13331, 10783, 10783,  2862, -3431, -3431, 10783, 10783,
   10783, -3431, 10783,   959, 10783,  1906, 10783,  1911, 10783, -3431,
   10783, -3431, -3431, -3431, -3431, 10783,   343,  1408,  2135,  2866,
   -3431,  1758, -3431, -3431,  1613, -3431,   757,  2869, -3431, -3431,
    1544, -3431, -3431, 39398, 10783, -3431, -3431, -3431, -3431, -3431,
   -3431, 15242,   378,  2870, 15242, -3431,  3385,  3120,  3120,  2319,
   10783,   908,  3385, 10783,  2871,  2875, -3431, 10783, 47406, -3431,
   -3431, -3431, -3431, 39398, -3431, -3431, -3431, -3431,   102, -3431,
    2406, -3431,  2512, -3431,  3351,  2896, -3431, -3431, -3431, -3431,
   -3431, -3431,  1763, -3431, 36318,  2880, -3431,  2898,  2953,  2959,
    2963, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  2544,  2227, -3431,  2897, -3431, -3431,  2594,
    2977,  2910,  3255, -3431, -3431, -3431, 47406, 15242, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431,  3481,  2901,  2912,
   47406,   499, -3431,  2976, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431,   999, -3431, -3431,  2917,  2917, 19012, -3431, -3431,
   -3431, 47406,  3393, -3431,  3170, 36318,  3360,  3361,  3364,   954,
   -3431,   409, -3431,  1441,  3319,  2544, -3431,  3366, -3431, -3431,
   -3431, -3431,  1097,  3020,  3024,  1121, -3431, -3431,  3313,  3142,
   -3431, -3431, -3431,    91,   499, -3431,  2488,  8235,  2930, 27686,
   -3431, 15242,  1754, -3431,   499, -3431, -3431,  1250, -3431,    22,
   -3431, 35086, 35086, -3431,  3203, -3431, -3431, -3431, -3431,  2721,
     194, -3431, -3431,  3409, -3431,  3413, -3431,  2940,  3420, -3431,
    3189, 24594,  2135,  3258, -3431, -3431, -3431, 38166, 35702, -3431,
   -3431, -3431, -3431,  3483, -3431,  3484,   976, -3431, -3431,  2055,
     791, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431,  1262,  2055,  2055,  1179,
   -3431,   117, -3431, -3431, -3431, -3431,  3421, -3431, 25213,  1389,
   -3431,   259, -3431, 25213, -3431,  1609,  1609, -3431, 44942, 25213,
    1389,  1250,  2135, 25213,  2135, 45558,  1389,  -196,  -196,  2346,
      91,  2135, -3431, -3431,  3341, 47406,  3344, 25213, 25213, -3431,
   39398, 47406, -3431,    91,   134,  2135, 46174,  1250,  1250, 25213,
    1389, 24594,  1442, -3431,  -196,  1389, -3431, -3431, -3431, -3431,
   23975,  1389,  1389,  2277,  2642,  2675,  2800, -3431, -3431, -3431,
    2135, 45558, -3431, -3431,  6047, -3431, -3431, -3431, 18393, 47406,
    1122,   860, -3431,  2962,    19,  1013,  3041,  1473,  2966,  2972,
   46790,   499,  2135, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  -196,  1408,  2055,  2055,  2015, -3431,  3234,
    3403,    91, -3431,  1930, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  3063, -3431,  3590,  3160,  2980, -3431, -3431,
     357, -3431, -3431,   935, 23975, 17774, -3431,  3226, -3431,  3191,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  -206,    84,
   -3431,  1702, -3431, -3431, -3431,  3369,   783,  3086,  3086,  3370,
    3254,   809,   499, -3431,  1889, -3431,  1463, -3431, -3431, 32006,
   -3431,  2981,   584,  2721,  1376,  2721,  2995, -3431, 11420,  1256,
   -3431,   499, 10783,   499,  1895, -3431,  2991,  2991,  2993, -3431,
    2994,  2991,  3389,  2993,  3391,  2999,  3009,  1272,  3014,  3027,
    1537, -3431, 10783, 10783,  1280,   383,  1297,   667,   946,   980,
     456, -3431,  1322,  3297, -3431, -3431,  1324,  1331,  1359,  1381,
    1042,  1414,  1817, 11420,  1419,   314,   458, -3431,  1461,  1051,
    1091,  1492, 10783,  1510, 10783,  1612, 10783,  1620,  1632,  1649,
    3007,  3007,   180, -3431,  3002, -3431, -3431, -3431,  3028, -3431,
   -3431,  2144,  1613, -3431, -3431,  3032, -3431, -3431,  3034,   499,
    3035, -3431, -3431, 10783, -3431,   950, -3431, -3431, 15242,   460,
    3037, -3431,   499, -3431, -3431,  3046,  1537, -3431,   975, -3431,
   -3431, -3431, -3431,    17,  3499, 29540, -3431, 47406,  -220,  3025,
   32622, 36318, 36318, 36318,  3054, 10783, -3431, -3431,  3265, 23975,
   -3431,  3415, -3431, -3431, -3431, -3431,  3058,  3059, -3431, -3431,
   -3431,  3385,  3375,  3261, -3431, -3431,  3068, 36318, -3431,  1463,
   24594, -3431,  3065, -3431,  3065,  1180,  3070,  1838, -3431, -3431,
   -3431,  3047,  2184,  1858, -3431, 17153,  3463,  2364, 36318, 36318,
   36318, -3431,  2721,  2721,   845,  3072,  3405, -3431, -3431, -3431,
   -3431, -3431,  3078,  3080,   270,  3237, -3431, -3431, -3431, -3431,
    8235, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  2544, -3431,
   -3431, -3431, -3431, -3431,  2544, -3431,    -5,  -196,  -196,  1568,
    -196,  3500,  3538,  3081, -3431,    91, -3431, -3431, 10783, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  1045, -3431, -3431, -3431, -3431, -3431,  3060,
    3414,  3417,  1609, -3431, 25213, -3431, -3431, 25213, 25213, -3431,
   -3431,    71, 45558, -3431, -3431, -3431, -3431, -3431, -3431,  3082,
   -3431, -3431,  1408, -3431, -3431, 35702,  -196, -3431, 25213,  3082,
   -3431, -3431,   454, -3431,  3073,  -196, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, 45558,  3083, -3431,  1420,
   -3431, -3431,  1974, -3431, 45558, -3431, -3431, -3431, 45558, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,  3087,  2689,   190, -3431,  3088,  3092,
   -3431, -3431, -3431, -3431, 47406, -3431, -3431, 23975, -3431, -3431,
   -3431,  5514, 47406,  3266, -3431, 10783, 10783,  3311, 47406,  3318,
   -3431,  3615, 47406,  3672, 45558, -3431,  3094, -3431,  3095, -3431,
    1876, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  3090, 47406,
    2055,  2392, -3431, -3431,  -196,   935, -3431, -3431, -3431, -3431,
    3330,  3338, 47406, -3431, -3431, -3431, -3431,  3235, -3431, 23975,
   -3431,  3262, -3431,  3098,   815,  5507, -3431,  3110,  3112,  3113,
    1544,  2452, -3431,   584, -3431,   783, -3431,  3497,  3501,   783,
   -3431, -3431, -3431, -3431,  2144, -3431, 31390,  2721,  3373, -3431,
   -3431,  3120, -3431,   499, 10783,   801, -3431, -3431,   251,  3392,
   -3431,   949, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,  3116,  3120,  3120, -3431, -3431, 10783,
   -3431,  3279, -3431, 10783, 10783, -3431, 10783, -3431,   909,  3125,
    3143, -3431, -3431, -3431, -3431, 10783, -3431, -3431,  3120, -3431,
   10783, -3431, -3431, 10783, -3431, 10783, 10783, -3431,  1667, -3431,
    1674, -3431,  1676, -3431, -3431, -3431,  1408,  3126,  3503, -3431,
   -3431, -3431,  1408,  3308, -3431, -3431,  1408,  2135,  2473, -3431,
   -3431,   686, 47406, -3431, -3431,  1926, -3431, -3431, 10783, -3431,
   40014, -3431, -3431, -3431,  3488,  3753, -3431,  3348, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  3566, -3431, -3431, -3431,  -147,
    -147,  -147, 13968,   499,  3626, -3431, -3431, -3431,  3415,  3514,
   -3431,    55, -3431, 47406,  3144,  1626, -3431,  1942, -3431, -3431,
   -3431,  2144,  3140, -3431,    91, 13968,  2917,  3262, -3431, -3431,
    1180, 24594, 30774, -3431, -3431, 47406, -3431, 36318,  2364,  2364,
    2364,  2544,  3571,  2977,  2977, -3431, 28304, -3431, -3431,  3300,
   -3431, -3431, -3431, -3431, -3431, -3431, 27686, 43710, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  -196,  3627,  3396, 24594,  2721,
   13968,   499,  3149,  1420, -3431,  -132, 10783, 25213, -3431, -3431,
   -3431,  3161, -3431, -3431,  3667,  3670, -3431, 25213,  2244, 47406,
   -3431,  3050, -3431, -3431, -3431,  3253, -3431,  5514, -3431, 24594,
   -3431, -3431, -3431, -3431, -3431, 47406, -3431, 23975, -3431, 18393,
   -3431,  3163, -3431,  2991,  2991,  2991, -3431, -3431, -3431,  2993,
   -3431,  2994,  3397, -3431,  2994,  2994, -3431, -3431, -3431, -3431,
   -3431,   251,  1660, -3431, -3431,   251, -3431, -3431, -3431,   125,
    1421,  2994, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  2991,
    2993,  2993, -3431, -3431,   251,  2991, -3431,  2991,  2413, -3431,
     243,   127,  2991,  2991,  2991,  3165,  3158, -3431,   499,  3120,
    3722, -3431, -3431,  3314,  -196,  3663, -3431,  1953, -3431,  3171,
   -3431, 46790, -3431,  2135,  1262, -3431, -3431, -3431, -3431,  3312,
    1610, -3431,  3342,  3177,  3180, -3431, -3431,  -196,  3182,  3184,
    3454, -3431, -3431, -3431,  3800, -3431, 47406, 47406, 47406, -3431,
   -3431,  2614,  2256,  3229,   783,   783,  2904,  3230, 10783, 10783,
    3190, -3431,     7,  2473,  2835, -3431,  3558,  -221,   499,  3193,
    3194,  3198,  3202,  3791,   246, -3431,  3799, 38782, -3431, -3431,
   -3431,  3204,  1964, -3431,  3206,  3209,  1714,   229,  3212,  1736,
    1093,  1973,  3511,  3579, -3431,  3433, -3431,  1757,   426,  1762,
    1768,  1792,  1816, -3431, -3431, -3431, -3431, -3431,  3214, -3431,
   -3431,   222, -3431,  3215,   174,    84, -3431, -3431,  1986, -3431,
   -3431, -3431,  3676,  3576,  3479,   848,  3242,  3242,  3242,  1754,
     499,  1993, -3431, -3431, -3431, -3431,  3616, -3431, -3431,  3222,
    3223, 47406, -3431,  3261,  2473, 24594, 13968,  3225,  3228, -3431,
      26, -3431, -3431,  3216, -3431, -3431,  2364, -3431,  3814,  3654,
   -3431, -3431, 39398,  3231, -3431, -3431,  3534, -3431, -3431, -3431,
    -196,  3713, -3431, -3431,  3373, -3431, 10783, -3431,  1408,  3261,
   -3431,  1844,  3239,  3240, 47406,  3241,  3243, -3431,  2620,  1122,
   -3431, -3431, -3431, 23975,  2413,  1389, -3431, -3431,  3082,   999,
    3248, -3431, 47406,  3567, -3431, -3431, -3431, -3431,  1223, -3431,
    3244,  1223,  1223, -3431,  2290, -3431,  3282,   251, -3431, -3431,
    3285, -3431, -3431, -3431,  1223,  3256,   251, -3431, -3431, -3431,
   -3431,  1223, -3431, 39398,   265,  -196,  2750, -3431,  3302, -3431,
    3768,  1495,  3642, -3431,  2413, -3431,  3644,  3539, -3431,   251,
   -3431, -3431,  3864, -3431,   251,  3864,  1223,  3540, -3431,  1223,
   47406, -3431, -3431, -3431, -3431, -3431, -3431, 47406, -3431,   970,
   -3431, -3431, -3431,  2011,  -196, -3431, -3431, -3431,  3269,  3270,
   -3431, -3431, -3431,  1013, -3431, 47406,  5514, -3431, -3431, -3431,
    3226, -3431,  1074,  2020,  1420,  3271,  2034,  2046,   686, -3431,
    3315, -3431, -3431, -3431,  3321,   499,   499, 47406, -3431,   988,
     174, 35086, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, 38782, -3431,  3864, -3431,  3552, -3431, -3431, -3431, -3431,
   -3431, -3431, 10783, -3431, -3431,  3586,  3747, -3431, -3431, -3431,
   -3431, -3431, -3431,  3286, -3431,  2135,  1441,  1441, -3431, -3431,
   -3431, -3431, -3431, -3431,  3371,  3381, -3431, -3431,  3382, -3431,
   -3431,   129,  2128, -3431, -3431, -3431, -3431, 13968,  3678,  3390,
   -3431, -3431, 47406,  3339, -3431, -3431,   174, -3431, -3431, -3431,
   -3431, 10783, -3431,  3373,  2346, -3431, 28304, -3431, -3431,  -196,
    3558,  1420, -3431,  2087, -3431, 47406, 47406,  2100, 47406, 47406,
    2781,  2785,  2786,  2101,  2101, -3431, -3431, -3431, -3431, -3431,
   -3431,  3697, -3431, -3431,  2120, -3431,  1065,  3570, -3431, -3431,
   -3431, -3431,  1223, -3431,   229, -3431, -3431, -3431, -3431, -3431,
     229, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431,  3587,  3346, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  3310, -3431, -3431,  3432, -3431,
   53566, -3431, -3431,  1099,  3337, -3431, -3431, -3431, -3431,  1648,
   47406, 23975,  3311,  3502, -3431,  3050, -3431,    26,   815,  3262,
   -3431,   118, 47406, -3431,  3592,   200,   207, -3431, 10783,  3322,
   10783,  3323,  2141, -3431, -3431,  1609,  1609, -3431,   988, -3431,
   -3431, -3431, -3431,  3317,  1885, -3431, -3431, -3431,  3325, -3431,
   -3431, -3431, -3431, -3431, -3431,   320,  3588,  2135,  2135,  2135,
    2135,  2128, -3431, -3431,  3378, 23975, 15242,  3430,  2143, -3431,
   -3431,  1480,  2822, -3431,  1489,  1420, 10783,  2544, 35702, -3431,
   -3431, -3431, -3431, -3431, -3431,  2148,  2150,   118,  2158,  2174,
   -3431, -3431, -3431,  1122,  3332, -3431, 47406, -3431, -3431, -3431,
     309, -3431, -3431,  2179, -3431,  2190, -3431, -3431, 10783,  3815,
    3359, 47406,   112, -3431, 54798, 54798, 47406, -3431, -3431, -3431,
   -3431,  4897, -3431, -3431,   864, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431,  3938, -3431,  3333, -3431,
   -3431,  1099,  3340, -3431,   236, -3431,  2184, -3431, -3431,  5514,
    3787,  1473, -3431, -3431, -3431, -3431, -3431,  3345,  2184,  -196,
      91, -3431,   118, -3431, -3431, -3431,  1420,  3347,  3594, -3431,
     200, -3431, -3431, -3431,   207, -3431, -3431,    84,   499, 47406,
     499, 47406, -3431,  3794,  3794, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, 24594,  2711, -3431,  1408,
   -3431, -3431, 47406, -3431,  3434,    91,  3852,  3853,    91,    91,
      91,    91,  3355,  2822, -3431,  3835, -3431, -3431, 10783, -3431,
   -3431,   499,  3593, -3431,  3922,  3573,   118, -3431,   200,   207,
   -3431,  3261, -3431,   902,   902,   251,   229,   251,   499, 10783,
   -3431, 10783,  3394, -3431, -3431,  3806, 47406, -3431, -3431, -3431,
   -3431, 10783, -3431, 53566, 53566, -3431, -3431, -3431, -3431,  3970,
   -3431,  3372,    26,  3941,  3632,  3946, -3431,  3187, -3431, -3431,
    3615,  5514, -3431, -3431, -3431,  2135,   975, -3431, -3431, -3431,
    1710,   975, -3431,   975, -3431, -3431,  2208,  2216,   936, -3431,
   -3431,  3384, -3431,    91, -3431,  3387, -3431,  3430, -3431,  3395,
   -3431,  -196,    91,    91,  2315,  2315,  1408, 39398,  3487, -3431,
   -3431,    91,  1420,  4008, -3431,  1036,  3755, -3431, -3431, -3431,
   -3431,  2233, -3431,  4019, -3431,   891,  3662,  3664, -3431, -3431,
   -3431,   499,   499, -3431,   257, -3431, -3431,  3796,  3880, 10783,
     499, 50486,  3398, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, 54182, 10783, -3431,   864,
    3938, -3431, -3431,  3665, -3431,  3666, -3431, -3431, -3431,  3908,
   53566, -3431,  3900, -3431,    26, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431,  3995, -3431,  3997,  3412,  3418, 24594, 13968,  2346,
   -3431, -3431,  3419, -3431, -3431,   -50, -3431,  -196,  -196, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  2245, -3431,
   39398, -3431, -3431,  3999,  4000,  3897,  4003,  1036, -3431,  -130,
   -3431, -3431, -3431, -3431, -3431,  3469,  3928,  3451, 10783, 53566,
   -3431,  3909, -3431,  3839,   499,  3781,  3428, -3431,  3426,   499,
    3947, 54798, 54798, -3431, -3431, -3431, -3431,  3924, -3431, -3431,
   -3431, -3431, -3431, 46790, 46790, -3431, -3431, -3431, -3431,  2267,
   -3431, 14605, -3431, -3431, -3431, -3431, -3431, 39398, -3431,  3487,
   -3431,  3439,   229,   229,  4027,   229, -3431,  4028,  4030,  -130,
   -3431,   902,   902, -3431,   262, -3431,   499, 51102,  4029, 47406,
   -3431,  3529, -3431, -3431, 10783,  3940, 40630, 51718,  3444, -3431,
   -3431, -3431,  3622, -3431,  3187,  3452,  2278,  3625, -3431,  3419,
   -3431,  3459, -3431,  3385,  2822, -3431, -3431,  3734, -3431, -3431,
     229, -3431,   229,   229, -3431, -3431, -3431, 10783, -3431,  3944,
    3546, -3431,  3464, -3431, 53566,   499, 53566, -3431, -3431,  3890,
    3465,  1836, -3431,  3467, -3431, -3431, 53566, -3431, -3431,  3882,
    3922, -3431, 14605,  3474, -3431, -3431,  3477,  3472, -3431, -3431,
   -3431,   499,  4059, 53566, 47406, 48638,  3965, 52334,  3932, 47406,
    5514,  3934,  3935, -3431, 53566, -3431,  4078,  3755, -3431, -3431,
   -3431,  3734,  3577, -3431, 49254, -3431,  2381,  3693,  3525, -3431,
   -3431,  4024,  2405, -3431, -3431,   229,  3925, -3431, 53566, 53566,
   -3431, -3431, -3431, -3431, 33238, -3431, -3431, -3431, -3431, -3431,
     954, -3431,  3789,  3520, 49870, 52950, -3431, -3431, -3431, 30158,
   -3431, -3431, -3431,  3963, -3431, 10783, -3431,   748, 19631,  3679,
   33238, -3431, -3431,   499, -3431, -3431, -3431, -3431, 39398,  2284,
   -3431, -3431, 24594, -3431, -3431, -3431, -3431, 23354,  3522, -3431,
      91, -3431, 24594, -3431, -3431, 13968, -3431, -3431
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3431, -3431, -3431, -3431, -3431,   154, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,  1809, -3431, -3431, -3431, -3431, -3431,
    2033, -3431,   722, -1865, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,   724,  1633,  3515, -3431,   468,
   -3431,   141, -3431, -3431, -3431, -2964,    27,  -150, -3431, -3431,
     393,    37,  3168,  -149, -2988, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,   482,   481, -3431, -3431,   295, -3431,
   -3431, -1900, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  -323,
    -277,  1740, -3431, -3431, -3431,  4149, -3431,  3617, -3431, -1782,
    2324, -3431, -3431, -3431, -3431, -3431,  2400, -1722, -3431, -3431,
   -3431,  1353, -3431, -3431, -3431, -3431,  -201,   340, -3431,   348,
   -3431,   350, -3431,   351, -3431,   352,   353,   354,   355, -3431,
     356, -3431, -3431,  -261, -3431, -3431, -3431, -3431,   358, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431,  -161, -3431, -3431,     9,
   -3431, -3431,  -138,   359, -3431,   -85,   360, -3431,   361, -3431,
       5, -3431,     4, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431,  3196, -3431, -3431, -3431,
   -2326, -3431, -3431, -2427,  2732, -3431, -1849, -3431, -3431, -1954,
   -3431, -3431, -1750,   905, -3431, -3431,  1424,   952, -3431, -1404,
   -1923, -1919, -3431, -3431, -3431, -2054, -2029, -1435, -1434, -2269,
   -3431, -3431, -3431,   362, -3431, -3431, -2604,  2167,  2736, -3431,
   -2011, -3431, -3431,  1229, -3431, -3431,  1380,  1846, -3431,   981,
    2928, -1240, -3431, -3431, -3431, -3431, -3431, -3431,   176,   313,
      85, -3431, -3282,   704, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -2558, -3431, -3431, -3431,  -154, -3431, -3431,   -80,
   -3431, -3431,  -115, -3431,   188, -2368, -3431, -3431, -3431, -3431,
    2713, -1379, -3431,  3765, -3431,  -554,   827,  2211, -2189, -1429,
   -3431,  -918,  -914, -2536, -3431, -3431, -3431, -3373,  1195,  1593,
   -3431,   920,  2209, -1930, -3431,  1670, -3431, -3431,   948, -3431,
   -2810, -3431, -3431, -3431,   904, -3431,   907, -3431, -3431, -3431,
    -953,   872, -2595,  1599,  -423, -3431,   459, -2522, -2631, -3431,
     689, -3431,   638, -3051, -2654, -3431,  -573, -2147, -2458,    35,
   -3431, -3431,   652, -3195,  1799, -3431, -3431, -3431, -3213, -1768,
    1506, -3431, -3431,  1098, -3431, -1313,  1092, -3431, -3431, -3431,
    1102, -3431,   208, -3431, -3431, -3431, -3431, -2844, -3431, -3431,
   -1508, -1981, -3431, -3431,  4301,  4303, -1052, -2754, -2683,   212,
     206, -3431, -3431, -3431,  2735, -1925,   276,   269,   274,  2168,
    -743,   430, -2442, -3431,   485, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431,  2252, -1532, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -2473, -2474, -3431, -3431,  1722, -3431, -3431, -3431, -2004,
   -1472, -1469, -1850,   710, -2238, -3013, -3431, -3431, -3431, -3431,
   -3431, -3431,  2873, -3431, -3431, -3431, -3431, -3431,  3759, -3431,
    2878, -3431, -3431, -3431, -3431, -3431, -3431, -3431,   726,  1924,
   -3431, -3431, -3431, -3431, -3431, -3431,  1000,  2787, -3431, -3431,
   -3431,     2, -3431, -3431, -3431, -3431,  2495, -3431, -3431, -3431,
   -3431,  2828, -3431, -3431, -3431, -3431, -3431, -3431,  1491, -3431,
    1970, -3431, -1474, -3431, -3431,  1090, -3431,  -991,  3764,  2895,
    3367, -3431,  1934,  3771,  2060, -3431, -3431,  -588, -3431, -3431,
   -3431, -1731, -1688, -3431,  3482,  -876, -2606,  -442,  -652, -1072,
    1148,   694,  3221, -3431, -1155, -1097, -3431, -3431,  -640, -3431,
   -3431, -3431,  -623, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431,  1551, -3431, -3431, -3431, -3431, -1227,
   -3431, -3431, -3431, -3431, -3431,   794, -3431,  2171, -3431,  -497,
   -3431,  3259, -3431, -3431, -3431, -2075, -1400,  2210,  1270, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -1594, -3431,
   -2121, -3431, -3431, -3431, -3431, -3431,  2092, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -1425, -3431, -1988,   337, -3431,   486,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431,    69,   966,    72,
   -2556, -1108,  1764, -3431, -3431, -1276,  3298, -2391, -3431, -3431,
   -3431,  2079, -3431, -3431, -3431, -3431, -3431,  1055, -2986, -1415,
   -3431, -3431, -3224,  -925, -2322,  -898, -3431, -2403,   598, -1830,
   -1832,  -446,   230, -1233, -3431, -3431, -3431, -3431,   -45, -3431,
   -3431, -3431,   611,  1978, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431,  -559,  -847, -3431, -3431,  2228,
    2695, -3431,  3175, -3431, -1044,  3427, -3431, -3431,  3429, -3431,
   -3431, -3431, -3431,  3101,  3091,  2047, -3431, -3431, -2344, -3431,
   -3431,  2004, -3431,   867,  -905, -1811,  1149, -3431, -3431,  1151,
   -3244, -3431, -3431,  3437, -3431, -3431, -3431,  1113, -3431,   175,
    3854,  3448, -3431, -3431, -3431, -3431, -3431, -3431,  2838, -1071,
    3777, -3431, -3431, -3431, -3431, -3431, -3431,  2499, -3431, -3431,
   -3431, -3431, -3431, -3431,  3038,  3872,  -577, -1288, -3431,  -639,
    3039,  2503,  -892, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,  2651,  1089,
   -3431, -3431, -3431,  3108, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431,  1188,    32, -3431,   166,     8, -3431,   105, -3431, -3431,
   -3431, -3431, -3431,   -59, -3431, -3431,   -66, -3431,  -987, -1393,
     813, -1262, -2074, -3431,  1181,  3803, -3243,  -684, -1110, -1135,
   -1975,    47, -3431, -3431,  2983,  2153,    83,   729,  -350,    -6,
   -2248,  -123,  -579, -3431,  -585, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431, -3431,  2005, -3431, -3431, -3431,  1157, -3431,  3894,
   -3431,  2734,  1158,  3896, -3431, -1364,  2573,  2022,  2024, -3431,
   -3431,  2032, -2297, -3431, -3431,   136, -3431,  2646, -3431, -3431,
   -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431,  3118,  3913,  3600, -3431,  3179, -3431, -3431, -3431,
   -3431, -3431,   556, -3431,   814, -3431, -2172,  2915,   933, -3431,
    1646,  -304,  -589, -3431, -3431,   553, -3431, -3431,   329,  3920,
    3603, -3431, -3431, -3431, -3431, -3431, -2812,  -878, -3431, -3430,
   -2646, -1716, -3431, -3431, -2204, -2920, -3431, -3431, -1056, -3431,
   -3431, -3431, -3431, -2033, -3431, -3431, -3431,    59,  3983,  3984,
   -3431, -3431,   685, -3431,   -62, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431,   478,   811, -3431, -3431,  3846, -3431, -3431, -3431,
   -3431,  3848, -3431, -3431, -3431, -3431, -3431,  3850, -3431, -3431,
   -3431, -3431, -3431,  1579, -3431, -3431, -3431, -3431, -3431, -3431,
   -3431, -3431
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2619
static const yytype_int16 yytable[] =
{
     495,   624,  1063,  1071,   961,  1049,  1484,   919,   957,  1386,
    1389,  1491,   990,  2193,   539,  1603,  1373,  2103,   547,  1401,
    2404,  1815,  1613,   540,  2309,  1936,  1680,   561,   794,  1588,
    1589,  1448,  1140,   559,   573,  1910,  1420,   576,  1006,   566,
    1414,   573,  2085,   493,  3003,  2086,  2593,  1843,   591,  2100,
    2950,  1021,  1728,  1098,  2659,  1750,  1814,  2720,  1420,  2886,
    1702,  2856,  1758,  3122,  1970,  1449,  1965,  2756,  1644,  1997,
    1998,   545,  2758,  2017,  2018,  2017,  2018,  1727,  2931,  2932,
    3293,   666,  1038,  1041,  1496,  2075,  3595,   137,  1497,  1851,
     613,  2354,  2433,  3114,  2550,  2496,  2711,  2544,  2935,  2679,
    1996,  2545,  2999,  3431,  2721,  1079,  2817,  3004,  2622,  3597,
    2841,  2975,   616,  1311,   495,  1974,  3148,   495,   623,   629,
    3155,  1760,  1761,  2909,  2680,  1764,  1765,  1766,  1767,  1465,
    1769,  1770,  1772,  1774,  1775,  1776,  1777,  1778,  2149,  2150,
    3800,  1943,  2009,   612,  1235,   502,  3934,  1202,  1203,  1193,
    1194,  1195,  3486,  2345,  2444,   643,  3612,   618,  3157,  1953,
     620,  3671,  1236,  2540,  2507,  2508,   558,  1956,  1957,  2144,
    2922,  2154,   565,  2532,  1846,  2184,  2559, -2433,  3633,  3638,
    2563,  2519,  3639,  2929,  2009,  3640,  1202,  1203,  2668,  2719,
     634,  2578,  2848,  4039, -1484,  1083,  1306,  1303,  2537,  2538,
    3209,  3649,  2700,  2589,  1560,  3218,  3236,  3670,  1202,  1203,
    2209,  2296,  1792,  3344,  2558,  2964,  1556,  2561,  2562,  1857,
    2564,  3341,  2391,  2567,  2568,  1827,   850,  2571,  3154,  1311,
    2676, -1484,  2580,   551,  2677,  1260, -1975,  2584,  2585,  2586,
    2587,  2588,  3209,  2597,  2521,  2592,  3092,  2594, -1524,  1382,
     117,  3418,  1312,  2603,  2604,  2605,  2606,  3598,  1445,  2610,
    1403,  2612,  2547,  2897,  3493,   980,  4342,  3739,  2960,  2961,
     635,  2813,  3493,  1636,   867,  4039,  1251,  3494,  2633,  3461,
    2636,  2637,  4039, -2502,  2481,  3494,  2647,  2648,  4143, -2433,
    1320,  3495, -2566,  1337,   970,  2656,  2657,  3545,  4144,  3495,
    2661,  3535,   927,   910,  4124,   927,   910,  2716,   600,  3210,
     927,   910,  1988,  1180,  1493, -1802,  3006,  3813,  2717,  1450,
    1561,  2969,  3798,  1616,  1562,  2693,  2663,  2664,  2665,  2666,
    1202,  1203,  1202,  1203,  2607,  1563,   879,  1202,  1203,  1202,
    1203,  1418,  3138,  2091,  3140,  -900,  3312,  1992,  1493,  1042,
   -2566,  3210,   136,  3811,   136,  1202,  1203,  3919,  2392,  1461,
     583,   554,  1202,  1203,   119,  2701,  2441,  1493,  1312,  1472,
    4040,   575, -1722,  3120,  3063,   965,  2214,  2800,  2574,  -566,
    1202,  1203,  2598,  3774,  4357,   648,  1421,   498,  3854,  1992,
    3007,  3255,  2688,  2337,  1202,  1203,  3085,  3086,  -567,  1202,
    1203,  2338, -2566,  2801,  2337,  4309,  2240,  1578,  1579,  1580,
    4309,  3855,  2729,  3733,  2689,  1577, -1722,  4358,  2101,  2215,
    1239,  3064,  2194,  3953,  3847,   853,  1202,  1203,  3121,  2010,
    1202,  1203,   584,  3851,   574,  1422,  1828,  4113,  1425,  1643,
    1418,   981,   954,  2102,  1430,   880,  1332,  2970,  3856,  1617,
   -2434,  1969,  4040,  1140,   966,  2297,  3870,  1557,  2092,  4040,
   -2566,  3872,  1989,  4125,   636,  2807,  1564,  4035,  2808,  1519,
     601,  2010,  1202,  1203,  1202,  1203,  1202,  1203,  1202,  1203,
    1966,   555,  1059,  1202,  1203,  3097,   971,  1905,  1577,  1181,
    3903,  3008,  1321, -1524, -1122,  1202,  1203,  3462,  2212,  1202,
    1203,  3599,   623,  3190,   629,  2345,  1204,   852,  4145,  1205,
    3116,  3301,  3302,  2718,   639,  1202,  1203,  1251,  2608,   630,
     881,  1669,  1252,   808,  1670,  1202,  1203,   629,  3483,  1202,
    1203,  1938,  3340,  2577,  1941,  3342,  3343,  3351,   848,  1945,
    2463,  3288,   623,  3943,   858,   868,  1637,  3614,  1202,  1203,
    3345,  2346,  2902,   666,  2482,  2393,  2273,   871,  3955,  1997,
    1998,  1565, -2434,  1446,   552,  1958,  1959,  1204,  3775,  1473,
    1205,  1383,  1829,  1755,   920,  2978,  1496,  2017,  2018,   851,
    1497,  1971,   977,  4338,  2981,  3025,  3603,  3963,  2985,  2724,
    1996,  3098,  1065,  1073,  2576,  3126,  3827, -1484,  1763,  1816,
     994, -2003,  3001,  3002,  1404,  1371,  1462,  2624,  3810,  1627,
    1628,   623,  1815,  1010,  3015,  1784,  2543,   652,  2544,  2679,
    2702,  1304,  2545,  3315,   623,   613,   495,  2930,  3237, -1524,
    1668,   613, -2433,  1036,  3211,   613,   613,  3334,  1084,  1682,
    1050,  1010,  1601,  2622,  2680,   623,  2075,  1814,  1202,  1203,
    1043,  1695,  1696,  1697,  1496,  1080,  1081,  1082,  1497,  1701,
   -2142,  1088, -2433,  2971,  3447,  1093,  2489,  1202,  1203,  1023,
    2210,  2326,  2946, -2164,   816,  3564,  3211,  1558,  1022,  3259,
    3260,  3261,  2329,   954,  1033,  2332,  2164, -2282,  1250,  1204,
    2962,  1204,  1205,  1307,  1205,   863,  1204,   892,  1204,  1205,
    4034,  1205,   874,  1795,  1202,  1203,  2323,  2149,  2150,  2165,
    1141,  2132,  4242,  3087,  1204,  1077,  2910,  1205,  2681,  2682,
    2622,  1204,  1823,  3641,  1205,   978,  3298,  3299,  3300,  3127,
    3128,  4100,  2984, -1524,  2986,  2155,  1847,  1558,  2144,  1204,
   -2502,  2997,  1205,  3459,  3626,  2710,  3485,  2341,  1858,  2675,
    2676,  1206,  2963,  1204,  2677,  3010,  1205,  1974,  1204,  2996,
    3145,  1205,  3021,  1252,  3354,  1202,  1203,  1845, -2502,  2312,
    2958,  1199,  3005,  1201,  3037,  3039,  3041,   982,  3646,  3219,
    3042,  1558,  1864,  2599,  3627,  1204,  3651,  1876,  1205,  1204,
    1206,  1387,  1205,  3676,  2539,  1392,  1397,  2735,  3907,  1244,
     495,  1246,  3082,  1010,   495,   623,  3212,   495,   623,  1890,
    1417,  4048,  1206,  1289,  1955,  3647,  3648,  3957,  1202,  1203,
    3496,  3446,  4158,  3740,  4330,  1182, -1524,  2298,  3496,  4201,
    -900,  1204,  3084,  1204,  1205,  1204,  1205,  1204,  1205,  2972,
    1205,  3313,  1204,  1245,  3668,  1205,  1316,  1249,  1942,  3778,
    1259,  3624,  3625,  1919,  1204,  4192,   613,  1205,  1204,  3154,
    3090,  1205,  3154,  3154,  -566,  4213,   623,   613,  1202,  1203,
    4363,   613,   556,  1483,  1204,  3611,  3145,  1205,  1060,  3154,
    1590,  1202,  1203,  -567,  1204,  1202,  1203,  1205,  1204,  3769,
    1426,  1205,  3618,  3650,  4114,  3602,  1431,  1453,  3669,  3672,
    3674,  3675,  4208,  2346,  4210, -2434,   651,  1204,   623,  1323,
    1205,  3774,   623,   623,  2219,  2861,  3469,  1202,  1203,  2886,
    1340,  3489,  2969, -2003,  1346,  1976,  3465,   623,  4032,   814,
     664,  1202,  1203,  2022,  1206, -2434,  1206, -1122,  3594,  1202,
    1203,  1206,  3099,  1206,  1202,  1203,  3571,  2417,  3191,  1334,
    1735,  1736,  3512,  4202,  1282,  1735,  2239,   872,  2220,  1206,
    4110,  2742,  1202,  1203,  1671,  1518,  1206,  1672,  4291,  -473,
     613,  1202,  1203,  2277,  2278,  1202,  1203,  1237,  4148,  3577,
    2294,  2295, -2142,  1024,  1206,  2452,  2025,  1202,  1203,  3303,
     623,  3339,  1492,  2309,  2625, -2164,  1202,  1203,  1206,  2274,
    1382,  2245,  3858,  1206,  3473,  2467, -2354,  1204,  3477, -2282,
    1205, -1802,  2822,  2823,  4303,  1584,  4514,  3168,  3169,  1237,
     138,  1992,   613,  3353,  4336,  2485,  1204,  2160,  1895,  1205,
    1206,  1388,   875,  2456,  1206,  1061,  3065,  2679,  3134,  3461,
    2544,  2903,  1591,  1969,  2545,  2506,  1592,  2976,  2976,  2200,
    3472,  2483,  1420,  2240,  3476,  1590,  3103,  2288,  1202,  1203,
    3758,  2488,  2680,  1204,  2491,  2492,  1205,  1202,  1203,  3489,
    2009,  2324,  1420,   613,  3323, -2618,  1206,  1745,  1206,  3043,
    1206,  3490,  1206,  1609, -2003,  1997,  1998,  1206,  1936,  1936,
    3175,  3176,  3192,  3193,  3227,  3228,  3775,  2218,   503,  1206,
    4253,  2953,  2225,  1206,  2017,  2018,  3898,  1202,  1203,  1202,
    1203,  1202,  1203,  3296,  1783,  2550,  1996,  1141,  2226,  1206,
     522,  1202,  1203,  2354,  1204,  3576,  1585,  1205,  2737,  1206,
    3054,  1141,  1877,  1206,  2333,  2316,  1607,  2543,   668,  1202,
    1203,  4262,  2085, -2142,  2232,  2086,  4133,  2773,  2237,  1251,
    1219,  2792,  1206,  2176,  1202,  1203, -2164,  1738,  2331,  4247,
    3350,  1817,  3491,  1202,  1203,   550,  2821,  2238,  2676,  2875,
   -2282,  3912,  2677,  2417,  3104,  3913,  3131,  1204, -2354,  3066,
    1205,  1729,  1202,  1203,   541,  2075,  4263,  4293,  2418,   876,
    1816,  3281,  1202,  1203,   623,  2397,  2578,   669,  4294,   658,
    1896,  3776,  2936,   999,  2009,  1616,  1779,  3986,  4515,  1856,
    1202,  1203,  3914,  1251,  4146,  2344,  2954,  1591,  1496,  2826,
    2827,  1592,  1497,  1202,  1203,  3304,  4153,  1204,  2305,  3490,
    1205,   623,  2149,  2150,  1454,   563,  1787,  2348,  2681,  2682,
    1204,   613,  1616,  1205,  1204,  2164,  1901,  1205,  1202,  1203,
    2050,  4304,  1206,  3513,  1590,  1751,   613,  3462,  3977,  4203,
    1202,  1203,   586,  2144,  2820,  1202,  1203,  2241,  2165,  2675,
    4207,  1206,  1202,  1203,  2830,  1992,  1204,  1141,   623,  1205,
    2457,  2413,  2414,  3574,  4107,  1238,  2253,  3057,  1202,  1203,
    1204,  4536,  1728,  1205,  1789,   623,  1202,  1203,  1204,   585,
    2871,  1205,  1239,  1204,  3055,  4134,  1205,  1832,  1206,  1835,
    3502,   613,  4264,  1202,  1203,   954,  1902,  1616,  2317,  1739,
     613,  1204,  1383,  2260,  1205,  2683,   623,  1238,  3920,   670,
    1204,  1632,  3137,  1205,  1204,   613,   613,  1205,  1202,  1203,
    1202,  1203,  1078,  1878,  3900,  1222,  1204,  1202,  1203,  1205,
    3743,  4204,  3172,  3721,  3722,  1204,  3105,  2010,  1205,   588,
     623,  3777,  2419,  1880,  1346,  1455,  1728,  1999,  1687,  1206,
    2640,  3492,  2622,  1886,  3526,  1202,  1203,  3778,  1978,   954,
    2807,  4205,   623,  2201,  2807,  1114,  3268,  3533,  1456,  1346,
    2306,  2945,  1906,   920,  2622,  1252,  4247,  1202,  1203,  4471,
    3132,  1839,   495,   495,   495,   613,   495,   613,  1558,  1992,
    4295,  4165,  1937,   603,  2418,  1780,  1591,  1204,  1939,   495,
    1205,   623,  1206,  4198,   495,    44,  1204,  1000,  2358,  1205,
    1202,  1203,  1047,  1048,  2641,  1202,  1203,  2264,  1752,  1781,
    3360,  3882,  2440,  1691,   613,  1920,  1921,  1922,  3133,  1924,
    3346,   606,  3978,  1001,  -473,  1060,  1728,  1184,  1923,  1252,
    1925,  3106,  1940,  1891,  2976,  3779,  1204,  1944,  1204,  1205,
    1204,  1205,  1206,  1205,  4135,   895,  2000,  1202,  1203,  1829,
    1204,  3019,  2684,  1205,  3358,  1206,  1916,  2265,  1892,  1206,
    2009,  2010,  3364,  1926,   604,   623,  3366,  1954,  1204,  2289,
    4103,  1205,  1854,  4166,  2267,  4167,   623,   614,  1202,  1203,
     854,   613,  1616,  1204,  2096,   613,  1205,  4405,  4406,  3492,
    1903,  1206,  1204,  2318,  1240,  1205,  1202,  1203,  2398,  2359,
    2642,  4037,  1044,  1013,  2441,  1206,  2268,  1251,  2577,  2319,
    2914,  1204,  3439,  1206,  1205,  2423,  1855,   631,  1206,  3361,
    2272,  1204,   613,  3979,  1205,  1927,  1881,  2213,  2920,  2543,
    1024,  2915,  2526,  2290,  2093,  3020,  1206,  1317,  2098,  1204,
    3882,   623,  1205,   495,   495,  1206,  2162,   495,  3915,  1206,
    2442,  3173,  1204,  4296,  1014,  1205,  2171,    56,  2419,  2217,
    2008,  1206,  2399,   613,  3921,  2916,  2188,   855,  2190,  1052,
    1206,   896,  1782,  3883,  1093,  2227,  2199,  1204,  3069,  1045,
    1205,  2643,  1061,  3082,  1350,  3174,  2158,  2159,  3863,  1204,
    2400, -1802,  1205,  3070,  1204,   895,  2527,  1205,  1202,  1203,
    2905,  1204,  3864,  1815,  1205,  4102,  1202,  1203,  1715,  1231,
    1232,  1233,  1234,  1753,  2001,  1893,  2183,  1204,  1202,  1203,
    1205,  2423, -2618,  2002,  2528,  1204,  2681,  2682,  1205,  1754,
    2003,   132,  1206,  3139,  1979,  1202,  1203,   856,  1814,  1015,
     617,  1206,  1204,  3226,  2349,  1205,   897,  3185,  1980,  1141,
    2246,  3493,  1882,  1202,  1203,  2187,  3195,  2675,  2401,  1466,
    1202,  1203,  1202,  1203,  3494,  1992,  2057,  1204,  1500,  1204,
    1205,  2825,  1205,   954,   632,  1581,  1204,  3899,  3495,  1205,
    3838,  1206, -1830,  1206,  4340,  1206,  2906,  4344,  1969,   927,
    3634,  4083,  2529, -1831,  2760,  1206,  3196,   619,  3752,  2228,
    1202,  1203,  4021,   119,  1204,  1582,  1928,  1205,  2767,  2236,
    2315,   639,  4084,  1206,  2060,  1728,  4128,  4129,   133,  3970,
    3971,   896,  1202,  1203,  4350,  2004,  1204,  2249,  1206,  1205,
    3230,  1248,  1120,  3541,  2451,  3540,  3812,  1206,  1172,  2402,
    3284,  2782,  2250,  1202,  1203,  2425,  2426,  2010,  1202,  1203,
     570,  2254,  2339,  1252,  1202,  1203,  1206,   570,   623,  1204,
     613,   623,  1205,  2861,  1204,   640,  1206,  1205,  3274,  2172,
    2258,  1327,   613,  2530,  1328,  1457,  3839,  1289,  1202,  1203,
    2259,   643,  1289,  3287,  1206,  2361,  3865,  3972, -1830,  2309,
    2644,  2367,  2367,  1251,  2367,  1219,   897,  1206,  2263, -1831,
    1176,  4431,  1202,  1203,   613,  3559,  1204,  2101,   613,  1205,
    2836,  2266,  3695,   647,  1981,  3470,  3840,  1121,  1098,   659,
    2005,  3696,  1206,  1173,   623,   623,   613,   613,  1535,  1536,
    1202,  1203,  2102, -1802,  1206,   645,  2269,  1204,  1141,  1206,
    1205,  2367,  2367,  2367,  2366,  2366,  1206,  2366,  2281,  3560,
    3695,   623,  1016,  2300,  1458,  1204,  1581,  2389,  1205,  3696,
    3142,  1323,  1206,  1620,  1621,  1622,   919,   511,   920,  3529,
    1206,  1202,  1203,  3531,  3871,  1633,  3161,  3873,  1311,  1340,
    2416,  1202,  1203,  2480,  3167,  1177,  1583,  1206,  4451,  1509,
    1510,  1982,  1202,  1203,  2366,  2366,  2366,  1202,  1203,    14,
     259,  3170,   261,  2173,   650,  3928,  1688,  1992,  4452,  1692,
     661,  2412,  1206,  2614,  1206,  1017,  1983,  1018,   662,   613,
    1329,  1206,  2174,  1910,   663,  2009,  3177,   812,  3181,  1575,
    1711,  1712,   804,  2175,  1716,  3182,  2009, -1722,   898,   899,
     900,   901,   902,   903,   499,  3922,   809,   500,  2403,  1206,
    4051,  4055,  1730,  1731,   927,   910, -1524,  1204,   904,   954,
    1205,  3697,  2746,  3183,  1975,  1204,  2995,  2476,  1205,  1551,
    1552,  1206,  2490,  3318,   819,  2137,  1984,  1204,   860,  3319,
    1205, -1722,  2531,   849,  1373,  3184,  2137,  2736,  2747,  3642,
    1222,   864,  3643,   564,  1204,  2321, -1830,  1205,  2669,  3697,
    1420,  2927,  2685,  3487,  1206,    26,  1420, -1831,   499,  1206,
    3330,   500,  1204, -1524,  3320,  1205,  2176,  1312,  3186,  1204,
     884,  1204,  1205,  3189,  1205, -1830,   866,  3504,  3505, -1802,
    1047,  1048,  2510,  2609,   886,  1251, -1831,  2748,   876,  1252,
    2749,  2517,  2518,  4380,  4380,   993, -1524,  2623, -1524,  2750,
    3518,  1206,  2522,  2523,  2524,  2525, -1802,  2533,  2534,  1204,
    2137,  1387,  1205,   992, -1524,  3194,  1387, -1802,  2794, -1524,
    1985,  4096,  4097,  2796,   996,  2671,  1003,  4071,  4072,  4073,
    4074,  1204,  1206, -1524,  1205,  2983,  2671,   852,   898,   899,
   -1524,   901,  1012,   903,  4098,  4051,  3197, -1524,  1024,  4055,
    1206,  1034,  1204,  1992,  1058,  1205,  1053,  1204,   904, -1524,
    1205,  3013,  3014,  1204,  3199,   623,  1205,  1219,   117,   623,
   -1524,  2686,  4256,  1054,   495, -1524,  1728,  4258,  2177,  4259,
    1992,   613,   613,   613, -1524,  2216,  1239,  1204,  1095, -1830,
    1205,  1992,  1239,   986,   987,  2398,   988,   982,   989,  2728,
   -1831,  1096,  2333,  4051,  4055,  2731,  2233,  1239,  2734,  1097,
    2818,  1204,  2635,  1728,  1205,  2635,  2635,  2691,  2635,  2242,
    1239,  2635,  2635,  2635,  2635,  2635,  2635,  2635,   623,  1099,
    2635,  1816,  2635,   623,  2705,  2706,  2707, -1830,  2945,  1204,
    2840,   698,  1205,  1100,  1728,  2243,  1685,  2178, -1831,  4155,
    1101,   954,  1206, -1524,  4236,  1824,  1104,  3496,  1825,  2399,
    1206,  1826,  2010,    38,  -207,  1992,  3201,  4176,  1105,  3019,
    2255,  1239,  1206,  2010,  3203,  2526, -1524,  3635,  3416,  1649,
    1204,  1251,  1407,  1205,  1106, -1524,  3204,  2400,  2727,  1206,
    1204,  1242,    44,  1205,  4181,  2955,  1243,  4184,  4185,  4186,
    4187,  1204,  2138,  3205,  1205,   703,  1204,  1206,  1251,  1205,
    3605,  3606,  1107,  2138,  1206, -1524,  1206,  1108,  3280,  1251,
    1298,  3523,  1560,   592,  2751,   117,  1109,   623,  3524,  1292,
    3525,  1252,  1229,  1230,  1231,  1232,  1233,  1234,  1110,  2527,
    1111,  3681,  1408,  2256,  1239,  4255,  3225,  1112,  1152,  2257,
    1239,  3936,  2837,  1115,  1206,  2401,  2828,   623,  1936,  1247,
    3124,  2309,  1222,  2261,  1239, -1524,  3826,  2528,  3748,   593,
    1171,  1117,  1409,  2172,  4285,  3029,  1206,  3030,   623,  1202,
    1203,  1653,  1118,  1185,  1186,  1119,  2137,  2138, -1524,  1264,
    3751,  4277,  4278,  1251,  1290,  2535,  2536,  1206,  1122,  3566,
    4290,   715,  1206,  1301,  2451,  1387,    53,  1123,  1206,  1124,
    2869,  3757,  2810,  1239,  3826,  1300,  3759,  2846,  2847,   118,
    3031,  1310,  3760,  1309,  2869,   927,   910,  4063,  4064,  4367,
    1125,  2202,  1206,  3139, -1524,  2529,  2402,  2009,  1561,   119,
    2172,  2891,  1562,  3032,   594,  2894,  3761,   954,  3628,   623,
    1728,  3631,  3632,  1563,    56,  2398,  1206,  3937,  3938,  3652,
    2139,  1126,  3939,  3940,  1127,  2752,  3144, -1802,  3644,   121,
    3762,  3187,  1239,  1128,   954,  3284,  1129,  2840,  1219,  1130,
    3033,  1131,   731,   920,  1206,   954,  1654,  2137, -1524,  1318,
    1657,  1311,  3290,  3291,  1132,  1937,  1937,  1658,  3814, -1524,
   -1524,  2247,  3653,  4174,  1135,  2251,  3654,  2173,  3655,   120,
    1224,  1225,  3294,  3295,  1136,  1729,  2530,  1319, -1524,  2399,
   -1524,   623,   623,  1432,  1347,  1206,  2174,  1252,  1142,  2275,
    3442,  3443,  1143,  2753,  4445,  1206,  4447,  2175,   121,  4067,
    3749,  1992,  1349, -1524, -1524,  2526,  1206, -1524, -1524,  4479,
    4480,  1206,  1144,  1433,  1252,  1145,  3656,  1146,  2520,   954,
    1147,  2754,  2623,  4464,  1366,  1252,  1148,  2623,  1149, -1524,
    1150,  2968,  2980,  2623,  2173,  1659,  1153,  2623,  1335,  2991,
    3537,  1239,  2982,  1410,  1564,  3091,  1154,  2671,  2992,  2991,
     122,  2623,  2623,  2174,   623,  2991,  3562,  3563,  4494,  4495,
    3012,  1434,  1155,  2623,  2175,  1729,  1435,  3686,  3687,  2527,
    2140,  1367,  3016,  1156,   613,  4279,  1157,  3024,  3736,  3745,
    2176,  1158,  1218,  3027,  3028,  2991, -1524,  3753,  1239,  2024,
    1312,  1661,  2623,  3053,  2025,  1159,  2026,  2528,  2027,  1252,
    3770,  1239,  1992,  3719,  3079,  2403,  1219,  3786,  3787,  2028,
    2029,  1160,  1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,
    1161, -1524,  2369,  2138,  2370,  3886,  2536,  3026,  1368,  1251,
    2993,  2994,  2137,  1222,  3901,  3902,   677, -1524,  1162,  1565,
    2030,  1163, -1524,  1164,  2031,  2032,  -825,  2176,  3905,  3902,
    2033,   760,  1165,   595,  -652,  1166,  4280,  3023,  2034,  3511,
    3906,  3902,  1167, -1524,  2547,  2529,  2035,  1168,   613,  2623,
   -1524,  2436,  2437,  2438,  1169,   596,  2036,  2548,  2423,  1411,
     123,  1170, -1524,  3034,  2010,  2531,  2424,  1174,  1293,  1219,
    1175,  2037,  2177, -1524,  1178,  1219,  2139,  2547, -1524,  1179,
    1412,  3964,  3563,  2837,  3716,  3717,  1493, -1524,  1183,   597,
    2038,  3538,  3820, -1802,  3967,  3902,  1436,  1187,  2039,  2040,
     698,  3108,  1188,   919,  2138,  2041,  3083,  1189,  1662,  1190,
    1251,  -652,  1191,  2042,  3975,  3976,  1192,  -930,  1241,  2043,
    1413,  2547,  2526,  1371,  1664,  3036,  2530,  1047,  1048,  1378,
    2044,   124,  1374,  3657,  2548,  4062,  3295,  4081,  4082,  2177,
    3658,  2178,  4105,  3902,  4106,  3902,   677,  1379,   598,  1294,
    2045,  1402,  4108,  3902,  1295,  2526, -1524,   702,  3038,  3702,
    -652,  1224,  1225,  1398,   703,  1406,   506,  1992,  4109,  3902,
    1418,  1220,  1437,  4115,  4116,   954,  1428,  3659,  1427, -1524,
    1444,  1222,  2425,  2426,  4117,  4116,  2527,  1429, -1524,  2046,
    1447,  2047,   708,  2574,   125,  1221, -1004,  1296,  2048,  1289,
    2101,  2361,  4260,  3295,  1316,   623,   623,   623,  2178,  2871,
    4261,  3295,  1297,   613,  2528,  2049,  1451,  3984, -1524,  2527,
    2427,  3817,  3820,  3984,  1452,  2102,  2140,  4301,  3563,  1460,
     698,   623,  1387,  2101,  1729,  1438,  1463,  -652,  2050,  4348,
    4349,  1464,   126,   506,  1468,  4281,  1467,  2528,  3660,  1141,
    3929,  3930,   623,   623,   623,  1252,  1470,  4085,  2102,  1475,
     715,  4388,  4389,  1480,  1222,   569,  3267,  1493, -1524,  1499,
    1222,  1501,  4428,  3441,  2051,  1503,   954,  2101,  4526,  4527,
    2526,  3741,  2529,  3040,  1047,  1048,  2667,   702,  1506,  2138,
    4086, -1524,  2052,  1507,   703,  1251,  2053,  3661,  1718,  1719,
    1511,  1728,  2102,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
    1234,  4283,  4283,  3580,  3581,  2529,  3547,  3548,  3784,  3785,
    1512,  1517,   708,  1513,  1516,   726,  4173,  1520,  2623,  1224,
    1225,  2623,  2623,  1521,  2054,  2531,  2991, -1524, -1802,  2055,
     730,   731,  1522,  1219,  2527,  1569,  2056,  1439,  1570,   623,
    1571,  2057,  2623,  3662,  2058,  1574,  1252,  1576,  1223,  1577,
    2549,  2172,  2139,  2530,  1604,  1610,  4175,  1612,  1237,  1616,
    2991,  1623,  2528,  1635,  1638,  1674,  -652,  1684,  2991,  1685,
    3321,  3322,  2991,  3324,  1686,  2059,  1746,  1440,  1709,  1726,
     715, -1524,  1737,  2575,  1762,  1768,  2530,  1788,  1793,  2060,
    2061,  2062,  2063, -1524,  1791,  1794,  1797,  1804,  3370,  2576,
    4087,   613,  1224,  1225,  1800,  1801,  3426,  1802,  1224,  1225,
    1803, -1524,   495, -1524,  2064,  1226,  3436,  1805,  2991,  1807,
    1806,  1818,  3965,  3966,  1819,  3968,  3969,  1820,  1821,  3352,
    2529,  1841,  1844,  3445,  1860,  2262, -1524, -1524,  3356,  1852,
   -1524, -1524,  1861,  -652,  1862,   726,  3456,  1870,  1863,  1867,
    1873,   954,  1874,   613,  3371,  3432,   729,  1875,  1884,   509,
     730,   731,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1887,
    2065,  2066,  2067,  1911,  1914,  1918,  1947,  2068,  1946,  4209,
    3484,  1948,  1728,  4088,  1949,  2173,  1202,  1203,  3946,  1951,
    1960,  1963,  2023,  2069,  1967,  1977,  2070,  1558,  1373,  2088,
    2106,  4089,  2140,  2105,  2174,  2131,  3458,  4173,  2107,  2108,
    1373,  2530,  2109,  2110,  2111,  2175,  1535,  1536,   752,  2071,
    2112,  2113,  3821,  2114,  4090,  3822,  2115,  3448,  1222,  2116,
    2117,  1252,  2072,  3585,  2118,   758,   509,  2119,  2120,  2121,
     760,  2122,  -652,   761,  1227,  1228,  1229,  1230,  1231,  1232,
    1233,  1234,  1229,  1230,  1231,  1232,  1233,  1234,  3845,  3846,
    2123,  2124,  2531,  2125,  2126,  2127,  3536,  2028,  2029,  2128,
    2129,  3849,   806,   807,  2188,  2130,   810,   811,  3852,  2133,
     813,  3958,   815,  1645,  1646,  1647,  1648,  1649,  2151,  2157,
    2152,  2167,  -930,  2180,  4393,  2531,  3823,  3824,  2176,  2182,
    -790,  -790,  2031,  3874,  2191,  2168,  3876,  2169,  2197,  2203,
    -790,  2223,  1979,  2231,  2205,  2206,  2034,  2869,  4268,  -652,
    2207,  3723,  2222,  2224,  2035,  2229,  1980,  2310,  2230,  1645,
    1646,  1647,  1648,  1649,  2240,  2891,  3573,  2234,  2244,  3575,
    2314,   623,  2248,  2252,  2270,  4019,  2271,  2276,   752,  2037,
     623,  2279,  3821,  2280,  2291,  3822,  2292,  1551,  1552, -1231,
     920,   920,  2293,  2187,  1493,   758,  2320,  1234,  2038,  4246,
     760,  2330,  1729,   761, -1353,  2364,  1224,  1225,  2350,  1120,
    2382,  2623,  2390,  1172,  1176,  4393,  1650,  1651,  1652,  1653,
    2396,  2623,  2407,  2991,  2434,  2410,   954,  2043,  2431,  2435,
    2453,  2454,  2455,  1729,  2458,  2459,  2477,  1209,  1210,  2991,
    2177,   613,  4091,  2623,  2460,  4398,  4399,  2479,  4401,  2461,
    2531,  2462,  2484,  1728,  1387,  4095,  3823,  3824,  2493,  2494,
    2495,  2501,  1650,  1651,  1652,  1653,  2498,  1728,  2502,  2503,
    2505,  2509,  1728,  2516,  2546,  1211,  2511,  1728,  4521,  2547,
    2512,  2569,  2513,  2514,  2515,  2560,  1212,  2565,  3589,  4019,
    4019,  2566,  4530,  4438,  2570,  4439,  4440,  4521,  1351,  2047,
    2572,  2573,  4530,  2579,  2581,  2583,  2048,  1352,  2590,  2178,
    2591,  2595,  4140,  2601,  2582,  3079,  1219,  1353,  2596,  2602,
    2630,  2632,  1981,  2049,  1654,  1213,  1655,  1656,  1657,  1354,
    1355,  1356,  2611,  2626,  2670,  1658,  1214,  2692,  2712,  3805,
    3715,  3715,  3715,  2713,  4537,  2714,  1357,  2740,  1227,  1228,
    1229,  1230,  1231,  1232,  1233,  1234,  2736,  2732,  2745,  2761,
    2028,  2029,  2762,  1215,  2763,  2774,   821,  2338,  4491,  2775,
    1654,   623,  1655,  1656,  1657,  1204,  2787,  4251,  1205,  4506,
    2809,  1658,  2051,  2816,  2824,  2833,   526,  4249,   802,  2844,
    2834,  1263,  2851,  -790,  -790,  2031,  4095,  3683,  2852,  1982,
    2052,  2849,  2853,  -790,  1219,  2862,  2864,  2865,  2872,  2034,
    2451,  2845,  2859,  1659,  2873,  2877,   802,  2035,  3178,  2850,
    3707,  1047,  1048,  2896,  1983,  1847,  2371,  1216,  4019,  4019,
    2881,  2895,  2898,  2899,  3239,  3794,  2900,  2442,  2441,  1729,
    1895,  1896,  2037,  3240,  2933,  2923,   527,  2937,  2912,   822,
    2372,  2938,  2913,  3241,  2056,  2939,   623,  1493,  2940,  1659,
    2941,  2038,  2058,  2947,  2373,  3242,  3243,  3244,  1660,  1661,
     505,  2951,  2952,  2965,  2998,  2374,   528,  3000,  3715,  3072,
    3068,   823,  3245,  3062,  1984,  3074,  3088,   613,  3089,  3094,
    2043,  3093,  3095,  3096,  2057,   824,  3835,  3830,  1387,  3125,
    3129,  3130,  3136,  2198,  3145,  4533,  3149,  3151,  3156,   529,
    3158,  1222,  3264,  3159,  1660,  1661,  4019,  3216,   825,  3269,
    3206,   826,  1327,  3160,  2375,  2376,  3309,   623,  3162,  3276,
     802,  4019,  2064,  3257,   827,  3297,  3314,  3308,  3325,   802,
    3828,  3163,  3326,  3217,   802,  4019,  3220,  3337,  3427,  3224,
    3338,  3229,  2377,  3808,  3877,  3222,   828,   530,  3430,   506,
    3232,  3881,  2047,  3585,  3355,  3433,  1358,  3262,  3292,  2048,
    3434,  3438,  3272,  3336,  3273,   802,  3958,  3451,  1985,  3456,
    3286,   829,  3279,  1359,  3289,  3452,  2049,   830,  2065,  2066,
    2067,   802,  3310,  -856,  3311,  2068,  3328,  3349,  3359,  1222,
    3367,  2894,  3368,  3444,  4019,  1937,  1662,  3369,  3440,  3457,
    3441,  2069,  3460,  2423,  2070,   623,  4019,  4019,  3857,  2378,
    1206,  1663,  1664,  3466,  4249,  3467,  3468,  3474,   831,  1969,
    3503,  3475,  3507,  3501,  3515,   802,   802,   802,   802,  3514,
    3527,   507,  3211,  2050,  2025,  2051,  2297,  3543,   802,  3544,
    2072,  3553,  1662,  3555,   859,  3565,  3578,  3887,  3558,  1224,
    1225,  3586,  4019,  2052,  3596,  3590,  3950,  1663,  1664,  3591,
    3607,  2379,  4019,  3608,  3604,  3613,  3622,  3629,  3677,  3680,
     623,  2624,   -65,  3682,  3684,  3690,  3694,   531,  3703,  3715,
    3715,  3704,  3715,  3715,  1266,  3705,  3708,  4095,  3709,  3711,
   -1436, -1441,  3246,  3727,  3731,  3738,  3115,  3734,  3735,  4019,
    1360,  4019,  3736,  3742,  3755,  1387,  3737,  2056,  3744,  3247,
    3746,  4019,  3754,  3747,  4503,  2058,  3750,  3756,  3764,  3771,
    3765,  3772,  3773,  3782,  3789,  3790,  3792,  2729,  4019,  3799,
    4019,  3801,  4019,  3787,  3802,  3807,  3806,  1224,  1225,  4019,
    4503,  3809,  3815,  3816,  3818,  3836,  3819,  3844,   532,  4019,
     832,  4535,  3833,  3668,  4029,   613,  3848,  3861,  1086,  3850,
    1361,  3862,  3961,  4019,  4019,  3866,  3715,  3868,  3671,  3869,
     834,  3875,  1102,  3888,  3904,  3889,  3909,  1362,   835,  4019,
    4019,  1267,  3911,  3923,  4019,  2064,   836,  3925,  3926,  3931,
    3927,  1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  3932,
    3933,  3944,  3945,  1134,  3951,  3974,  1268,  3980,  4030,   613,
    1269,   533,  3987,   729,   837,  3745,   534,  3988,  4024,  1151,
    3248,  4066,   623,  4047,  4033,  4059,  4061,   838,   839,  4068,
    4079,  4070,   508,  4076,   535,  4111,  3249,  -347,  4119,  4137,
    4112,  2065,  2066,  2067,  4142,  4139,  4149,  1270,  2068,  4152,
    4160,  4159,   509,  4168,  4180,  4123,  4182,  4183,  4188,   536,
    4130,  4191,  4077,  4195,  2069,  1271,  1196,  2070,  4216,  4193,
    3057,  -365,  4213,  4243,   537,  4244,  4241,   840,  4245,  1227,
    1228,  1229,  1230,  1231,  1232,  1233,  1234,   802,  4287,  4267,
    4316,  4270,  4292,  4299,  4302,   510,  3250,  -572,  4272,  4305,
     511,  4306,  4313,  2072,  4312,  4316,   841,  4317,  4323,  4324,
    4325,  4328,  4331,  3251,  4332,  4333,  4352,  4353,  4354,  4326,
    4355,  4334,  4338,  2894,  4361,  2894,  4362,  1272,   842,  4363,
     843,  4368,  4370,  4372,  4286,   512,  1266,  4373, -2336,  4376,
    1729,  4382,  4397,   513,  4400,  4402,  3950,  4403,   802,   802,
    4414,  4416,  4411,  4424,  4425,  4429,  4427,   802,   802,   802,
     802,   802,   802,   802,  4432,  4435,  4442,  4443,  4448,  4444,
    4449,   802,   802,  4456,   802,   802,  4453,  4461,  4459,   802,
     802,  4460,  4463,   802,   802,   802,   802,  4467,   802,   802,
    4217,  4469,  4154,  4472,  4473,  4475,   802,   802,  4478,   802,
     802,   802,   802,   802,  4482,  4483,   802,   802,   802,   802,
     802,   802,   802,   802,   802,   802,   802,  4485,   802,  4492,
    4507,   802,   802,  4508,  4512,  4132,   802,  4532,  4522,  2842,
     802,   802,   802,  1267,  2662,  3692,  4316,  2840,  3693,  2959,
    1070,  3892,  4150,   802,   802,   802,  4423,  4252,  4383,  1505,
    4384,   623,   802,  3890,  4028,  1273,  3894,  4524,  1268,   802,
     802,   802,  1269,   802,  1274,  4487,   582,  2432,  3253,   964,
     802,   802,   802,  4408,   802,   802,   802,   802,   802,  1275,
     802,   802,   802,   802,   802,   802,   802,   802,  2357,  4496,
    3999,   802,   802,  4310,  4395,  4455,  4409,  1276,  4000,  1270,
    4002,  4003,  4005,  4006,  4007,  4008,  4009,  4381,  4010,  4013,
    4014,  4015,  2021,  4321,  4316,  4322,  4316,  1271,  1573,  2615,
    2073,  3363,  3275,  4474,  3557,  1528,  2876,  1850,  4178,  4078,
    4036,  1729,  4271,  4316,  4276,  2638,  2639,  3795,  2646,  4396,
    1277,  2649,  2650,  2651,  2652,  2653,  2654,  2655,  4458,  4434,
    2658,  4190,  2660,   660,   623,  2136,  2613,  3710,  3113,  3621,
    3449,  3059,  2620,  4316,  4316,  3609,  3636,  3678,  4511,  3637,
    1278,  3982,  3867,  3829,  4337,  3853,  2949,  3208,  3532,  1272,
    3528,  3530,   520,  4197,   521,  4200,  1614,  1615,  4157,   499,
    4199,  2166,   500,  4164,  4162,  1625,  1626,  3079,  3079,  1629,
    1630,  1631,  4046,  2704,  2617,  3985,  3047,  1964,  1962,  1639,
    1640,   623,  1641,  1642,   975,  3832,  2878,  1667,  3610,  2097,
    3266,  1676,  1677,  1678,  1679,  2134,  1681,  2415,  3554,  2860,
    4345,  4346,  1482,  4413,  1689,  1690,  2815,  1693,  1694,   802,
    4421,   995,   991,  2901,  1698,  1699,  1700,  1973,  3539,  1703,
    1704,  1705,  1706,  1707,  1708,  3231,  1710,   802,  1377,  1713,
    1714,  2759,  2723,  3471,  1717,  4525,  1683,  2814,  1720,  1724,
    1725,  4170,  4385,     1,  4065,     2,  4386,  3691,  3962,  1634,
    2831,  1732,  1733,  1734,  3616,  4284,  4477,  3960,  1838,  2730,
    1742,     3,  2908,  1790,  1485,     4,  1486,  1747,  1748,  1749,
    2884,  2858,  3797,  1865,  1487,  3569,  3568,  1273,  4465,     5,
       6,  3593,  4335,  4470,   979,  1488,  1274,     7,  2196,  1094,
    2486,     8,     9,   960,  1930,  2487,  3620,  1872,  2351,  3556,
    1785,  1275,  4457,  4356,  4404,  4476,  4534,    10,  4531,  3860,
    1087,  2921,  3572,  3587,   922,  3588,   923,  2313,  4504,  1276,
    2465,  2919,  2918,  1952,  2911,  1879,    11,   891,  1365,  1831,
    2395,  4069,  2156,  3254,  4075,   893,  1370,   654,   655,  4141,
    3885,  1074,  1729,  1075,  4504,  1076,     0,     0,    12,    13,
       0,     0,   623,     0,     0,     0,  1729,     0,    14,    15,
      16,  1729,  1277,     0,     0,     0,  1729,     0,     0,     0,
       0,    17,    18,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    19,     0,     0,     0,     0,   925,
       0,     0,  1278,     0,     0,     0,     0,     0,    20,   867,
     926,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1529,     0,    21,     0,     0,     0,
       0,     0,     0,     0,   927,   910,     0,     0,     0,     0,
       0,    22,     0,    23,     0,   928,     0,     0,    24,     0,
       0,    25,     0,     0,     0,     0,   802,  1889,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   929,     0,   930,
       0,   931,     0,     0,    26,  1917,    27,     0,     0,     0,
       0,   932,     0,     0,  1530,  1531,  1532,  1533,  1534,  1535,
    1536,  1537,  1538,  1539,    28,  1540,  1541,  1542,  1543,  1544,
    1545,  1546,  1547,  1548,     0,  1549,  1550,     0,     0,     0,
       0,    29,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1802,   933,     0,     0,     0,     0,   934,     0,     0,   935,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   802,   802,   802,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   936,   802,
     937,     0,     0,     0,     0,     0,     0,   938,     0,   939,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   802,     0,     0,     0,     0,
       0,   802,   940,   941,   802,     0,   802,     0,     0,     0,
       0,    31,   802,     0,   802,   802,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   942,     0,    32,     0,
    1551,  1552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,   943,     0,     0,
       0,     0,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,    36,     0,    37,
     944,     0,    38,     0,     0,    39,    40,     0,     0,     0,
     802,     0,     0,     0,  2208,    41,     0,    42,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,    44,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,     0,     0,    46,     0,    47,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   802,     0,
       0,     0,     0,     0,     0,   945,   802,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    48,     0,     0,     0,
       1,     0,     2,    49,     0,     0,     0,     0,     0,     0,
     946,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     947,   948,     4,     0,   949,   950,     0,     0,     0,     0,
       0,     0,  2283,  2285,  2287,     0,     5,     6,     0,     0,
       0,     0,     0,     0,     7,   951,    50,     0,     8,     9,
       0,     0,     0,     0,     0,     0,     0,     0,    51,     0,
       0,     0,    52,     0,    10,    53,     0,     0,     0,     0,
      54,     0,     0,  2322,     0,     0,     0,     0,     0,     0,
       0,     0,  2327,    11,  2328,     0,     0,     0,     0,     0,
       0,   952,     0,     0,     0,     0,     0,     0,    55,     0,
       0,     0,     0,     0,   953,    12,    13,     0,     0,     0,
       0,     0,     0,    56,     0,    14,    15,    16,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0, -2373,     0,     0,     0,   954,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    20,     0,   955,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2411,  2028,
    2029,     0,     0,    21,     0,     0,     0,     0,     0,   802,
       0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
      23,     0,     0,     0,     0,    24,     0,     0,    25,     0,
       0,     0,  -790,  -790,  2031,     0,     0,     0,     0,     0,
       0,     0,  -790,     0, -2373,     0,  2464,     0,  2034,     0,
     956,    26,     0,    27,  2474,     0,  2035,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2037,     0,   802,     0,     0,     0,     0,    29,     0,
       0,     0,    30,     0,     0,     0,  1493,     0,     0,     0,
    2038,     0,     0,   802,     0,     0,     0,   802,     0,     0,
       0,     0,   802,   802,     0,     0,     0,     0,     0,     0,
       0,   802,     0,     0,   802,     0,     0,     0,     0,  2043,
       0,     0,     0,     0,   802,   802,     0,   802,   802,     0,
     802,   802,   802,   802,   802,     0,     0,   802,     0,     0,
       0,     0,     0,     0,     0,     0,   802,     0,     0,     0,
       0,     0,     0,   802,     0,   802,     0,   802,   802,     0,
     802,   802,     0,     0,     0,   802,   802,   802,     0,     0,
       0,   802,   802,   802,     0,   802,     0,   802,    31,   802,
       0,   802,     0,   802,     0,     0,     0,     0,   802,     0,
       0,  2047,     0,     0,     0,    32,     0,     0,  2048,     0,
       0,     0,     0,     0,     0,     0,     0,   802,    33,     0,
       0,     0,     0,     0,   802,  2049,     0,   802,     0,    34,
       0,     0,     0,   802,     0,     0,   802,     0,  2694,     0,
     802,     0,     0,     0,     0,     0,     0,  2631,     0,     0,
       0,    35,     0,     0,    36,     0,    37,     0,     0,    38,
       0,     0,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,    42,     0,     0,     0,     0,     0,
       0,     0,    43,     0,  2051,     0,     0,     0,    44,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     802,    46,  2052,    47,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2722,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    48,     0,     0,     0,     0,     0,     0,
      49,  2739,   820,   821,     0,  2741,     0,     0,     0,     0,
    2743,  2744,     0,     0,     0,     0,  2056,     0,     0,  2757,
       0,     0,     0,     0,  2058,     0,     0,     0,     0,     0,
     802,     0,  2764,  2765,   802,  2766,     0,     0,  2768,  2769,
    2770,  2771,  2772,    50,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2776,    51,     0,     0,     0,    52,
       0,  2777,    53,  2778,     0,  2779,  2780,    54,  2781,   888,
     821,     0,     0,  2784,  2785,  2786,     0,     0,     0,  2788,
    2789,  2790,     0,  2791,     0,  2793,   822,  2795,     0,  2797,
       0,  2798,     0,     0,  2064,    55,  2799,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      56,     0,     0,  2028,  2029,  2819,     0,     0,   823,     0,
       0,     0,     0,     0,     0,     0,     0,  3372,  3373,     0,
       0,  2829,   824,  3374,  2832,  3375,     0,  3376,  3377,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2031,     0,
    2065,  2066,  2067,   822,  3378,   825,     0,  2068,   826,     0,
       0,     0,  2034,     0,     0,     0,     0,     0,     0,     0,
    2035,   827,     0,  2069,     0,     0,  2070,     0,     0,     0,
       0,     0,     0,     0,     0,   823,     0,     0,     0,     0,
       0,     0,     0,   828,     0,  2037,     0,     0,     0,   824,
       0,     0,     0,  3379,     0,     0,  3380,     0,     0,     0,
    1493,     0,  2072,     0,  2038,  3381,     0,     0,   829,     0,
       0,     0,   825,     0,   830,   826,     0,     0,     0,     0,
       0,     0,     0,     0,  3382,     0,     0,     0,   827,     0,
       0,     0,     0,  2043,     0,     0,     0,     0,     0,     0,
       0,  3383,     0,     0,     0,     0,     0,     0,     0,     0,
     828,     0,     0,     0,     0,   831,  2695,     0,  2474,     0,
       0,     0,     0,     0,     0,     0,     0,  3384,     0,  3385,
       0,     0,     0,     0,     0,   829,     0,     0,     0,     0,
       0,   830,  3386,  3387,     0,     0,     0,     0,     0,     0,
       0,   802,     0,     0,     0,   802,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2047,     0,     0,     0,     0,
       0,     0,  2048,     0,     0,   802,   802,     0,     0,     0,
       0,     0,   831,  3388,     0,     0,     0,     0,     0,  2049,
       0,     0,     0,     0,     0,     0,   802,     0,     0,     0,
       0,     0,     0,     0,     0,   802,     0,   802,     0,   802,
       0,     0,     0,  3389,     0,     0,     0,     0,     0,     0,
       0,     0,  3390,  3391,     0,  3392,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   802,     0,     0,     0,
       0,   802,     0,     0,     0,     0,     0,   832,  2051,     0,
       0,   833,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3393,  3394,  3395,     0,     0,  2052,   834,   802,     0,
       0,     0,     0,     0,     0,   835,     0,     0,     0,     0,
    3396,  3397,  3398,   836,     0,     0,     0,  3399,     0,     0,
    3400,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3401,  3402,     0,
       0,   837,     0,     0,   832,     0,     0,     0,   889,     0,
    2056,     0,     0,     0,   838,   839,     0,     0,  2058,     0,
       0,     0,     0,   802,   834,     0,     0,     0,     0,     0,
    3403,  3404,   835,     0,     0,     0,     0,     0,     0,     0,
     836,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,     0,     0,     0,  3405,     0,     0,     0,     0,
       0,     0,     0,     0,   840,     0,     0,     0,   837,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3141,
       0,   838,   839,  3143,     0,     0,     0,     0,  2064,     0,
       0,     0,     0,   841,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3165,  3166,     0,     0,     0,     0,  3406,
       0,     0,     0,  3407,     0,   842,     0,   843,     0,     0,
       0,     0,     0,     0,  3188,  3408,     0,     0,     0,     0,
       0,   840,     0,  3198,     0,  3200,     0,  3202,     0,     0,
       0,     0,     0,     0,  2065,  2066,  2067,     0,     0,     0,
       0,  2068,     0,     0,     0,     0,     0,     0,     0,     0,
     841,     0,     0,     0,     0,     0,     0,  2069,   802,   802,
    2070,     0,     0,  3045,     0,     0,     0,     0,  2025,     0,
    2026,     0,   842,  3409,   843,     0,  3410,     0,     0,  3411,
    3412,  3413,  3414,  2028,  2029,     0,  3263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2072,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2030,     0,     0,     0,  2031,     0,
       0,  3415,  3416,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2034,     0,     0,     0,     0,   802,     0,     0,
    2035,     0,     0,     0,     0,     0,  3417,     0,     0,     0,
    2036,  2474,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   802,     0,     0,  2037,   802,   802,     0,   802,
       0,     0,     0,     0,     0,     0,     0,     0,   802,  3331,
    1493,     0,     0,   802,  2038,     0,   802,     0,   802,   802,
       0,     0,  2039,     0,     0,     0,     0,     0,     0,  3046,
       0,     0,     0,     0,     0,     0,     0,  2042,     0,     0,
       0,     0,     0,  2043,     0,     0,     0,     0,     0,     0,
       0,   802,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2045,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   802,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   802,     0,
       0,     0,     0,     0,     0,  2047,     0,     0,     0,     0,
       0,     0,  2048,     0,     0,     0,  3428,  3429,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2049,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   802,     0,     0,     0,     0,     0,   802,
       0,     0,  2050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2051,     0,
       0,     0,     0,     0,     0,  3488,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2052,     0,     0,     0,
    2053,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3506,     0,     0,     0,  3509,  3510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3517,     0,     0,     0,
       0,  3519,     0,     0,  3520,     0,  3521,  3522,     0,     0,
       0,     0,     0,  2055,     0,     0,     0,     0,     0,     0,
    2056,     0,     0,     0,     0,     0,     0,     0,  2058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,   802,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3550,  2061,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3550,     0,  2064,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   802,
       0,  3550,     0,     0,     0,     0,     0,  3601,     0,     0,
       0,     0,     0,     0,  2065,  2066,  2067,     0,     0,     0,
       0,  2068,     0,     0,     0,     0,     0,     0,     0,   802,
       0,     0,     0,     0,     0,     0,     0,  2069,     0,     0,
    2070,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2072,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3725,
    3726,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   802,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     802,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   802,     0,     0,  3550,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4017,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,     0,   802,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   802,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   802,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,     0,  3924,     0,     0,     0,  4017,  4017,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3550,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3331,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   802,     0,   802,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   802,     0,  4017,  4017,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4058,
       0,  4060,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4101,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   802,     0,  4017,     0,     0,     0,     0,  4118,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4017,
     802,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4017,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   802,  4017,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4017,  4017,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3331,
       0,     0,     0,     0,   802,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4211,     0,  4212,     0,     0,     0,     0,     0,     0,     0,
    4017,     0,  4220,     0,     0,     0,     0,   802,     0,     0,
    4017,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     802,     0,     0,     0,     0,     0,     0,  4017,     0,  4017,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4017,
       0,     0,     0,     0,     0,   802,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4017,     0,  4017,     0,
    4017,     0,     0,     0,     0,     0,     0,  4017,     0,     0,
    4314,     0,     0,     0,     0,     0,     0,  4017,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4319,     0,
       0,  4017,  4017,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4017,  4017,     0,
       0,     0,  4017,     0,     0,     0,     0,     0,   802,  3550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   802,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4366,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4415,     0,     0,     0,     0,
       0,     0,     0,   139,     0,   673,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   674,
       0,   148,   149,   150,   151,   152,   675,   154,  4441,   155,
       0,     0,   676,   156,   677,   678,   679,   157,   680,     0,
     158,   159,   160,  1721,   161,     0,   162,   163,     0,     0,
     164,   681,   682,   165,   166,     0,   167,   683,   684,   169,
       0,   170,   171,   172,   173,   685,   175,     0,   686,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   687,   193,     0,
     194,   688,   689,   195,     0,     0,   196,   690,   197,   691,
       0,   198,   692,   693,     0,   199,   200,   201,   694,   695,
     696,     0,     0,     0,     0,   697,     0,   204,   698,     0,
       0,   699,   205,   206,     0,   207,  4513,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,  3550,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   700,     0,   232,
     233,   234,   235,   236,   701,   702,   237,   238,     0,   239,
     240,   241,   703,     0,   242,     0,     0,     0,   704,   244,
       0,   245,     0,   246,     0,   247,   705,   249,   706,     0,
     251,     0,   252,     0,   707,     0,   253,   254,     0,   255,
     708,     0,   256,   257,     0,     0,     0,   709,   259,   260,
     261,   710,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,   711,   266,   267,   712,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,  1722,   276,     0,   713,
     277,   278,     0,     0,     0,     0,     0,   714,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   715,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   716,   306,   307,   308,
     309,   717,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   718,   317,     0,     0,   719,   319,   720,   320,
       0,   321,   721,   722,   723,   724,   725,   326,   327,   328,
     329,   330,     0,   726,   331,   332,     0,     0,   333,   334,
     335,   336,   727,   728,   729,   337,   338,     0,   730,   731,
     339,     0,   340,   341,   732,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,   733,   350,   351,     0,   352,   353,   734,
     355,   356,   357,   358,   735,   736,   361,   737,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   738,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,   739,
     740,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   741,     0,   742,   398,   399,   400,   401,   402,
     743,   744,   405,   406,   407,   408,     0,   745,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   746,
     747,   439,   440,     0,   441,   442,   748,   444,   445,   446,
     749,   750,   447,   448,   449,   450,   751,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   752,   457,   458,     0,
     753,   754,   755,   756,     0,     0,     0,     0,  1723,   463,
     464,     0,   757,   758,   759,   466,   467,   468,   760,   469,
     470,   761,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   762,   479,     0,     0,
     763,   764,   765,   766,   480,     0,     0,   481,   767,     0,
     768,   482,   483,   484,   769,   770,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     771,     0,     0,     0,   772,   773,     0,     0,     0,     0,
     774,   775,     0,     0,   776,   777,     0,     0,   778,   779,
     139,     0,   673,   141,   142,   143,   144,  2470,     0,   145,
       0,     0,     0,   146,     0,     0,   674,     0,   148,   149,
     150,   151,   152,   675,   154,     0,   155,     0,     0,  2471,
     156,   677,   678,   679,   157,   680,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   681,   682,
     165,   166,     0,   167,   683,   684,   169,     0,   170,   171,
     172,   173,   685,   175,     0,   686,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,   188,
       0,   189,   190,   191,   687,   193,     0,   194,   688,   689,
     195,     0,     0,   196,   690,   197,   691,     0,   198,   692,
     693,     0,   199,   200,   201,   694,   695,   696,     0,     0,
       0,     0,   697,     0,   204,   698,     0,     0,  2472,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   700,     0,   232,   233,   234,   235,
     236,   701,   702,   237,   238,     0,   239,   240,   241,   703,
       0,   242,     0,     0,     0,   704,   244,     0,   245,     0,
     246,     0,   247,   705,   249,   706,     0,   251,     0,   252,
       0,   707,     0,   253,   254,     0,   255,   708,     0,   256,
     257,     0,     0,     0,   709,   259,   260,   261,   710,     0,
     262,   263,   264,     0,     0,   265,     0,     0,     0,   711,
     266,   267,   712,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,   713,   277,   278,     0,
       0,     0,     0,     0,   714,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,   715,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   716,   306,   307,   308,   309,   717,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   718,
     317,     0,     0,   719,   319,   720,   320,     0,   321,   721,
     722,   723,   724,   725,   326,   327,   328,   329,   330,     0,
     726,   331,   332,     0,     0,   333,   334,   335,   336,   727,
     728,   729,   337,   338,     0,   730,   731,   339,     0,   340,
     341,   732,  2473,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
     733,   350,   351,     0,   352,   353,   734,   355,   356,   357,
     358,   735,   736,   361,   737,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   738,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,   739,   740,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   741,
       0,   742,   398,   399,   400,   401,   402,   743,   744,   405,
     406,   407,   408,     0,   745,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   746,   747,   439,   440,
       0,   441,   442,   748,   444,   445,   446,   749,   750,   447,
     448,   449,   450,   751,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   752,   457,   458,     0,   753,   754,   755,
     756,     0,     0,     0,     0,     0,   463,   464,     0,   757,
     758,   759,   466,   467,   468,   760,   469,   470,   761,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   762,   479,     0,     0,   763,   764,   765,
     766,   480,     0,     0,   481,   767,     0,   768,   482,   483,
     484,   769,   770,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   771,     0,     0,
       0,   772,   773,     0,     0,     0,     0,   774,   775,     0,
       0,   776,   777,     0,     0,   778,   779,   139,     0,   673,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   674,     0,   148,   149,   150,   151,   152,
     675,   154,     0,   155,     0,     0,   676,   156,   677,   678,
     679,   157,   680,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   681,   682,   165,   166,     0,
     167,   683,   684,   169,     0,   170,   171,   172,   173,   685,
     175,     0,   686,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   687,   193,     0,   194,   688,   689,   195,     0,     0,
     196,   690,   197,   691,     0,   198,   692,   693,     0,   199,
     200,   201,   694,   695,   696,     0,     0,     0,     0,   697,
       0,   204,   698,     0,     0,   699,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   700,     0,   232,   233,   234,   235,   236,   701,   702,
     237,   238,     0,   239,   240,   241,   703,     0,   242,     0,
       0,     0,   704,   244,  2282,   245,     0,   246,     0,   247,
     705,   249,   706,     0,   251,     0,   252,     0,   707,     0,
     253,   254,     0,   255,   708,     0,   256,   257,     0,     0,
       0,   709,   259,   260,   261,   710,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,   711,   266,   267,   712,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   713,   277,   278,     0,     0,     0,     0,
       0,   714,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   715,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     716,   306,   307,   308,   309,   717,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   718,   317,     0,     0,
     719,   319,   720,   320,     0,   321,   721,   722,   723,   724,
     725,   326,   327,   328,   329,   330,     0,   726,   331,   332,
       0,     0,   333,   334,   335,   336,   727,   728,   729,   337,
     338,     0,   730,   731,   339,     0,   340,   341,   732,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,   733,   350,   351,
       0,   352,   353,   734,   355,   356,   357,   358,   735,   736,
     361,   737,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   738,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,   739,   740,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   741,     0,   742,   398,
     399,   400,   401,   402,   743,   744,   405,   406,   407,   408,
       0,   745,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   746,   747,   439,   440,     0,   441,   442,
     748,   444,   445,   446,   749,   750,   447,   448,   449,   450,
     751,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     752,   457,   458,     0,   753,   754,   755,   756,     0,     0,
       0,     0,     0,   463,   464,     0,   757,   758,   759,   466,
     467,   468,   760,   469,   470,   761,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     762,   479,     0,     0,   763,   764,   765,   766,   480,     0,
       0,   481,   767,     0,   768,   482,   483,   484,   769,   770,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   771,     0,     0,     0,   772,   773,
       0,     0,     0,     0,   774,   775,     0,     0,   776,   777,
       0,     0,   778,   779,   139,     0,   673,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     674,     0,   148,   149,   150,   151,   152,   675,   154,     0,
     155,     0,     0,   676,   156,   677,   678,   679,   157,   680,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   681,   682,   165,   166,     0,   167,   683,   684,
     169,     0,   170,   171,   172,   173,   685,   175,     0,   686,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,   188,     0,   189,   190,   191,   687,   193,
       0,   194,   688,   689,   195,     0,     0,   196,   690,   197,
     691,     0,   198,   692,   693,     0,   199,   200,   201,   694,
     695,   696,     0,     0,     0,     0,   697,     0,   204,   698,
       0,     0,   699,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,   700,     0,
     232,   233,   234,   235,   236,   701,   702,   237,   238,     0,
     239,   240,   241,   703,     0,   242,     0,     0,     0,   704,
     244,  2284,   245,     0,   246,     0,   247,   705,   249,   706,
       0,   251,     0,   252,     0,   707,     0,   253,   254,     0,
     255,   708,     0,   256,   257,     0,     0,     0,   709,   259,
     260,   261,   710,     0,   262,   263,   264,     0,     0,   265,
       0,     0,     0,   711,   266,   267,   712,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
     713,   277,   278,     0,     0,     0,     0,     0,   714,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,   715,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   716,   306,   307,
     308,   309,   717,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   718,   317,     0,     0,   719,   319,   720,
     320,     0,   321,   721,   722,   723,   724,   725,   326,   327,
     328,   329,   330,     0,   726,   331,   332,     0,     0,   333,
     334,   335,   336,   727,   728,   729,   337,   338,     0,   730,
     731,   339,     0,   340,   341,   732,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,   733,   350,   351,     0,   352,   353,
     734,   355,   356,   357,   358,   735,   736,   361,   737,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   738,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     739,   740,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   741,     0,   742,   398,   399,   400,   401,
     402,   743,   744,   405,   406,   407,   408,     0,   745,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     746,   747,   439,   440,     0,   441,   442,   748,   444,   445,
     446,   749,   750,   447,   448,   449,   450,   751,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   752,   457,   458,
       0,   753,   754,   755,   756,     0,     0,     0,     0,     0,
     463,   464,     0,   757,   758,   759,   466,   467,   468,   760,
     469,   470,   761,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   762,   479,     0,
       0,   763,   764,   765,   766,   480,     0,     0,   481,   767,
       0,   768,   482,   483,   484,   769,   770,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   771,     0,     0,     0,   772,   773,     0,     0,     0,
       0,   774,   775,     0,     0,   776,   777,     0,     0,   778,
     779,   139,     0,   673,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   674,     0,   148,
     149,   150,   151,   152,   675,   154,     0,   155,     0,     0,
     676,   156,   677,   678,   679,   157,   680,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   681,
     682,   165,   166,     0,   167,   683,   684,   169,     0,   170,
     171,   172,   173,   685,   175,     0,   686,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   687,   193,     0,   194,   688,
     689,   195,     0,     0,   196,   690,   197,   691,     0,   198,
     692,   693,     0,   199,   200,   201,   694,   695,   696,     0,
       0,     0,     0,   697,     0,   204,   698,     0,     0,   699,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   700,     0,   232,   233,   234,
     235,   236,   701,   702,   237,   238,     0,   239,   240,   241,
     703,     0,   242,     0,     0,     0,   704,   244,  2286,   245,
       0,   246,     0,   247,   705,   249,   706,     0,   251,     0,
     252,     0,   707,     0,   253,   254,     0,   255,   708,     0,
     256,   257,     0,     0,     0,   709,   259,   260,   261,   710,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
     711,   266,   267,   712,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   713,   277,   278,
       0,     0,     0,     0,     0,   714,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   715,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   716,   306,   307,   308,   309,   717,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     718,   317,     0,     0,   719,   319,   720,   320,     0,   321,
     721,   722,   723,   724,   725,   326,   327,   328,   329,   330,
       0,   726,   331,   332,     0,     0,   333,   334,   335,   336,
     727,   728,   729,   337,   338,     0,   730,   731,   339,     0,
     340,   341,   732,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,   733,   350,   351,     0,   352,   353,   734,   355,   356,
     357,   358,   735,   736,   361,   737,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   738,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,   739,   740,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     741,     0,   742,   398,   399,   400,   401,   402,   743,   744,
     405,   406,   407,   408,     0,   745,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   746,   747,   439,
     440,     0,   441,   442,   748,   444,   445,   446,   749,   750,
     447,   448,   449,   450,   751,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   752,   457,   458,     0,   753,   754,
     755,   756,     0,     0,     0,     0,     0,   463,   464,     0,
     757,   758,   759,   466,   467,   468,   760,   469,   470,   761,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   762,   479,     0,     0,   763,   764,
     765,   766,   480,     0,     0,   481,   767,     0,   768,   482,
     483,   484,   769,   770,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   771,     0,
       0,     0,   772,   773,     0,     0,     0,     0,   774,   775,
       0,     0,   776,   777,     0,     0,   778,   779,   139,     0,
     673,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   674,     0,   148,   149,   150,   151,
     152,   675,   154,     0,   155,     0,     0,   676,   156,   677,
     678,   679,   157,   680,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   681,   682,   165,   166,
       0,   167,   683,   684,   169,     0,   170,   171,   172,   173,
     685,   175,     0,   686,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,     0,   189,
     190,   191,   687,   193,     0,   194,   688,   689,   195,     0,
       0,   196,   690,   197,   691,     0,   198,   692,   693,     0,
     199,   200,   201,   694,   695,   696,     0,     0,     0,     0,
     697,     0,   204,   698,     0,     0,   699,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   700,     0,   232,   233,   234,   235,   236,   701,
     702,   237,   238,     0,   239,   240,   241,   703,     0,   242,
       0,     0,     0,   704,   244,     0,   245,     0,   246,     0,
     247,   705,   249,   706,     0,   251,     0,   252,     0,   707,
       0,   253,   254,     0,   255,   708,     0,   256,   257,     0,
       0,     0,   709,   259,   260,   261,   710,     0,   262,   263,
     264,     0,     0,   265,     0,     0,     0,   711,   266,   267,
     712,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,   713,   277,   278,     0,     0,     0,
       0,     0,   714,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,   715,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   716,   306,   307,   308,   309,   717,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   718,   317,     0,
       0,   719,   319,   720,   320,     0,   321,   721,   722,   723,
     724,   725,   326,   327,   328,   329,   330,     0,   726,   331,
     332,     0,     0,   333,   334,   335,   336,   727,   728,   729,
     337,   338,     0,   730,   731,   339,     0,   340,   341,   732,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,   733,   350,
     351,     0,   352,   353,   734,   355,   356,   357,   358,   735,
     736,   361,   737,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   738,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,   739,   740,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   741,     0,   742,
     398,   399,   400,   401,   402,   743,   744,   405,   406,   407,
     408,     0,   745,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   746,   747,   439,   440,     0,   441,
     442,   748,   444,   445,   446,   749,   750,   447,   448,   449,
     450,   751,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   752,   457,   458,     0,   753,   754,   755,   756,     0,
       0,     0,     0,     0,   463,   464,     0,   757,   758,   759,
     466,   467,   468,   760,   469,   470,   761,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   762,   479,     0,     0,   763,   764,   765,   766,   480,
       0,     0,   481,   767,     0,   768,   482,   483,   484,   769,
     770,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   771,     0,     0,     0,   772,
     773,     0,     0,     0,     0,   774,   775,     0,     0,   776,
     777,     0,     0,   778,   779,   139,     0,   673,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   674,     0,   148,   149,   150,   151,   152,   675,   154,
       0,   155,     0,     0,   676,   156,   677,   678,   679,   157,
     680,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,   681,   682,   165,   166,     0,   167,   683,
     684,   169,     0,   170,   171,   172,   173,   685,   175,     0,
     686,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   687,
     193,     0,   194,   688,   689,   195,     0,     0,   196,   690,
     197,   691,     0,   198,   692,   693,     0,   199,   200,   201,
     694,   695,   696,     0,     0,     0,     0,   697,     0,   204,
     698,     0,     0,   699,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   700,
       0,   232,   233,   234,   235,   236,   701,   702,   237,   238,
       0,   239,   240,   241,   703,     0,   242,     0,     0,     0,
     704,   244,     0,   245,     0,   246,     0,   247,   705,   249,
     706,     0,   251,     0,   252,     0,   707,     0,   253,   254,
       0,   255,   708,     0,   256,   257,     0,     0,     0,   709,
     259,   260,   261,   710,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,   711,   266,   267,   712,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,   713,   277,   278,     0,     0,     0,     0,     0,   714,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     715,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   716,   306,
     307,   308,   309,   717,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   718,   317,     0,     0,   719,   319,
     720,   320,     0,   321,   721,   722,   723,   724,   725,   326,
     327,   328,   329,   330,     0,   726,   331,   332,     0,     0,
     333,   334,   335,   336,   727,   728,   729,   337,   338,     0,
     730,   731,   339,     0,   340,   341,   732,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,   733,   350,   351,     0,   352,
     353,   734,   355,   356,   357,   358,   735,   736,   361,   737,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   738,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,   739,   740,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   741,     0,   742,   398,   399,   400,
     401,   402,   743,   744,   405,   406,   407,   408,     0,   745,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   746,   747,   439,   440,     0,   441,   442,   748,   444,
     445,   446,   749,   750,   447,   448,   449,   450,   751,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   752,   457,
     458,     0,   753,   754,   755,   756,     0,     0,     0,     0,
       0,   463,   464,     0,   757,   758,   759,   466,   467,   468,
     760,   469,   470,   761,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   762,   479,
       0,     0,   763,   764,   765,   766,   480,     0,     0,   481,
     767,     0,   768,   482,   483,   484,   769,   770,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   771,     0,     0,     0,   772,   773,     0,     0,
       0,     0,   774,  1133,     0,     0,   776,   777,     0,     0,
     778,   779,   139,     0,   673,   141,   142,   143,   144,  1756,
       0,   145,     0,     0,     0,  1757,     0,     0,   674,     0,
     148,   149,   150,   151,   152,   675,   154,     0,   155,     0,
       0,   676,   156,   677,   678,   679,   157,   680,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     681,   682,   165,   166,     0,   167,   683,   684,   169,     0,
     170,   171,   172,   173,   685,   175,     0,   686,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,     0,
     187,   188,     0,   189,   190,   191,   687,   193,     0,   194,
     688,   689,   195,     0,     0,   196,   690,   197,   691,     0,
     198,   692,   693,     0,   199,   200,   201,   694,   695,   696,
       0,     0,     0,     0,   697,     0,   204,   698,     0,     0,
     699,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,   214,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,   219,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   700,     0,   232,   233,
     234,   235,   236,   701,   702,   237,   238,     0,   239,   240,
     241,   703,     0,   242,     0,     0,     0,   704,   244,     0,
     245,     0,   246,     0,   247,   705,   249,   706,     0,   251,
       0,   252,     0,   707,     0,   253,   254,     0,   255,   708,
       0,   256,   257,     0,     0,     0,   709,   259,   260,   261,
     710,     0,   262,   263,   264,     0,     0,   265,     0,     0,
       0,   711,   266,   267,   712,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,   713,   277,
     278,     0,     0,     0,     0,     0,   714,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,   715,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   716,   306,   307,   308,   309,
     717,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   718,   317,     0,     0,   719,   319,   720,   320,     0,
     321,   721,   722,   723,   724,   725,   326,   327,   328,   329,
     330,     0,   726,   331,   332,     0,     0,   333,   334,   335,
     336,   727,     0,   729,   337,   338,     0,   730,   731,   339,
       0,   340,   341,   732,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,   733,   350,   351,     0,   352,   353,   734,   355,
     356,   357,   358,   735,   736,   361,   737,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     738,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,   739,   740,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   741,     0,   742,   398,   399,   400,   401,   402,   743,
     744,   405,   406,   407,   408,     0,   745,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   746,   747,
     439,   440,     0,   441,   442,   748,   444,   445,   446,   749,
     750,   447,   448,   449,   450,   751,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   752,   457,   458,     0,   753,
     754,   755,   756,     0,     0,     0,     0,     0,   463,   464,
       0,   757,   758,   759,   466,   467,   468,   760,   469,   470,
     761,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   762,   479,     0,     0,   763,
     764,   765,   766,   480,     0,     0,   481,   767,     0,   768,
     482,   483,   484,   769,   770,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   771,
       0,     0,     0,   772,   773,     0,     0,     0,     0,   774,
     775,     0,     0,   776,   777,     0,     0,   778,   779,   139,
       0,   673,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   674,     0,   148,   149,   150,
     151,   152,   675,   154,     0,   155,     0,     0,   676,   156,
     677,   678,   679,   157,   680,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   681,   682,   165,
     166,     0,   167,   683,   684,   169,     0,   170,   171,   172,
     173,   685,   175,     0,   686,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   687,   193,     0,   194,   688,   689,   195,
       0,     0,   196,   690,   197,   691,     0,   198,   692,   693,
       0,   199,   200,   201,   694,   695,   696,     0,     0,     0,
       0,   697,     0,   204,   698,     0,     0,   699,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   700,     0,   232,   233,   234,   235,   236,
     701,   702,   237,   238,     0,   239,   240,   241,   703,     0,
     242,     0,     0,     0,   704,   244,     0,   245,     0,   246,
       0,   247,   705,   249,   706,     0,   251,     0,   252,     0,
     707,     0,   253,   254,     0,   255,   708,     0,   256,   257,
       0,     0,     0,   709,   259,   260,   261,   710,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,   711,   266,
     267,  2738,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   713,   277,   278,     0,     0,
       0,     0,     0,   714,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   715,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   716,   306,   307,   308,   309,   717,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   718,   317,
       0,     0,   719,   319,   720,   320,     0,   321,   721,   722,
     723,   724,   725,   326,   327,   328,   329,   330,     0,   726,
     331,   332,     0,     0,   333,   334,   335,   336,   727,   728,
     729,   337,   338,     0,   730,   731,   339,     0,   340,   341,
     732,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,   733,
     350,   351,     0,   352,   353,   734,   355,   356,   357,   358,
     735,   736,   361,   737,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   738,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,   739,   740,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   741,     0,
     742,   398,   399,   400,   401,   402,   743,   744,   405,   406,
     407,   408,     0,   745,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   746,   747,   439,   440,     0,
     441,   442,   748,   444,   445,   446,   749,   750,   447,   448,
     449,   450,   751,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   752,   457,   458,     0,   753,   754,   755,   756,
       0,     0,     0,     0,     0,   463,   464,     0,   757,   758,
     759,   466,   467,   468,   760,   469,   470,   761,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   762,   479,     0,     0,   763,   764,   765,   766,
     480,     0,     0,   481,   767,     0,   768,   482,   483,   484,
     769,   770,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   771,     0,     0,     0,
     772,   773,     0,     0,     0,     0,   774,   775,     0,     0,
     776,   777,     0,     0,   778,   779,   139,     0,   673,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   674,     0,   148,   149,   150,   151,   152,   675,
     154,     0,   155,     0,     0,   676,   156,   677,   678,   679,
     157,   680,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   681,   682,   165,   166,     0,   167,
     683,   684,   169,     0,   170,   171,   172,   173,   685,   175,
       0,   686,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     687,   193,     0,   194,   688,   689,   195,     0,     0,   196,
     690,   197,   691,     0,   198,   692,   693,     0,   199,   200,
     201,   694,   695,   696,     0,     0,     0,     0,   697,     0,
     204,   698,     0,     0,   699,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     700,     0,   232,   233,   234,   235,   236,   701,   702,   237,
     238,     0,   239,   240,   241,   703,     0,   242,     0,     0,
       0,   704,   244,     0,   245,     0,   246,     0,   247,   705,
     249,   706,     0,   251,     0,   252,     0,   707,     0,   253,
     254,     0,   255,   708,     0,   256,   257,     0,     0,     0,
     709,   259,   260,   261,   710,     0,   262,   263,   264,     0,
       0,   265,     0,     0,     0,   711,   266,   267,  2783,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,   713,   277,   278,     0,     0,     0,     0,     0,
     714,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,   715,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   716,
     306,   307,   308,   309,   717,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   718,   317,     0,     0,   719,
     319,   720,   320,     0,   321,   721,   722,   723,   724,   725,
     326,   327,   328,   329,   330,     0,   726,   331,   332,     0,
       0,   333,   334,   335,   336,   727,   728,   729,   337,   338,
       0,   730,   731,   339,     0,   340,   341,   732,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,   733,   350,   351,     0,
     352,   353,   734,   355,   356,   357,   358,   735,   736,   361,
     737,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   738,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,   739,   740,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   741,     0,   742,   398,   399,
     400,   401,   402,   743,   744,   405,   406,   407,   408,     0,
     745,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   746,   747,   439,   440,     0,   441,   442,   748,
     444,   445,   446,   749,   750,   447,   448,   449,   450,   751,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   752,
     457,   458,     0,   753,   754,   755,   756,     0,     0,     0,
       0,     0,   463,   464,     0,   757,   758,   759,   466,   467,
     468,   760,   469,   470,   761,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   762,
     479,     0,     0,   763,   764,   765,   766,   480,     0,     0,
     481,   767,     0,   768,   482,   483,   484,   769,   770,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   771,     0,     0,     0,   772,   773,     0,
       0,     0,     0,   774,   775,     0,     0,   776,   777,     0,
       0,   778,   779,   139,     0,   673,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   674,
       0,   148,   149,   150,   151,   152,   675,   154,     0,   155,
       0,     0,   676,   156,   677,   678,   679,   157,   680,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   681,   682,   165,   166,     0,   167,   683,   684,   169,
       0,   170,   171,   172,   173,   685,   175,     0,   686,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   687,   193,     0,
     194,   688,   689,   195,     0,     0,   196,   690,   197,   691,
       0,   198,   692,   693,     0,   199,   200,   201,   694,   695,
     696,     0,     0,     0,     0,   697,     0,   204,   698,     0,
       0,  3549,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   700,     0,   232,
     233,   234,   235,   236,   701,   702,   237,   238,     0,   239,
     240,   241,   703,     0,   242,     0,     0,     0,   704,   244,
       0,   245,     0,   246,     0,   247,   705,   249,   706,     0,
     251,     0,   252,     0,   707,     0,   253,   254,     0,   255,
     708,     0,   256,   257,     0,     0,     0,   709,   259,   260,
     261,   710,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,   711,   266,   267,   712,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   713,
     277,   278,     0,     0,     0,     0,     0,   714,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   715,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   716,   306,   307,   308,
     309,   717,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   718,   317,     0,     0,   719,   319,   720,   320,
       0,   321,   721,   722,   723,   724,   725,   326,   327,   328,
     329,   330,     0,   726,   331,   332,     0,     0,   333,   334,
     335,   336,   727,   728,   729,   337,   338,     0,   730,   731,
     339,     0,   340,   341,   732,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,   733,   350,   351,     0,   352,   353,   734,
     355,   356,   357,   358,   735,   736,   361,   737,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   738,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,   739,
     740,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   741,     0,   742,   398,   399,   400,   401,   402,
     743,   744,   405,   406,   407,   408,     0,   745,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   746,
     747,   439,   440,     0,   441,   442,   748,   444,   445,   446,
     749,   750,   447,   448,   449,   450,   751,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   752,   457,   458,     0,
     753,   754,   755,   756,     0,     0,     0,     0,     0,   463,
     464,     0,   757,   758,   759,   466,   467,   468,   760,   469,
     470,   761,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   762,   479,     0,     0,
     763,   764,   765,   766,   480,     0,     0,   481,   767,     0,
     768,   482,   483,   484,   769,   770,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     771,     0,     0,     0,   772,   773,     0,     0,     0,     0,
     774,   775,     0,     0,   776,   777,     0,     0,   778,   779,
     139,     0,   673,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   674,     0,   148,   149,
     150,   151,   152,   675,   154,     0,   155,     0,     0,   676,
     156,   677,   678,   679,   157,   680,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   681,   682,
     165,   166,     0,   167,   683,   684,   169,     0,   170,   171,
     172,   173,   685,   175,     0,   686,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,   188,
       0,   189,   190,   191,   687,   193,     0,   194,   688,   689,
     195,     0,     0,   196,   690,   197,   691,     0,   198,   692,
     693,     0,   199,   200,   201,   694,   695,   696,     0,     0,
       0,     0,   697,     0,   204,   698,     0,     0,   699,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   700,     0,   232,   233,   234,   235,
     236,   701,   702,   237,   238,     0,   239,   240,   241,   703,
       0,   242,     0,     0,     0,   704,   244,     0,   245,     0,
     246,     0,   247,   705,   249,   706,     0,   251,     0,   252,
       0,   707,     0,   253,   254,     0,   255,   708,     0,   256,
     257,     0,     0,     0,   709,   259,   260,   261,   710,     0,
     262,   263,   264,     0,     0,   265,     0,     0,     0,   711,
     266,   267,   712,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,   713,   277,   278,     0,
       0,     0,     0,     0,   714,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,   715,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   716,   306,   307,   308,   309,   717,   310,
     311,  4390,     0,     0,     0,   312,   313,   314,   315,   718,
     317,     0,     0,   719,   319,   720,   320,     0,   321,   721,
     722,   723,   724,   725,   326,   327,   328,   329,   330,     0,
     726,   331,   332,     0,     0,   333,   334,   335,   336,   727,
       0,   729,   337,   338,     0,   730,   731,   339,     0,   340,
     341,   732,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
     733,   350,   351,     0,   352,   353,   734,   355,   356,   357,
     358,   735,   736,   361,   737,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   738,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,   739,   740,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   741,
       0,   742,   398,   399,   400,   401,   402,   743,   744,   405,
     406,   407,   408,     0,   745,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   746,   747,   439,   440,
       0,   441,   442,   748,   444,   445,   446,   749,   750,   447,
     448,   449,   450,   751,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   752,   457,   458,     0,   753,   754,   755,
     756,     0,     0,     0,     0,     0,   463,   464,     0,   757,
     758,   759,   466,   467,   468,   760,   469,   470,   761,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   762,   479,     0,     0,   763,   764,   765,
     766,   480,     0,     0,   481,   767,     0,   768,   482,   483,
     484,   769,   770,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   771,     0,     0,
       0,   772,   773,     0,     0,     0,     0,   774,   775,     0,
       0,   776,   777,     0,     0,   778,   779,   139,     0,   673,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   674,     0,   148,   149,   150,   151,   152,
     675,   154,     0,   155,     0,     0,   676,   156,   677,   678,
     679,   157,   680,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   681,   682,   165,   166,     0,
     167,   683,   684,   169,     0,   170,   171,   172,   173,   685,
     175,     0,   686,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   687,   193,     0,   194,   688,   689,   195,     0,     0,
     196,   690,   197,   691,     0,   198,   692,   693,     0,   199,
     200,   201,   694,   695,   696,     0,     0,     0,     0,   697,
       0,   204,   698,     0,     0,   699,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   700,     0,   232,   233,   234,   235,   236,   701,   702,
     237,   238,     0,   239,   240,   241,   703,     0,   242,     0,
       0,     0,   704,   244,     0,   245,     0,   246,     0,   247,
     705,   249,   706,     0,   251,     0,   252,     0,   707,     0,
     253,   254,     0,   255,   708,     0,   256,   257,     0,     0,
       0,   709,   259,   260,   261,   710,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,   711,   266,   267,   712,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   713,   277,   278,     0,     0,     0,     0,
       0,   714,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   715,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     716,   306,   307,   308,   309,   717,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   718,   317,     0,     0,
     719,   319,   720,   320,     0,   321,   721,   722,   723,   724,
     725,   326,   327,   328,   329,   330,     0,   726,   331,   332,
       0,     0,   333,   334,   335,   336,   727,     0,   729,   337,
     338,     0,   730,   731,   339,     0,   340,   341,   732,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,   733,   350,   351,
       0,   352,   353,   734,   355,   356,   357,   358,   735,   736,
     361,   737,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   738,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,   739,   740,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   741,     0,   742,   398,
     399,   400,   401,   402,   743,   744,   405,   406,   407,   408,
       0,   745,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   746,   747,   439,   440,     0,   441,   442,
     748,   444,   445,   446,   749,   750,   447,   448,   449,   450,
     751,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     752,   457,   458,     0,   753,   754,   755,   756,     0,     0,
       0,     0,     0,   463,   464,     0,   757,   758,   759,   466,
     467,   468,   760,   469,   470,   761,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     762,   479,     0,     0,   763,   764,   765,   766,   480,     0,
       0,   481,   767,     0,   768,   482,   483,   484,   769,   770,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   771,     0,     0,     0,   772,   773,
       0,     0,     0,     0,   774,   775,     0,     0,   776,   777,
       0,     0,   778,   779,   139,     0,   673,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     674,     0,   148,   149,   150,   151,   152,   675,   154,     0,
     155,     0,     0,   676,   156,   677,   678,   679,   157,   680,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   681,   682,   165,   166,     0,   167,   683,   684,
     169,     0,   170,   171,   172,   173,   685,   175,     0,   686,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,   188,     0,   189,   190,   191,   687,   193,
       0,   194,   688,   689,   195,     0,     0,   196,   690,   197,
     691,     0,   198,   692,   693,     0,   199,   200,   201,   694,
     695,   696,     0,     0,     0,     0,   697,     0,   204,   698,
       0,     0,   699,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,   700,     0,
     232,   233,   234,   235,   236,   701,   702,   237,   238,     0,
     239,   240,   241,   703,     0,   242,     0,     0,     0,   704,
     244,     0,   245,     0,   246,     0,   247,   705,   249,   706,
       0,   251,     0,   252,     0,   707,     0,   253,   254,     0,
     255,   708,     0,   256,   257,     0,     0,     0,   709,   259,
     260,   261,   710,     0,   262,   263,   264,     0,     0,   265,
       0,     0,     0,   711,   266,   267,  1771,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
     713,   277,   278,     0,     0,     0,     0,     0,   714,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,   715,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   716,   306,   307,
     308,   309,   717,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   718,   317,     0,     0,   719,   319,   720,
     320,     0,   321,   721,   722,   723,   724,   725,   326,   327,
     328,   329,   330,     0,   726,   331,   332,     0,     0,   333,
     334,   335,   336,   727,     0,   729,   337,   338,     0,   730,
     731,   339,     0,   340,   341,   732,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,   733,   350,   351,     0,   352,   353,
     734,   355,   356,   357,   358,   735,   736,   361,   737,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   738,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     739,   740,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   741,     0,   742,   398,   399,   400,   401,
     402,   743,   744,   405,   406,   407,   408,     0,   745,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     746,   747,   439,   440,     0,   441,   442,   748,   444,   445,
     446,   749,   750,   447,   448,   449,   450,   751,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   752,   457,   458,
       0,   753,   754,   755,   756,     0,     0,     0,     0,     0,
     463,   464,     0,   757,   758,   759,   466,   467,   468,   760,
     469,   470,   761,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   762,   479,     0,
       0,   763,   764,   765,   766,   480,     0,     0,   481,   767,
       0,   768,   482,   483,   484,   769,   770,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   771,     0,     0,     0,   772,   773,     0,     0,     0,
       0,   774,   775,     0,     0,   776,   777,     0,     0,   778,
     779,   139,     0,   673,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   674,     0,   148,
     149,   150,   151,   152,   675,   154,     0,   155,     0,     0,
     676,   156,   677,   678,   679,   157,   680,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   681,
     682,   165,   166,     0,   167,   683,   684,   169,     0,   170,
     171,   172,   173,   685,   175,     0,   686,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   687,   193,     0,   194,   688,
     689,   195,     0,     0,   196,   690,   197,   691,     0,   198,
     692,   693,     0,   199,   200,   201,   694,   695,   696,     0,
       0,     0,     0,   697,     0,   204,   698,     0,     0,   699,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   700,     0,   232,   233,   234,
     235,   236,   701,   702,   237,   238,     0,   239,   240,   241,
     703,     0,   242,     0,     0,     0,   704,   244,     0,   245,
       0,   246,     0,   247,   705,   249,   706,     0,   251,     0,
     252,     0,   707,     0,   253,   254,     0,   255,   708,     0,
     256,   257,     0,     0,     0,   709,   259,   260,   261,   710,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
     711,   266,   267,  1773,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   713,   277,   278,
       0,     0,     0,     0,     0,   714,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   715,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   716,   306,   307,   308,   309,   717,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     718,   317,     0,     0,   719,   319,   720,   320,     0,   321,
     721,   722,   723,   724,   725,   326,   327,   328,   329,   330,
       0,   726,   331,   332,     0,     0,   333,   334,   335,   336,
     727,     0,   729,   337,   338,     0,   730,   731,   339,     0,
     340,   341,   732,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,   733,   350,   351,     0,   352,   353,   734,   355,   356,
     357,   358,   735,   736,   361,   737,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   738,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,   739,   740,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     741,     0,   742,   398,   399,   400,   401,   402,   743,   744,
     405,   406,   407,   408,     0,   745,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   746,   747,   439,
     440,     0,   441,   442,   748,   444,   445,   446,   749,   750,
     447,   448,   449,   450,   751,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   752,   457,   458,     0,   753,   754,
     755,   756,     0,     0,     0,     0,     0,   463,   464,     0,
     757,   758,   759,   466,   467,   468,   760,   469,   470,   761,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   762,   479,     0,     0,   763,   764,
     765,   766,   480,     0,     0,   481,   767,     0,   768,   482,
     483,   484,   769,   770,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   771,     0,
       0,     0,   772,   773,     0,     0,     0,     0,   774,   775,
       0,     0,   776,   777,     0,     0,   778,   779,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,   677,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,     0,   189,
     190,   191,   192,   193,     0,   194,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,  1809,     0,     0,     0,     0,
     203,     0,   204,   698,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
     702,   237,   238,     0,   239,   240,   241,   703,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,   708,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,   715,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   726,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,   730,   731,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   752,   457,   458,     0,  1810,   460,   461,  1811,     0,
       0,     0,     0,     0,   463,   464,     0,     0,   758,   465,
     466,   467,   468,   760,   469,   470,   761,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   492,     0,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,   778,   779,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,  2548,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,   506,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,  2101,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,  2102,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,  3109,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,  2057,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,  -479,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   509,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,  2619,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,  2548,   189,
     190,   191,   192,   193,     0,   194,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,     0,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,   506,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,  2101,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,  2102,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     509,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   492,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  2619,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,  2423,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,  2885,     0,     0,   146,
       0,     0,   147,   779,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     192,   193,     0,   194,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,     0,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,  4517,   145,     0,     0,     0,
     146,  4518,   779,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     607,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   608,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   609,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   610,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,   544,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     192,   193,     0,   194,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,     0,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,  1137,     0,   145,     0,     0,     0,
     146,     0,   779,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
    1342,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,   544,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     192,   193,     0,   194,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,     0,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,     0,     0,     0,   139,  2365,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,   544,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,     0,   189,
     190,   191,   192,   193,     0,   194,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,     0,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   492,     0,     0,     0,   139,
       0,   140,   141,   142,   143,   144,  2618,     0,   145,     0,
       0,     0,   146,     0,  2619,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,     0,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,  4518,   779,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,   188,
       0,   189,   190,   191,   192,   193,     0,   194,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,     0,   204,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,     0,
       0,   242,     0,     0,     0,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,   253,   254,     0,   255,     0,     0,   256,
     257,     0,     0,     0,   258,   259,   260,   261,     0,     0,
     262,   263,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,   544,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,   779,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,     0,   189,
     190,   191,   192,   193,     0,   194,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,     0,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   492,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  2619,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   909,   910,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,   911,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   912,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   913,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   914,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   915,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   916,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   917,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,   918,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,   621,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   136,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
    1391,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   621,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   136,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,  1743,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   909,   910,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,   911,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   912,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   913,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   914,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   915,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   916,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   492,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,   918,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,   621,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   136,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  3582,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,  1283,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,  1284,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
    1284,   148,   149,   150,   151,   152,   153,     0,     0,  -367,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3990,     0,   165,   166,     0,   167,     0,     0,     0,
       0,   170,   171,   172,  3991,   174,   175,     0,   176,   177,
       0,   178,   179,     0,   181,     0,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,     0,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,  3992,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,  3993,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  3994,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  3995,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -322,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,     0,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,  3996,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,     0,     0,     0,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,     0,     0,   387,     0,   389,  -322,
       0,   390,     0,     0,     0,   392,     0,     0,   394,   395,
     396,  3997,   397,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,     0,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,     0,   435,   436,   437,   438,     0,
       0,     0,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,     0,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,     0,     0,     0,   475,
       0,     0,   476,     0,     0,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -322,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,  4510,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,   139,   492,   140,   141,   142,
     143,   144,  2189,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,   139,   492,   140,   141,   142,   143,   144,  2198,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,   139,   492,   140,
     141,   142,   143,   144,  3135,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,   139,   492,   140,   141,   142,   143,   144,
    3258,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,   204,  2526,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,  2527,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
    2528,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,  2529,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,  1047,  1048,     0,   337,   338,     0,     0,  2530,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,  4497,   569,  4498,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,  2531,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,  1380,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,  1381,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,  1382,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,   621,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,  1383,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   136,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,  1393,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,  1394,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,   621,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   136,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,  1931,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,  1932,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,   733,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,  1933,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,  1380,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,  1381,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,   621,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     136,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,   139,   492,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,  1004,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   621,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   136,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   139,
     492,   140,   141,   142,   143,   144,  1415,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,   621,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   136,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,   980,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,   981,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   982,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,  2448,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
     621,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   136,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,  1380,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,   621,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     136,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,   139,   492,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   621,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   136,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,  2185,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   136,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,  4417,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
    4418,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,   569,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,  1089,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,   139,   492,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,   204,     0,     0,
       0,   911,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,  1907,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,  2094,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,   911,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   136,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,  2979,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,   139,   492,   140,   141,   142,   143,   144,
    2987,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,   204,     0,     0,     0,  3011,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,  3075,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,     0,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,  1833,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,  1834,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,   139,   492,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,     0,     0,  -367,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3990,     0,   165,   166,     0,   167,     0,     0,     0,
       0,   170,   171,   172,  3991,   174,   175,     0,   176,   177,
       0,   178,   179,     0,   181,     0,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,     0,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,  -337,  -337,   218,     0,
    -337,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,  3992,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,  3993,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  3994,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  3995,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -322,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,     0,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,  3996,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,     0,     0,     0,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,     0,     0,   387,     0,   389,  -322,
       0,   390,     0,     0,     0,   392,     0,     0,   394,   395,
     396,  3997,   397,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,     0,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,     0,   435,   436,   437,   438,     0,
       0,     0,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,     0,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,     0,     0,     0,   475,
       0,     0,   476,     0,     0,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -322,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,     0,     0,  -367,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,     0,     0,     0,     0,   164,  3990,     0,   165,
     166,     0,   167,     0,     0,     0,     0,   170,   171,   172,
    3991,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,     0,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,     0,     0,     0,   215,   216,
     217,     0,  -358,     0,   218,     0,  -358,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,     0,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,  3992,   239,   240,   241,     0,     0,
       0,     0,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,     0,   254,     0,     0,     0,     0,     0,   257,
       0,     0,     0,   258,   259,   260,   261,  3993,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
       0,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,  3994,     0,     0,   273,     0,     0,     0,
     275,     0,     0,   276,  3995,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,  -322,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,     0,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,  3996,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,     0,     0,     0,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
       0,     0,   387,     0,   389,  -322,     0,   390,     0,     0,
       0,   392,     0,     0,   394,   395,   396,  3997,   397,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     407,   408,     0,   409,     0,     0,     0,     0,   411,   412,
     413,     0,     0,     0,     0,   415,     0,     0,     0,   416,
       0,     0,   418,     0,   420,     0,   421,     0,     0,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
       0,   435,   436,   437,   438,     0,     0,     0,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
       0,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,     0,     0,     0,   475,     0,     0,   476,     0,
       0,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,  -358,     0,  -322,     0,     0,     0,   487,     0,
       0,   489,     0,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,     0,
       0,  -367,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,     0,     0,
       0,     0,   164,  3990,     0,   165,   166,     0,   167,     0,
       0,     0,     0,   170,   171,   172,  3991,   174,   175,     0,
     176,   177,     0,   178,   179,     0,   181,     0,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,     0,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,     0,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,   215,   216,   217,     0,  -355,     0,
     218,     0,  -355,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,     0,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
    3992,   239,   240,   241,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,     0,   254,
       0,     0,     0,     0,     0,   257,     0,     0,     0,   258,
     259,   260,   261,  3993,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,     0,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,  3994,
       0,     0,   273,     0,     0,     0,   275,     0,     0,   276,
    3995,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,  -322,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,     0,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
    3996,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,     0,
       0,     0,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,     0,     0,   387,     0,
     389,  -322,     0,   390,     0,     0,     0,   392,     0,     0,
     394,   395,   396,  3997,   397,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   407,   408,     0,   409,
       0,     0,     0,     0,   411,   412,   413,     0,     0,     0,
       0,   415,     0,     0,     0,   416,     0,     0,   418,     0,
     420,     0,   421,     0,     0,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,     0,   435,   436,   437,
     438,     0,     0,     0,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,     0,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,     0,     0,
       0,   475,     0,     0,   476,     0,     0,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,  -355,     0,
    -322,     0,     0,     0,   487,     0,     0,   489,     0,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,     0,     0,  -367,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,     0,     0,     0,     0,   164,  3990,
       0,   165,   166,     0,   167,     0,     0,     0,     0,   170,
     171,   172,  3991,   174,   175,     0,   176,   177,     0,   178,
     179,     0,   181,     0,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,     0,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,     0,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,  4315,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,     0,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,  3992,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,   257,     0,     0,     0,   258,   259,   260,   261,  3993,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,     0,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,  3994,     0,     0,   273,     0,
       0,     0,   275,     0,     0,   276,  3995,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,  -322,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,     0,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,  3996,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,     0,     0,     0,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,     0,     0,   387,     0,   389,  -322,     0,   390,
       0,     0,     0,   392,     0,     0,   394,   395,   396,  3997,
     397,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   407,   408,     0,   409,     0,     0,     0,     0,
     411,   412,   413,     0,     0,     0,     0,   415,     0,     0,
       0,   416,     0,     0,   418,     0,   420,     0,   421,     0,
       0,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,     0,   435,   436,   437,   438,     0,     0,     0,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,     0,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,     0,     0,     0,   475,     0,     0,
     476,     0,     0,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,  -322,     0,     0,     0,
     487,     0,     0,   489,     0,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,     0,     0,  -367,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
       0,     0,     0,     0,   164,  3990,     0,   165,   166,     0,
     167,     0,     0,     0,     0,   170,   171,   172,  3991,   174,
     175,     0,   176,   177,     0,   178,   179,     0,   181,     0,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,     0,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,     0,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,  -360,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
       0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,  3992,   239,   240,   241,     0,     0,     0,     0,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,   257,     0,     0,
       0,   258,   259,   260,   261,  3993,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,     0,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,  3994,     0,     0,   273,     0,     0,     0,   275,     0,
       0,   276,  3995,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,  -322,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,     0,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,  3996,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,     0,     0,     0,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,     0,     0,
     387,     0,   389,  -322,     0,   390,     0,     0,     0,   392,
       0,     0,   394,   395,   396,  3997,   397,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   407,   408,
       0,   409,     0,     0,     0,     0,   411,   412,   413,     0,
       0,     0,     0,   415,     0,     0,     0,   416,     0,     0,
     418,     0,   420,     0,   421,     0,     0,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,     0,   435,
     436,   437,   438,     0,     0,     0,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,     0,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
       0,     0,     0,   475,     0,     0,   476,     0,     0,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,  -322,     0,     0,     0,   487,     0,     0,   489,
       0,   491,     0,   139,   492,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,     0,     0,  -367,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3990,     0,   165,   166,     0,   167,     0,     0,     0,
       0,   170,   171,   172,  3991,   174,   175,     0,   176,   177,
       0,   178,   179,     0,   181,     0,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,     0,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
    4422,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,  3992,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,  3993,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  3994,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  3995,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -322,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,     0,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,  3996,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,     0,     0,     0,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,     0,     0,   387,     0,   389,  -322,
       0,   390,     0,     0,     0,   392,     0,     0,   394,   395,
     396,  3997,   397,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,     0,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,     0,   435,   436,   437,   438,     0,
       0,     0,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,     0,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,     0,     0,     0,   475,
       0,     0,   476,     0,     0,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -322,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   139,
     492,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,     0,     0,  -367,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,     0,     0,     0,     0,   164,  3990,     0,   165,
     166,     0,   167,     0,     0,     0,     0,   170,   171,   172,
    3991,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,   194,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,     0,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,     0,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,  4468,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,     0,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,  3992,   239,   240,   241,     0,     0,
       0,     0,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,     0,   254,     0,     0,     0,     0,     0,   257,
       0,     0,     0,   258,   259,   260,   261,  3993,     0,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
       0,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,  3994,     0,     0,   273,     0,     0,     0,
     275,     0,     0,   276,  3995,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,  -322,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,     0,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,  3996,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,     0,     0,     0,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
       0,     0,   387,     0,   389,  -322,     0,   390,     0,     0,
       0,   392,     0,     0,   394,   395,   396,  3997,   397,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,     0,
     407,   408,     0,   409,     0,     0,     0,     0,   411,   412,
     413,     0,     0,     0,     0,   415,     0,     0,     0,   416,
       0,     0,   418,     0,   420,     0,   421,     0,     0,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
       0,   435,   436,   437,   438,     0,     0,     0,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
       0,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,     0,     0,     0,   475,     0,     0,   476,     0,
       0,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,  -322,     0,     0,     0,   487,     0,
       0,   489,     0,   491,     0,   139,   492,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,     0,
       0,  -367,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,     0,     0,
       0,     0,   164,  3990,     0,   165,   166,     0,   167,     0,
       0,     0,     0,   170,   171,   172,  3991,   174,   175,     0,
     176,   177,     0,   178,   179,     0,   181,     0,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,     0,
     193,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,     0,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,  -341,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,     0,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
    3992,   239,   240,   241,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,     0,   254,
       0,     0,     0,     0,     0,   257,     0,     0,     0,   258,
     259,   260,   261,  3993,     0,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,     0,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,  3994,
       0,     0,   273,     0,     0,     0,   275,     0,     0,   276,
    3995,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,  -322,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,     0,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
    3996,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,     0,
       0,     0,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,     0,     0,   387,     0,
     389,  -322,     0,   390,     0,     0,     0,   392,     0,     0,
     394,   395,   396,  3997,   397,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,     0,   407,   408,     0,   409,
       0,     0,     0,     0,   411,   412,   413,     0,     0,     0,
       0,   415,     0,     0,     0,   416,     0,     0,   418,     0,
     420,     0,   421,     0,     0,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,     0,   435,   436,   437,
     438,     0,     0,     0,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,     0,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,     0,     0,
       0,   475,     0,     0,   476,     0,     0,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
    -322,     0,     0,     0,   487,     0,     0,   489,     0,   491,
       0,   139,   492,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,     0,     0,  -367,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,     0,     0,     0,     0,   164,  3990,
       0,   165,   166,     0,   167,     0,     0,     0,     0,   170,
     171,   172,  3991,   174,   175,     0,   176,   177,     0,   178,
     179,     0,   181,     0,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,     0,   193,     0,   194,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,     0,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,     0,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,  3992,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,   257,     0,     0,     0,   258,   259,   260,   261,  3993,
       0,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,     0,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,  3994,     0,     0,   273,     0,
       0,     0,   275,     0,     0,   276,  3995,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,  -322,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,     0,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,  3996,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,     0,     0,     0,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,     0,     0,   387,     0,   389,  -322,     0,   390,
       0,     0,     0,   392,     0,     0,   394,   395,   396,  3997,
     397,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,     0,   407,   408,     0,   409,     0,     0,     0,     0,
     411,   412,   413,     0,     0,     0,     0,   415,     0,     0,
       0,   416,     0,     0,   418,     0,   420,     0,   421,     0,
       0,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,     0,   435,   436,   437,   438,     0,     0,     0,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
     447,   448,   449,   450,     0,   451,   452,     0,     0,   453,
     454,   455,   456,     0,     0,   457,   458,     0,   459,   460,
     461,   462,     0,     0,     0,     0,     0,   463,   464,     0,
       0,     0,     0,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,     0,     0,     0,   475,     0,     0,
     476,     0,     0,     0,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,  -322,     0,     0,     0,
     487,     0,     0,   489,     0,   491,     0,   139,   492,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,     0,     0,  -367,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
       0,     0,     0,     0,   164,  3990,     0,   165,   166,     0,
     167,     0,     0,     0,     0,   170,   171,   172,  3991,   174,
     175,     0,   176,   177,     0,   178,   179,     0,   181,     0,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,     0,   193,     0,   194,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,     0,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
       0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,  3992,   239,   240,   241,     0,     0,     0,     0,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,   257,     0,     0,
       0,   258,   259,   260,   261,  3993,     0,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,     0,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,  3994,     0,     0,   273,     0,     0,     0,   275,     0,
       0,   276,  3995,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,  -322,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,     0,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,  3996,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,     0,     0,     0,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,     0,     0,
     387,     0,   389,  -322,     0,   390,     0,     0,     0,   392,
       0,     0,   394,   395,   396,  3997,   397,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,     0,   407,   408,
       0,   409,     0,     0,     0,     0,   411,   412,   413,     0,
       0,     0,     0,   415,     0,     0,     0,   416,     0,     0,
     418,     0,   420,     0,   421,     0,     0,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,     0,   435,
     436,   437,   438,     0,     0,     0,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,     0,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
       0,     0,     0,   475,     0,     0,  4318,     0,     0,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,  -322,     0,     0,     0,   487,     0,     0,   489,
       0,   491,     0,   139,   492,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,     0,     0,     0,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,     0,     0,   165,   166,     0,   167,     0,     0,     0,
       0,   170,   171,   172,     0,   174,   175,     0,   176,   177,
       0,   178,   179,     0,   181,     0,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,     0,   193,     0,
     194,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,     0,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,     0,     0,     0,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,     0,     0,   387,     0,   389,     0,
       0,   390,     0,     0,     0,   392,     0,     0,   394,   395,
     396,     0,   397,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,     0,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,     0,   435,   436,   437,   438,     0,
       0,     0,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,     0,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,     0,     0,     0,   475,
       0,     0,   476,     0,     0,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,     0,
     492
};

static const yytype_int16 yycheck[] =
{
       6,   124,   654,   655,   581,   645,   997,   580,   581,   914,
     915,   998,   600,  1607,    20,  1087,   894,  1525,    24,   924,
    1852,  1283,  1093,    21,  1740,  1418,  1134,    33,   525,  1081,
    1082,   956,   716,    31,    40,  1399,   934,    43,   617,    37,
     932,    47,  1514,     6,  2580,  1514,  2057,  1323,    54,  1523,
    2508,   630,  1187,   676,  2128,  1210,  1283,  2178,   956,  2427,
    1157,  2383,  1217,  2709,  1479,   957,  1466,  2214,  1124,  1504,
    1504,    24,  2219,  1508,  1508,  1510,  1510,  1187,  2481,  2482,
    2892,   523,   641,   642,  1002,  1514,  3330,     4,  1002,  1329,
      96,  1813,  1874,  2697,  2024,  1960,  2171,  2020,  2489,  2153,
    1504,  2020,  2575,  3067,  2179,   659,  2310,  2581,  2083,  3333,
    2348,  2553,   118,    19,   120,  1494,  2747,   123,   124,   125,
    2751,  1218,  1219,  2445,  2153,  1222,  1223,  1224,  1225,   976,
    1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1573,  1573,
    3570,  1429,    25,    96,   784,     9,    17,    16,    17,   772,
     773,   774,  3138,    51,  1885,    17,  3351,   120,  2753,  1447,
     123,    34,   785,  2012,  1975,  1976,    30,  1455,  1456,  1573,
    2467,    47,    36,  2003,    71,  1600,  2026,   154,  3391,  3392,
    2030,  1992,  3395,   161,    25,    60,    16,    17,  2142,  2177,
     131,  2041,  2364,    75,   187,   192,   106,    65,  2009,  2010,
      20,  3414,    46,  2053,    58,  2811,   189,  3420,    16,    17,
     148,    19,  1256,   142,  2025,  2541,   174,  2028,  2029,    30,
    2031,  2975,   283,  2034,  2035,   195,    66,  2038,  2750,    19,
    2153,   224,  2043,    83,  2153,   814,   370,  2048,  2049,  2050,
    2051,  2052,    20,    19,  1994,  2056,  2673,  2058,   154,   158,
      11,  3061,   158,  2064,  2065,  2066,  2067,   389,   215,  2070,
     265,  2072,    72,  2435,    21,    36,   316,    21,  2537,  2538,
     134,  2304,    21,   361,    34,    75,   358,    34,  2108,   224,
    2110,  2111,    75,   154,   365,    34,  2116,  2117,    52,   266,
      81,    48,   266,   872,   419,  2125,  2126,   444,    62,    48,
    2130,  3221,    59,    60,   192,    59,    60,   250,   471,   129,
      59,    60,   424,    36,   123,   156,   182,  3599,   261,   958,
     174,    62,  3566,    12,   178,   452,  2137,  2138,  2139,  2140,
      16,    17,    16,    17,   137,   189,   305,    16,    17,    16,
      17,   266,  2733,   125,  2735,   154,    76,   230,   123,    56,
     266,   129,   548,  3596,   548,    16,    17,  3730,   419,   369,
     489,   108,    16,    17,   125,   209,   192,   123,   158,   250,
     252,    42,   591,   579,   355,   433,   591,    34,   188,   154,
      16,    17,   158,    63,   514,   508,   192,   305,   123,   230,
     256,   611,     8,   633,    16,    17,  2665,  2666,   154,    16,
      17,   641,   376,    60,   633,   148,   627,  1059,  1060,  1061,
     148,   146,   641,   634,    30,   635,   635,   547,   228,   634,
     635,   402,   641,  3796,  3637,   548,    16,    17,   634,   312,
      16,    17,   561,  3646,    41,   241,   406,   128,    68,  1123,
     266,   212,   524,   253,    68,   414,   640,   188,   183,   138,
     154,   376,   252,  1137,   512,   263,  3669,   415,   240,   252,
     376,  3674,   574,   351,   135,  2297,   320,  3897,  2298,  1028,
     633,   312,    16,    17,    16,    17,    16,    17,    16,    17,
    1467,   228,    10,    16,    17,   128,   611,  1392,   635,   212,
    3714,   357,   283,   283,   192,    16,    17,   442,    19,    16,
      17,   633,   508,   189,   510,    51,   375,   641,   272,   378,
    2699,  2902,  2903,   456,   641,    16,    17,   358,   321,   126,
     489,   109,   604,   529,   112,    16,    17,   533,  3134,    16,
      17,  1423,  2974,  2041,  1426,  2977,  2978,  2995,   544,  1431,
    1904,  2885,   548,  3787,   550,   305,   634,  3357,    16,    17,
     479,   449,   143,   995,   635,   616,   192,   563,  3801,  1994,
    1994,   415,   266,   520,   414,  1457,  1458,   375,   248,   450,
     378,   480,   542,  1213,   580,  2556,  1494,  2012,  2012,   419,
    1494,  1479,   588,   633,  2559,  2596,  3340,  3811,  2563,  2183,
    1994,   234,   654,   655,   404,  2716,  3609,   590,  1221,  1283,
     606,   158,  2577,  2578,   609,   579,   616,    79,  3594,  1106,
    1107,   617,  1874,   619,  2589,  1238,  2020,   378,  2541,  2673,
     464,   489,  2541,  2920,   630,   631,   632,   605,   611,   419,
    1127,   637,   609,   639,   454,   641,   642,  2963,   635,  1136,
     646,   647,  1084,  2618,  2673,   651,  2075,  1874,    16,    17,
     357,  1148,  1149,  1150,  1572,   661,   662,   663,  1572,  1156,
     158,   667,   639,   404,  3091,   671,  1954,    16,    17,   632,
     608,  1768,  2502,   158,   538,  3281,   454,   635,   631,  2851,
    2852,  2853,  1779,   524,   637,  1782,   568,   158,   811,   375,
    2539,   375,   378,   603,   378,   559,   375,   559,   375,   378,
    3895,   378,   566,  1262,    16,    17,  1762,  2142,  2142,   591,
     716,  1558,  4142,  2667,   375,   656,  2447,   378,  2153,  2153,
    2695,   375,  1301,   598,   378,   589,  2898,  2899,  2900,  2717,
    2718,  3955,  2562,   639,  2564,   611,   633,   635,  2142,   375,
     611,  2571,   378,  3111,  3375,  2170,  3137,  1791,   559,  2153,
    2673,   620,   635,   375,  2673,  2585,   378,  2136,   375,  2570,
     633,   378,  2592,   604,  3002,    16,    17,  1326,   639,   638,
    2520,   777,  2583,   779,  2604,  2605,  2606,   548,  3409,  2812,
    2610,   635,  1341,   559,  3379,   375,  3417,  1366,   378,   375,
     620,   914,   378,  3424,   635,   918,   919,  2197,  3718,   805,
     806,   807,  2632,   809,   810,   811,   626,   813,   814,  1388,
     933,   611,   620,   819,  1453,  3410,  3411,  3803,    16,    17,
     577,  3090,  4046,   577,  4254,   548,   616,   635,   577,  4111,
     639,   375,  2664,   375,   378,   375,   378,   375,   378,   580,
     378,   571,   375,   806,   601,   378,   852,   810,  1427,   529,
     813,  3373,  3374,  1407,   375,  4098,   862,   378,   375,  3381,
    2671,   378,  3384,  3385,   639,   608,   872,   873,    16,    17,
     608,   877,   619,   996,   375,  3349,   633,   378,   406,  3401,
     471,    16,    17,   639,   375,    16,    17,   378,   375,  3535,
     520,   378,  3365,  3415,   585,  3337,   520,    71,  3420,  3421,
    3422,  3423,  4115,   449,  4117,   609,   513,   375,   914,   862,
     378,    63,   918,   919,   591,  2389,  3120,    16,    17,  3287,
     873,   120,    62,   480,   877,  1498,  3115,   933,  3892,   536,
     628,    16,    17,  1512,   620,   639,   620,   635,  3329,    16,
      17,   620,   585,   620,    16,    17,  3290,   174,   634,   866,
     634,   635,    43,    51,   818,   634,   635,   564,   635,   620,
    3973,   551,    16,    17,   552,  1027,   620,   555,  4192,   154,
     976,    16,    17,   634,   635,    16,    17,    69,  4029,  3301,
     634,   635,   480,   511,   620,  1890,    11,    16,    17,   144,
     996,  2972,   998,  2709,   466,   480,    16,    17,   620,   635,
     158,  1685,  3656,   620,  3125,  1910,   247,   375,  3129,   480,
     378,   156,   634,   635,   123,  1077,   268,   634,   635,    69,
     228,   230,  1028,  2998,  4268,  1950,   375,  1581,   247,   378,
     620,   189,   126,   369,   620,   563,    23,  3091,  2726,   224,
    2963,  2441,   633,   376,  2963,  1970,   637,  2555,  2556,   635,
    3125,  1943,  1950,   627,  3129,   471,   121,   192,    16,    17,
     634,  1953,  3091,   375,  1956,  1957,   378,    16,    17,   120,
      25,   163,  1970,  1079,  2939,   603,   620,  1200,   620,  2611,
     620,   280,   620,  1089,   641,  2520,  2520,   620,  2481,  2482,
     634,   635,   634,   635,   634,   635,   248,   635,   614,   620,
    4151,   125,   635,   620,  2539,  2539,  3710,    16,    17,    16,
      17,    16,    17,  2895,  1237,  3045,  2520,  1123,   635,   620,
     138,    16,    17,  2845,   375,  3297,  1079,   378,  2199,   620,
       8,  1137,   195,   620,  1786,   177,  1089,  2541,   224,    16,
      17,   205,  2614,   641,   635,  2614,   282,  2244,   635,   358,
     139,   192,   620,   344,    16,    17,   641,   471,  1781,  4147,
    2992,  1284,   361,    16,    17,   394,  2321,   635,  3091,  2409,
     641,  3727,  3091,   174,   239,   187,   367,   375,   419,   166,
     378,  1187,    16,    17,   100,  2614,   250,   151,   415,   283,
    1874,  2879,    16,    17,  1200,  1847,  3046,   283,   162,   514,
     419,   353,  2490,   322,    25,    12,    32,  3861,   460,  1332,
      16,    17,   224,   358,  4026,  1794,   240,   633,  2136,  2327,
    2328,   637,  2136,    16,    17,   380,  4038,   375,   471,   280,
     378,  1237,  2667,  2667,   408,   465,  1242,  1796,  2673,  2673,
     375,  1247,    12,   378,   375,   568,   202,   378,    16,    17,
     275,   360,   620,   344,   471,   177,  1262,   442,   193,   357,
      16,    17,   542,  2667,  2320,    16,    17,   635,   591,  2673,
    4114,   620,    16,    17,  2330,   230,   375,  1283,  1284,   378,
     616,  1860,  1861,  3294,  3967,   377,   635,   427,    16,    17,
     375,  4535,  2427,   378,  1247,  1301,    16,    17,   375,   489,
    2397,   378,   635,   375,   182,   441,   378,  1313,   620,  1315,
     361,  1317,   376,    16,    17,   524,   272,    12,   360,   633,
    1326,   375,   480,   635,   378,   391,  1332,   377,  3731,   415,
     375,   138,  2732,   378,   375,  1341,  1342,   378,    16,    17,
      16,    17,   657,   406,  3712,   334,   375,    16,    17,   378,
    3497,   449,  2767,  3474,  3475,   375,   421,   312,   378,   394,
    1366,   513,   589,  1369,  1317,   539,  2501,   105,   138,   620,
     120,   570,  3347,  1379,  3206,    16,    17,   529,  1501,   524,
    3212,   479,  1388,   634,  3216,   691,  2860,  3217,   562,  1342,
     633,  2501,  1398,  1399,  3369,   604,  4384,    16,    17,  4450,
     591,  1318,  1408,  1409,  1410,  1411,  1412,  1413,   635,   230,
     374,  4057,  1418,     0,   415,   241,   633,   375,  1424,  1425,
     378,  1427,   620,  4106,  1430,   471,   375,   546,   362,   378,
      16,    17,   354,   355,   184,    16,    17,   635,   360,   265,
      20,   471,  1884,   138,  1450,  1408,  1409,  1410,  2724,  1412,
    2982,   401,   387,   572,   639,   406,  2591,   763,  1411,   604,
    1413,   526,  1425,   366,  2972,   617,   375,  1430,   375,   378,
     375,   378,   620,   378,   610,    12,   214,    16,    17,   542,
     375,  2591,   548,   378,  3016,   620,  1403,   635,   391,   620,
      25,   312,  3024,   277,   154,  1501,  3028,  1450,   375,   634,
    3958,   378,   209,  4059,   635,  4061,  1512,   158,    16,    17,
     126,  1517,    12,   375,  1520,  1521,   378,  4361,  4362,   570,
     476,   620,   375,   565,   795,   378,    16,    17,   120,   463,
     280,  3899,   357,     6,   192,   620,   635,   358,  3046,   581,
     419,   375,  3074,   620,   378,   471,   253,   542,   620,   129,
     635,   375,  1558,   488,   378,   339,    12,   634,  2463,  2963,
     511,   440,   120,   635,  1517,   123,   620,   857,  1521,   375,
     471,  1577,   378,  1579,  1580,   620,  1582,  1583,   590,   620,
     238,   635,   375,   547,    57,   378,  1592,   633,   589,   634,
    1507,   620,   184,  1599,  3741,   474,  1602,   213,  1604,   647,
     620,   138,   428,   633,  1610,   634,  1612,   375,   135,   434,
     378,   361,   563,  3443,   885,   635,  1579,  1580,   123,   375,
     212,   156,   378,   150,   375,    12,   184,   378,    16,    17,
     189,   375,   137,  2895,   378,  3957,    16,    17,   138,   628,
     629,   630,   631,   565,   382,   548,  1599,   375,    16,    17,
     378,   471,   603,   391,   212,   375,  3091,  3091,   378,   581,
     398,   272,   620,  2734,    75,    16,    17,   283,  2895,   142,
     158,   620,   375,  2828,  1797,   378,   213,   635,    89,  1685,
    1686,    21,   138,    16,    17,  1602,   635,  3091,   280,   979,
      16,    17,    16,    17,    34,   230,   388,   375,  1004,   375,
     378,  2324,   378,   524,   165,   165,   375,   633,    48,   378,
     487,   620,   128,   620,  4272,   620,   275,  4275,   376,    59,
      60,   241,   280,   128,  2221,   620,   635,   205,   635,   634,
      16,    17,   633,   125,   375,   195,   520,   378,  2235,   634,
    1746,   641,   262,   620,   436,  2880,  3994,  3995,   359,  3823,
    3824,   138,    16,    17,  4290,   493,   375,   634,   620,   378,
    2832,   809,   548,  3235,  1887,  3234,  3598,   620,   548,   361,
    2880,  2268,   634,    16,    17,   595,   596,   312,    16,    17,
      40,   634,  1788,   604,    16,    17,   620,    47,  1794,   375,
    1796,  1797,   378,  3267,   375,   559,   620,   378,  2870,    97,
     634,   267,  1808,   361,   270,   520,   583,  1813,    16,    17,
     634,    17,  1818,   633,   620,  1821,   321,  3828,   234,  3535,
     570,  1827,  1828,   358,  1830,   139,   213,   620,   634,   234,
     548,  4389,    16,    17,  1840,   209,   375,   228,  1844,   378,
    2337,   634,   232,   205,   255,  3121,   623,   633,  2471,   542,
     588,   241,   620,   633,  1860,  1861,  1862,  1863,   290,   291,
      16,    17,   253,   156,   620,   223,   634,   375,  1874,   620,
     378,  1877,  1878,  1879,  1827,  1828,   620,  1830,   634,   253,
     232,  1887,   355,   634,   599,   375,   165,  1840,   378,   241,
     634,  1844,   620,  1099,  1100,  1101,  2469,   545,  1904,  3212,
     620,    16,    17,  3216,  3672,  1111,   634,  3675,    19,  1862,
    1863,    16,    17,  1919,   634,   633,   195,   620,    82,  1014,
    1015,   332,    16,    17,  1877,  1878,  1879,    16,    17,   128,
     220,   634,   222,   231,   510,  3765,  1142,   230,   102,  1145,
     228,  1858,   620,   635,   620,   418,   357,   420,   228,  1955,
     416,   620,   250,  3317,   228,    25,   634,   533,   634,  1054,
    1166,  1167,   223,   261,  1170,   634,    25,   591,   505,   506,
     507,   508,   509,   510,   539,  3743,   205,   542,   570,   620,
    3905,  3906,  1188,  1189,    59,    60,    97,   375,   525,   524,
     378,   381,    34,   634,    69,   375,  2569,  1914,   378,   431,
     432,   620,  1955,  2928,   133,    75,   417,   375,   238,  2934,
     378,   635,   570,   370,  2892,   634,    75,   641,    60,   598,
     334,    47,   601,   588,   375,    17,   442,   378,  2151,   381,
    2928,  2477,  2155,  3141,   620,   234,  2934,   442,   539,   620,
    2945,   542,   375,   154,  2936,   378,   344,   158,   634,   375,
     596,   375,   378,   634,   378,   471,   192,  3165,  3166,   156,
     354,   355,  1979,  2069,   479,   358,   471,   109,   283,   604,
     112,  1988,  1989,  4321,  4322,   639,   187,  2083,   189,   121,
    3188,   620,  1999,  2000,  2001,  2002,   156,  2004,  2005,   375,
      75,  2214,   378,   634,   205,   634,  2219,   156,   192,   210,
     511,   612,   613,   192,   158,   175,   586,  3937,  3938,  3939,
    3940,   375,   620,   224,   378,  2561,   175,   641,   505,   506,
     231,   508,   372,   510,   635,  4050,   634,   238,   511,  4054,
     620,   633,   375,   230,   442,   378,   188,   375,   525,   250,
     378,  2587,  2588,   375,   634,  2151,   378,   139,    11,  2155,
     261,  2157,  4156,     6,  2160,   266,  3291,  4161,   456,  4163,
     230,  2167,  2168,  2169,   275,   634,   635,   375,   633,   585,
     378,   230,   635,   594,   595,   120,   597,   548,   599,  2185,
     585,   633,  2834,  4108,  4109,  2191,   634,   635,  2194,   633,
    2313,   375,  2109,  3328,   378,  2112,  2113,  2160,  2115,   634,
     635,  2118,  2119,  2120,  2121,  2122,  2123,  2124,  2214,   633,
    2127,  2895,  2129,  2219,  2167,  2168,  2169,   633,  3328,   375,
    2343,   120,   378,   633,  3359,   634,   635,   525,   633,  4040,
     633,   524,   620,   344,  4134,  1302,   633,   577,  1305,   184,
     620,  1308,   312,   442,   634,   230,   634,  4079,   633,  3359,
     634,   635,   620,   312,   634,   120,   367,   597,   598,   117,
     375,   358,   105,   378,   633,   376,   634,   212,  2185,   620,
     375,   641,   471,   378,  4085,   220,   169,  4088,  4089,  4090,
    4091,   375,   352,   634,   378,   184,   375,   620,   358,   378,
    3342,  3343,   633,   352,   620,   406,   620,   633,  2877,   358,
     373,   634,    58,    31,   346,    11,   633,  2313,   634,   459,
     634,   604,   626,   627,   628,   629,   630,   631,   633,   184,
     633,  3429,   165,   634,   635,  4155,  2823,   633,   729,   634,
     635,   203,  2338,   633,   620,   280,    17,  2343,  3731,   367,
     638,  4057,   334,   634,   635,   456,  3608,   212,   634,    77,
     751,   633,   195,    97,  4186,    78,   620,    80,  2364,    16,
      17,   219,   633,   764,   765,   633,    75,   352,   479,   591,
     634,  4182,  4183,   358,   405,   634,   635,   620,   633,  3284,
    4191,   280,   620,   367,  2507,  2508,   585,   633,   620,   633,
    2396,   634,   634,   635,  3656,   539,   634,   634,   635,   105,
     123,   635,   634,   367,  2410,    59,    60,  3915,  3916,  4309,
     633,  1617,   620,  3484,   525,   280,   361,    25,   174,   125,
      97,  2427,   178,   146,   152,  2431,   634,   524,  3381,  2435,
    3565,  3384,  3385,   189,   633,   120,   620,   309,   310,    26,
     425,   633,   314,   315,   633,   487,   551,   156,  3401,   224,
     634,   634,   635,   633,   524,  3565,   633,  2580,   139,   633,
     183,   633,   361,  2469,   620,   524,   324,    75,   579,   494,
     328,    19,   634,   635,   633,  2481,  2482,   335,   634,   590,
     591,  1687,    69,  4077,   633,  1691,    73,   231,    75,   195,
     482,   483,   634,   635,   633,  2501,   361,    49,   609,   184,
     611,  2507,  2508,    12,    49,   620,   250,   604,   633,  1715,
     634,   635,   633,   555,  4414,   620,  4416,   261,   224,   634,
    3507,   230,   635,   634,   635,   120,   620,   638,   639,   148,
     149,   620,   633,    42,   604,   633,   123,   633,   635,   524,
     633,   583,  2548,  4443,   367,   604,   633,  2553,   633,    97,
     633,  2549,  2558,  2559,   231,   413,   633,  2563,   277,  2565,
     634,   635,  2560,   406,   320,   635,   633,   175,  2566,  2575,
     276,  2577,  2578,   250,  2580,  2581,   634,   635,  4478,  4479,
    2586,    90,   633,  2589,   261,  2591,    95,   634,   635,   184,
     575,   367,  2590,   633,  2600,   280,   633,  2595,   634,   635,
     344,   633,    32,  2601,  2602,  2611,   154,   634,   635,     6,
     158,   469,  2618,  2619,    11,   633,    13,   212,    15,   604,
     634,   635,   230,   367,  2630,   570,   139,   634,   635,    26,
      27,   633,   624,   625,   626,   627,   628,   629,   630,   631,
     633,   189,  1828,   352,  1830,   634,   635,  2600,   465,   358,
    2567,  2568,    75,   334,   634,   635,    36,   205,   633,   415,
      57,   633,   210,   633,    61,    62,   253,   344,   634,   635,
      67,   570,   633,   401,    62,   633,   361,  2594,    75,  3176,
     634,   635,   633,   231,    72,   280,    83,   633,  2694,  2695,
     238,  1877,  1878,  1879,   633,   423,    93,    85,   471,   542,
     406,   633,   250,   426,   312,   570,   479,   633,   459,   139,
     633,   108,   456,   261,   633,   139,   425,    72,   266,   633,
     563,   634,   635,  2729,  3467,  3468,   123,   275,   633,   457,
     127,  3228,   112,   156,   634,   635,   245,   633,   135,   136,
     120,  2694,   633,  3316,   352,   142,  2663,   633,   606,   633,
     358,    62,   633,   150,   634,   635,   633,   154,   633,   156,
     603,    72,   120,   579,   622,   123,   361,   354,   355,   479,
     167,   477,   628,   360,    85,   634,   635,   634,   635,   456,
     367,   525,   634,   635,   634,   635,    36,   641,   516,   540,
     187,   164,   634,   635,   545,   120,   344,   177,   123,  3451,
     188,   482,   483,   641,   184,   633,   194,   230,   634,   635,
     266,   241,   321,   634,   635,   524,   520,   404,   189,   367,
     164,   334,   595,   596,   634,   635,   184,   539,   376,   226,
     520,   228,   212,   188,   540,   265,   542,   588,   235,  2845,
     228,  2847,   634,   635,  2850,  2851,  2852,  2853,   525,  3946,
     634,   635,   603,  2859,   212,   252,   277,  3844,   406,   184,
     633,  3604,   112,  3850,   155,   253,   575,   634,   635,   635,
     120,  2877,  2995,   228,  2880,   384,    84,   188,   275,   634,
     635,   635,   588,   194,   368,   570,   635,   212,   475,  2895,
    3766,  3767,  2898,  2899,  2900,   604,   535,    75,   253,   634,
     280,   634,   635,   154,   334,   500,  2859,   123,   456,   108,
     334,   640,   634,   635,   311,     6,   524,   228,   634,   635,
     120,  3494,   280,   123,   354,   355,   635,   177,   633,   352,
     108,   479,   329,   107,   184,   358,   333,   524,  1174,  1175,
       4,  4076,   253,   624,   625,   626,   627,   628,   629,   630,
     631,  4184,  4185,  3303,  3304,   280,  3260,  3261,  3547,  3548,
     635,   603,   212,   391,   470,   345,  4076,   241,  2974,   482,
     483,  2977,  2978,   635,   371,   570,  2982,   525,   156,   376,
     360,   361,   388,   139,   184,    56,   383,   496,   434,  2995,
     169,   388,  2998,   580,   391,   108,   604,   221,   428,   635,
     388,    97,   425,   361,   641,   635,  4078,   641,    69,    12,
    3016,   608,   212,   634,   634,   138,   404,     9,  3024,   635,
    2937,  2938,  3028,  2940,   641,   422,   641,   536,   634,   634,
     280,   579,   634,   388,   633,   265,   361,   641,   156,   436,
     437,   438,   439,   591,   635,   635,   640,    49,  3054,   404,
     228,  3057,   482,   483,   277,   277,  3062,   277,   482,   483,
     277,   609,  3068,   611,   461,   495,  3072,   277,  3074,   635,
     277,   635,  3815,  3816,   158,  3818,  3819,   539,   633,  2996,
     280,   272,   635,  3089,   635,   241,   634,   635,  3005,   389,
     638,   639,   559,   404,   635,   345,  3102,    12,   559,   388,
     635,   524,   158,  3109,  3057,  3068,   356,   635,   635,   497,
     360,   361,   625,   626,   627,   628,   629,   630,   631,    69,
     517,   518,   519,   635,   241,   628,   537,   524,   244,  4116,
    3136,   179,  4267,   311,   189,   231,    16,    17,  3790,   635,
     584,   492,   172,   540,   392,   134,   543,   635,  4026,   367,
     635,   329,   575,   634,   250,   635,  3109,  4267,   158,   158,
    4038,   361,   158,   158,   158,   261,   290,   291,   548,   566,
     158,   158,   552,   158,   352,   555,   158,  3094,   334,   158,
     158,   604,   579,  3306,   158,   565,   497,   158,   158,   158,
     570,   158,   580,   573,   624,   625,   626,   627,   628,   629,
     630,   631,   626,   627,   628,   629,   630,   631,  3631,  3632,
     158,   158,   570,   158,   158,   158,  3222,    26,    27,   158,
     158,  3644,   527,   528,  3230,   158,   531,   532,  3651,   586,
     535,  3804,   537,   113,   114,   115,   116,   117,   615,   195,
     590,   367,   639,   609,  4341,   570,   626,   627,   344,   635,
      59,    60,    61,  3676,   635,   367,  3679,   367,   192,   634,
      69,   628,    75,   192,   634,   634,    75,  3273,  4173,   580,
     634,   367,   634,   634,    83,   634,    89,   579,   634,   113,
     114,   115,   116,   117,   627,  3291,  3292,   635,   633,  3295,
     480,  3297,   634,   634,   634,  3880,   634,   634,   548,   108,
    3306,   635,   552,   635,   634,   555,   634,   431,   432,   633,
    3316,  3317,   634,  3230,   123,   565,   633,   631,   127,   132,
     570,   633,  3328,   573,   634,   559,   482,   483,   635,   548,
     609,  3337,   229,   548,   548,  4432,   216,   217,   218,   219,
     633,  3347,   531,  3349,   203,   633,   524,   156,   633,   192,
     633,   633,   263,  3359,   635,   635,   192,   158,   159,  3365,
     456,  3367,   540,  3369,   641,  4352,  4353,   634,  4355,   641,
     570,   641,   414,  4508,  3497,  3952,   626,   627,   502,   503,
     504,   479,   216,   217,   218,   219,   588,  4522,   635,   189,
      47,   342,  4527,   470,   391,   196,   511,  4532,  4508,    72,
     511,   559,   511,   511,   511,   388,   207,   388,  3325,  3994,
    3995,   388,  4522,  4400,   134,  4402,  4403,  4527,    55,   228,
     251,   540,  4532,   251,   388,   134,   235,    64,   388,   525,
      47,   388,  4020,   388,   540,  3441,   139,    74,   390,   388,
     633,   633,   255,   252,   324,   246,   326,   327,   328,    86,
      87,    88,   388,   437,   276,   335,   257,   633,   250,  3582,
    3466,  3467,  3468,   250,  4536,   379,   103,   634,   624,   625,
     626,   627,   628,   629,   630,   631,   641,   591,   152,   634,
      26,    27,   237,   284,   237,   634,    13,   641,  4475,   634,
     324,  3497,   326,   327,   328,   375,   634,  4149,   378,  4490,
     634,   335,   311,   634,   634,   634,   105,  4147,   525,   158,
     635,   816,   559,    59,    60,    61,  4093,  3434,   559,   332,
     329,   641,   559,    69,   139,   548,   616,   272,    47,    75,
    3653,   635,   635,   413,   633,   559,   553,    83,   241,   641,
    3457,   354,   355,   373,   357,   633,   158,   348,  4133,  4134,
     633,   158,   192,   192,    55,  3561,   192,   238,   192,  3565,
     247,   419,   108,    64,   361,   635,   165,   158,   548,    96,
     182,   158,   548,    74,   383,   635,  3582,   123,   158,   413,
     391,   127,   391,   325,   196,    86,    87,    88,   468,   469,
     105,   108,   108,   172,   253,   207,   195,   253,  3604,   633,
     559,   128,   103,   641,   417,   633,   372,  3613,   205,    19,
     156,   548,   452,   633,   388,   142,  3622,  3615,  3741,   250,
     250,   367,   641,   628,   633,  4530,   633,   633,   239,   228,
     239,   334,   367,   634,   468,   469,  4221,   635,   165,   224,
     633,   168,   267,   634,   256,   257,   241,  3653,   634,   388,
     667,  4236,   461,   628,   181,   192,   419,   585,   158,   676,
    3613,   634,   124,   635,   681,  4250,   634,   253,   402,   634,
     253,   634,   284,  3590,  3680,   641,   203,   276,   367,   194,
     634,  3687,   228,  3806,   611,   367,   323,   633,   641,   235,
      75,    19,   634,   633,   635,   712,  4269,   367,   511,  3705,
     635,   228,   634,   340,   634,   367,   252,   234,   517,   518,
     519,   728,   634,   228,   634,   524,   635,   635,   635,   334,
     633,  3727,   634,   633,  4309,  3731,   606,   635,   634,   494,
     635,   540,   634,   471,   543,  3741,  4321,  4322,  3655,   351,
     620,   621,   622,   633,  4384,   633,   633,   250,   275,   376,
     634,   250,   473,   361,   611,   772,   773,   774,   775,   634,
     634,   276,   454,   275,    11,   311,   263,   419,   785,   203,
     579,   145,   606,   259,   553,   635,   205,  3694,   634,   482,
     483,   481,  4367,   329,   635,   158,  3792,   621,   622,   393,
     123,   403,  4377,   123,   633,   542,   633,   400,   633,   641,
    3806,    79,   401,   489,   141,   634,   494,   406,   466,  3815,
    3816,   634,  3818,  3819,    34,   635,   634,  4394,   634,    19,
     591,   591,   323,   633,   266,    34,   635,   634,   634,  4414,
     467,  4416,   634,    34,   255,  3958,   634,   383,   634,   340,
     634,  4426,   331,   634,  4484,   391,   634,   414,   634,   173,
     635,   275,   373,   611,   238,   633,   633,   641,  4443,   634,
    4445,    47,  4447,   635,   210,   331,   635,   482,   483,  4454,
    4510,   158,   633,   633,   633,   308,   633,   633,   477,  4464,
     407,  4533,   634,   601,  3890,  3891,   601,   585,   667,   633,
     527,   123,  3809,  4478,  4479,   253,  3902,   253,    34,   360,
     427,   361,   681,   634,   633,   635,   591,   544,   435,  4494,
    4495,   131,   591,   361,  4499,   461,   443,   331,   171,   548,
     634,   624,   625,   626,   627,   628,   629,   630,   631,   548,
     548,   253,   542,   712,   595,   238,   156,   367,  3891,  3945,
     160,   540,   596,   356,   471,   635,   545,   515,   611,   728,
     451,   634,  3958,   361,   452,   633,   633,   484,   485,   634,
     530,   373,   477,   585,   563,   633,   467,   608,   153,    31,
    3976,   517,   518,   519,   634,   642,   189,   197,   524,   634,
     386,   634,   497,   189,   550,  3991,   134,   134,   633,   588,
    3996,   156,  3945,    71,   540,   215,   775,   543,   192,   406,
     427,    31,   608,    62,   603,   373,   634,   534,    62,   624,
     625,   626,   627,   628,   629,   630,   631,  1034,   531,   635,
    4221,   634,    14,   268,     5,   540,   527,   542,   633,   367,
     545,   367,   152,   579,   238,  4236,   563,   639,   373,   373,
     132,   141,    47,   544,    47,   633,    47,    47,   151,  4250,
      47,   633,   633,  4059,   585,  4061,   128,   277,   585,   608,
     587,   152,   223,   282,  4187,   580,    34,   639,   642,   122,
    4076,   147,   633,   588,    47,    47,  4082,    47,  1095,  1096,
     551,   141,    53,   639,   462,   460,   634,  1104,  1105,  1106,
    1107,  1108,  1109,  1110,   635,   361,   152,   551,   208,   635,
     635,  1118,  1119,   221,  1121,  1122,   639,   635,   634,  1126,
    1127,   634,    53,  1130,  1131,  1132,  1133,   152,  1135,  1136,
    4126,   189,  4039,   189,   189,    47,  1143,  1144,   551,  1146,
    1147,  1148,  1149,  1150,   441,   610,  1153,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1162,  1163,   123,  1165,   224,
     361,  1168,  1169,   633,   191,  4001,  1173,   635,   479,  2350,
    1177,  1178,  1179,   131,  2131,  3443,  4367,  4290,  3444,  2536,
     655,  3703,  4031,  1190,  1191,  1192,  4377,  4150,  4328,  1011,
    4329,  4187,  1199,  3701,  3889,   405,  3705,  4510,   156,  1206,
    1207,  1208,   160,  1210,   414,  4472,    47,  1873,  2845,   582,
    1217,  1218,  1219,  4364,  1221,  1222,  1223,  1224,  1225,   429,
    1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1818,  4480,
    3880,  1238,  1239,  4214,  4347,  4426,  4364,   447,  3880,   197,
    3880,  3880,  3880,  3880,  3880,  3880,  3880,  4322,  3880,  3880,
    3880,  3880,  1510,  4239,  4445,  4240,  4447,   215,  1052,  2082,
    1514,  3022,  2872,  4454,  3273,  1034,  2410,  1329,  4082,  3946,
    3898,  4267,  4177,  4464,  4181,  2112,  2113,  3563,  2115,  4349,
     490,  2118,  2119,  2120,  2121,  2122,  2123,  2124,  4432,  4394,
    2127,  4093,  2129,   518,  4290,  1572,  2075,  3460,  2695,  3369,
    3095,  2621,  2083,  4494,  4495,  3347,  3392,  3425,  4499,  3392,
     520,  3842,  3664,  3614,  4269,  3653,  2507,  2801,  3216,   277,
    3208,  3213,    11,  4105,    11,  4109,  1095,  1096,  4042,   539,
    4108,  1586,   542,  4054,  4050,  1104,  1105,  4333,  4334,  1108,
    1109,  1110,  3902,  2165,  2082,  3850,  2614,  1464,  1460,  1118,
    1119,  4347,  1121,  1122,   585,  3619,  2422,  1126,  3348,  1521,
    2859,  1130,  1131,  1132,  1133,  1568,  1135,  1862,  3268,  2389,
    4277,  4278,   995,  4369,  1143,  1144,  2306,  1146,  1147,  1386,
    4376,   607,   601,  2439,  1153,  1154,  1155,  1482,  3230,  1158,
    1159,  1160,  1161,  1162,  1163,  2834,  1165,  1404,   906,  1168,
    1169,  2220,  2182,  3123,  1173,  4518,  1137,  2305,  1177,  1178,
    1179,  4064,  4333,    13,  3918,    15,  4334,  3441,  3810,  1111,
    2331,  1190,  1191,  1192,  3359,  4185,  4461,  3806,  1317,  2191,
    1199,    31,  2444,  1248,   997,    35,   997,  1206,  1207,  1208,
    2426,  2384,  3565,  1342,   997,  3286,  3285,   405,  4444,    49,
      50,  3328,  4267,  4449,   590,   997,   414,    57,  1610,   672,
    1951,    61,    62,   581,  1416,  1952,  3367,  1349,  1807,  3271,
    1239,   429,  4430,  4297,  4359,  4457,  4532,    77,  4527,  3656,
     667,  2466,  3291,  3316,   580,  3317,   580,  1743,  4484,   447,
    1907,  2459,  2458,  1444,  2452,  1367,    96,   574,   888,  1310,
    1844,  3935,  1577,  2847,  3941,   575,   893,   514,   514,  4021,
    3689,   655,  4508,   655,  4510,   655,    -1,    -1,   118,   119,
      -1,    -1,  4518,    -1,    -1,    -1,  4522,    -1,   128,   129,
     130,  4527,   490,    -1,    -1,    -1,  4532,    -1,    -1,    -1,
      -1,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,    24,
      -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,   168,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,   186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    -1,
      -1,   201,    -1,   203,    -1,    70,    -1,    -1,   208,    -1,
      -1,   211,    -1,    -1,    -1,    -1,  1623,  1386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,
      -1,    96,    -1,    -1,   234,  1404,   236,    -1,    -1,    -1,
      -1,   106,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   254,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,   306,   307,    -1,    -1,    -1,
      -1,   271,    -1,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     155,   156,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1721,  1722,  1723,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,  1736,
     195,    -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1762,    -1,    -1,    -1,    -1,
      -1,  1768,   227,   228,  1771,    -1,  1773,    -1,    -1,    -1,
      -1,   371,  1779,    -1,  1781,  1782,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   251,    -1,   388,    -1,
     431,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   401,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,
      -1,    -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   434,    -1,    -1,   437,    -1,   439,
     305,    -1,   442,    -1,    -1,   445,   446,    -1,    -1,    -1,
    1857,    -1,    -1,    -1,  1623,   455,    -1,   457,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
      -1,    -1,    -1,    -1,   484,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1905,    -1,
      -1,    -1,    -1,    -1,    -1,   370,  1913,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,
      13,    -1,    15,   523,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,    35,    -1,   409,   410,    -1,    -1,    -1,    -1,
      -1,    -1,  1721,  1722,  1723,    -1,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    57,   430,   566,    -1,    61,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,
      -1,    -1,   582,    -1,    77,   585,    -1,    -1,    -1,    -1,
     590,    -1,    -1,  1762,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1771,    96,  1773,    -1,    -1,    -1,    -1,    -1,
      -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,   618,    -1,
      -1,    -1,    -1,    -1,   489,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,   633,    -1,   128,   129,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    -1,   524,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   168,    -1,   542,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1857,    26,
      27,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,  2106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,   211,    -1,
      -1,    -1,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,   599,    -1,  1905,    -1,    75,    -1,
     605,   234,    -1,   236,  1913,    -1,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,  2180,    -1,    -1,    -1,    -1,   271,    -1,
      -1,    -1,   275,    -1,    -1,    -1,   123,    -1,    -1,    -1,
     127,    -1,    -1,  2200,    -1,    -1,    -1,  2204,    -1,    -1,
      -1,    -1,  2209,  2210,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2218,    -1,    -1,  2221,    -1,    -1,    -1,    -1,   156,
      -1,    -1,    -1,    -1,  2231,  2232,    -1,  2234,  2235,    -1,
    2237,  2238,  2239,  2240,  2241,    -1,    -1,  2244,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2253,    -1,    -1,    -1,
      -1,    -1,    -1,  2260,    -1,  2262,    -1,  2264,  2265,    -1,
    2267,  2268,    -1,    -1,    -1,  2272,  2273,  2274,    -1,    -1,
      -1,  2278,  2279,  2280,    -1,  2282,    -1,  2284,   371,  2286,
      -1,  2288,    -1,  2290,    -1,    -1,    -1,    -1,  2295,    -1,
      -1,   228,    -1,    -1,    -1,   388,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2314,   401,    -1,
      -1,    -1,    -1,    -1,  2321,   252,    -1,  2324,    -1,   412,
      -1,    -1,    -1,  2330,    -1,    -1,  2333,    -1,   265,    -1,
    2337,    -1,    -1,    -1,    -1,    -1,    -1,  2106,    -1,    -1,
      -1,   434,    -1,    -1,   437,    -1,   439,    -1,    -1,   442,
      -1,    -1,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   455,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   465,    -1,   311,    -1,    -1,    -1,   471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,
    2397,   484,   329,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,  2200,    12,    13,    -1,  2204,    -1,    -1,    -1,    -1,
    2209,  2210,    -1,    -1,    -1,    -1,   383,    -1,    -1,  2218,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
    2467,    -1,  2231,  2232,  2471,  2234,    -1,    -1,  2237,  2238,
    2239,  2240,  2241,   566,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2253,   578,    -1,    -1,    -1,   582,
      -1,  2260,   585,  2262,    -1,  2264,  2265,   590,  2267,    12,
      13,    -1,    -1,  2272,  2273,  2274,    -1,    -1,    -1,  2278,
    2279,  2280,    -1,  2282,    -1,  2284,    96,  2286,    -1,  2288,
      -1,  2290,    -1,    -1,   461,   618,  2295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     633,    -1,    -1,    26,    27,  2314,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,
      -1,  2330,   142,    39,  2333,    41,    -1,    43,    44,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
     517,   518,   519,    96,    60,   165,    -1,   524,   168,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,   181,    -1,   540,    -1,    -1,   543,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   203,    -1,   108,    -1,    -1,    -1,   142,
      -1,    -1,    -1,   109,    -1,    -1,   112,    -1,    -1,    -1,
     123,    -1,   579,    -1,   127,   121,    -1,    -1,   228,    -1,
      -1,    -1,   165,    -1,   234,   168,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     203,    -1,    -1,    -1,    -1,   275,   633,    -1,  2467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,   185,
      -1,    -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,
      -1,   234,   198,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2738,    -1,    -1,    -1,  2742,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,  2762,  2763,    -1,    -1,    -1,
      -1,    -1,   275,   239,    -1,    -1,    -1,    -1,    -1,   252,
      -1,    -1,    -1,    -1,    -1,    -1,  2783,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2792,    -1,  2794,    -1,  2796,
      -1,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2823,    -1,    -1,    -1,
      -1,  2828,    -1,    -1,    -1,    -1,    -1,   407,   311,    -1,
      -1,   411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,    -1,    -1,   329,   427,  2855,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
     336,   337,   338,   443,    -1,    -1,    -1,   343,    -1,    -1,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,
      -1,   471,    -1,    -1,   407,    -1,    -1,    -1,   411,    -1,
     383,    -1,    -1,    -1,   484,   485,    -1,    -1,   391,    -1,
      -1,    -1,    -1,  2920,   427,    -1,    -1,    -1,    -1,    -1,
     396,   397,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2948,    -1,    -1,    -1,   421,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,   471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2738,
      -1,   484,   485,  2742,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,    -1,   563,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2762,  2763,    -1,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   585,    -1,   587,    -1,    -1,
      -1,    -1,    -1,    -1,  2783,   491,    -1,    -1,    -1,    -1,
      -1,   534,    -1,  2792,    -1,  2794,    -1,  2796,    -1,    -1,
      -1,    -1,    -1,    -1,   517,   518,   519,    -1,    -1,    -1,
      -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   540,  3065,  3066,
     543,    -1,    -1,     6,    -1,    -1,    -1,    -1,    11,    -1,
      13,    -1,   585,   549,   587,    -1,   552,    -1,    -1,   555,
     556,   557,   558,    26,    27,    -1,  2855,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    61,    -1,
      -1,   597,   598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,  3144,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,   622,    -1,    -1,    -1,
      93,  2920,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3169,    -1,    -1,   108,  3173,  3174,    -1,  3176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3185,  2948,
     123,    -1,    -1,  3190,   127,    -1,  3193,    -1,  3195,  3196,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,
      -1,    -1,    -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3285,    -1,
      -1,    -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,  3065,  3066,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   252,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3330,    -1,    -1,    -1,    -1,    -1,  3336,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   311,    -1,
      -1,    -1,    -1,    -1,    -1,  3144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,
     333,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3169,    -1,    -1,    -1,  3173,  3174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3185,    -1,    -1,    -1,
      -1,  3190,    -1,    -1,  3193,    -1,  3195,  3196,    -1,    -1,
      -1,    -1,    -1,   376,    -1,    -1,    -1,    -1,    -1,    -1,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3478,  3479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3262,   437,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3285,    -1,   461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3566,
      -1,  3330,    -1,    -1,    -1,    -1,    -1,  3336,    -1,    -1,
      -1,    -1,    -1,    -1,   517,   518,   519,    -1,    -1,    -1,
      -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3596,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,
     543,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3478,
    3479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3801,    -1,    -1,  3566,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3596,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3880,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3908,    -1,  3910,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3946,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3956,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3988,    -1,  3752,    -1,    -1,    -1,  3994,  3995,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3787,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3801,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4098,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4119,    -1,  4121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4131,    -1,  4133,  4134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3908,
      -1,  3910,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4160,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3956,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4219,    -1,  4221,    -1,    -1,    -1,    -1,  3988,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4236,
    4237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4250,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4308,  4309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4321,  4322,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4098,
      -1,    -1,    -1,    -1,  4341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4119,    -1,  4121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4367,    -1,  4131,    -1,    -1,    -1,    -1,  4374,    -1,    -1,
    4377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4407,    -1,    -1,    -1,    -1,    -1,    -1,  4414,    -1,  4416,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4426,
      -1,    -1,    -1,    -1,    -1,  4432,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4443,    -1,  4445,    -1,
    4447,    -1,    -1,    -1,    -1,    -1,    -1,  4454,    -1,    -1,
    4219,    -1,    -1,    -1,    -1,    -1,    -1,  4464,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4237,    -1,
      -1,  4478,  4479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4494,  4495,    -1,
      -1,    -1,  4499,    -1,    -1,    -1,    -1,    -1,  4505,  4268,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4535,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4308,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,  4407,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    45,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    -1,    -1,    98,    99,   100,   101,
      -1,   103,   104,   105,    -1,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,    -1,
      -1,   123,   124,   125,    -1,   127,  4505,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,  4535,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,   206,    -1,   208,   209,    -1,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,   258,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,   385,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,   548,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,   560,   561,
     562,    -1,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
     592,   593,   594,   595,   596,    -1,    -1,   599,   600,    -1,
     602,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,    -1,
     622,    -1,    -1,    -1,   626,   627,    -1,    -1,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,    -1,    -1,   640,   641,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,    -1,   103,   104,
     105,    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,
      -1,    -1,   117,    -1,   119,   120,    -1,    -1,   123,   124,
     125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,
     155,   156,   157,    -1,    -1,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,    -1,   202,    -1,   204,
      -1,   206,    -1,   208,   209,    -1,   211,   212,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,   441,   442,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
      -1,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,    -1,    -1,   543,   544,
     545,   546,    -1,   548,   549,   550,    -1,   552,   553,   554,
     555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,
      -1,   586,    -1,   588,   589,    -1,    -1,   592,   593,   594,
     595,   596,    -1,    -1,   599,   600,    -1,   602,   603,   604,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
     615,    -1,   617,   618,   619,    -1,    -1,   622,    -1,    -1,
      -1,   626,   627,    -1,    -1,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,    -1,    -1,   640,   641,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,   101,    -1,   103,   104,   105,    -1,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,   120,    -1,    -1,   123,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,    -1,   186,    -1,
      -1,    -1,   190,   191,   192,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,   206,    -1,
     208,   209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,   234,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
     548,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,   592,   593,   594,   595,   596,    -1,
      -1,   599,   600,    -1,   602,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,    -1,    -1,    -1,   626,   627,
      -1,    -1,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
      -1,    -1,   640,   641,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,    -1,   103,   104,   105,    -1,   107,   108,   109,   110,
     111,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
      -1,    -1,   123,   124,   125,    -1,   127,    -1,    -1,    -1,
     131,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,
      -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,   160,
     161,    -1,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
     191,   192,   193,    -1,   195,    -1,   197,   198,   199,   200,
      -1,   202,    -1,   204,    -1,   206,    -1,   208,   209,    -1,
     211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,    -1,   230,
      -1,    -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,   436,    -1,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,
      -1,   502,   503,   504,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,    -1,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
      -1,    -1,   543,   544,   545,   546,    -1,   548,   549,   550,
      -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,
      -1,   592,   593,   594,   595,   596,    -1,    -1,   599,   600,
      -1,   602,   603,   604,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,
      -1,   622,    -1,    -1,    -1,   626,   627,    -1,    -1,    -1,
      -1,   632,   633,    -1,    -1,   636,   637,    -1,    -1,   640,
     641,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    -1,    -1,    98,    99,   100,   101,    -1,   103,
     104,   105,    -1,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,    -1,    -1,   123,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,    -1,   186,    -1,    -1,    -1,   190,   191,   192,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,   206,    -1,   208,   209,    -1,   211,   212,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
     234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,   548,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,   592,   593,
     594,   595,   596,    -1,    -1,   599,   600,    -1,   602,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,    -1,   622,    -1,
      -1,    -1,   626,   627,    -1,    -1,    -1,    -1,   632,   633,
      -1,    -1,   636,   637,    -1,    -1,   640,   641,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,    -1,   103,   104,   105,    -1,
     107,   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,   120,    -1,    -1,   123,   124,   125,    -1,
     127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,
     157,    -1,    -1,   160,   161,    -1,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,    -1,   186,
      -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,    -1,   202,    -1,   204,    -1,   206,
      -1,   208,   209,    -1,   211,   212,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,    -1,   230,    -1,    -1,    -1,   234,   235,   236,
     237,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,   441,   442,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,    -1,    -1,   543,   544,   545,   546,
      -1,   548,   549,   550,    -1,   552,   553,   554,   555,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,
      -1,   588,   589,    -1,    -1,   592,   593,   594,   595,   596,
      -1,    -1,   599,   600,    -1,   602,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,
     617,   618,   619,    -1,    -1,   622,    -1,    -1,    -1,   626,
     627,    -1,    -1,    -1,    -1,   632,   633,    -1,    -1,   636,
     637,    -1,    -1,   640,   641,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    -1,    -1,    98,    99,
     100,   101,    -1,   103,   104,   105,    -1,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
     120,    -1,    -1,   123,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,   206,    -1,   208,   209,
      -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,   234,   235,   236,   237,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,   441,   442,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,   548,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,   592,   593,   594,   595,   596,    -1,    -1,   599,
     600,    -1,   602,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,    -1,   622,    -1,    -1,    -1,   626,   627,    -1,    -1,
      -1,    -1,   632,   633,    -1,    -1,   636,   637,    -1,    -1,
     640,   641,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,    -1,
     103,   104,   105,    -1,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,   117,    -1,   119,   120,    -1,    -1,
     123,   124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,
      -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,
     153,    -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,
     163,   164,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,    -1,   202,
      -1,   204,    -1,   206,    -1,   208,   209,    -1,   211,   212,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,
      -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,
     423,   424,   425,   426,    -1,    -1,   429,   430,   431,   432,
     433,    -1,   435,   436,    -1,   438,   439,   440,   441,   442,
     443,    -1,   445,    -1,   447,   448,    -1,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,   492,
     493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,
     503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,    -1,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,    -1,    -1,
     543,   544,   545,   546,    -1,   548,   549,   550,    -1,   552,
     553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,
      -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,   592,
     593,   594,   595,   596,    -1,    -1,   599,   600,    -1,   602,
     603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,   615,    -1,   617,   618,   619,    -1,    -1,   622,
      -1,    -1,    -1,   626,   627,    -1,    -1,    -1,    -1,   632,
     633,    -1,    -1,   636,   637,    -1,    -1,   640,   641,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,    -1,   103,   104,   105,
      -1,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,   120,    -1,    -1,   123,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
     206,    -1,   208,   209,    -1,   211,   212,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,   235,
     236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,   548,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,   592,   593,   594,   595,
     596,    -1,    -1,   599,   600,    -1,   602,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,    -1,   622,    -1,    -1,    -1,
     626,   627,    -1,    -1,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,    -1,    -1,   640,   641,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,    -1,   103,   104,   105,    -1,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,   117,    -1,
     119,   120,    -1,    -1,   123,   124,   125,    -1,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,   150,    -1,   152,   153,    -1,   155,   156,   157,    -1,
      -1,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,    -1,   202,    -1,   204,    -1,   206,    -1,   208,
     209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
      -1,   230,    -1,    -1,    -1,   234,   235,   236,   237,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,    -1,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,    -1,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,    -1,    -1,   543,   544,   545,   546,    -1,   548,
     549,   550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,
     589,    -1,    -1,   592,   593,   594,   595,   596,    -1,    -1,
     599,   600,    -1,   602,   603,   604,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,
     619,    -1,    -1,   622,    -1,    -1,    -1,   626,   627,    -1,
      -1,    -1,    -1,   632,   633,    -1,    -1,   636,   637,    -1,
      -1,   640,   641,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    -1,    -1,    98,    99,   100,   101,
      -1,   103,   104,   105,    -1,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,    -1,
      -1,   123,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,   206,    -1,   208,   209,    -1,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,   385,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,   548,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
     592,   593,   594,   595,   596,    -1,    -1,   599,   600,    -1,
     602,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,    -1,
     622,    -1,    -1,    -1,   626,   627,    -1,    -1,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,    -1,    -1,   640,   641,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,    -1,   103,   104,
     105,    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,
      -1,    -1,   117,    -1,   119,   120,    -1,    -1,   123,   124,
     125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,
     155,   156,   157,    -1,    -1,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,    -1,   202,    -1,   204,
      -1,   206,    -1,   208,   209,    -1,   211,   212,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,   441,   442,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
      -1,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,    -1,    -1,   543,   544,
     545,   546,    -1,   548,   549,   550,    -1,   552,   553,   554,
     555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,
      -1,   586,    -1,   588,   589,    -1,    -1,   592,   593,   594,
     595,   596,    -1,    -1,   599,   600,    -1,   602,   603,   604,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
     615,    -1,   617,   618,   619,    -1,    -1,   622,    -1,    -1,
      -1,   626,   627,    -1,    -1,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,    -1,    -1,   640,   641,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,   101,    -1,   103,   104,   105,    -1,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,   120,    -1,    -1,   123,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,   206,    -1,
     208,   209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,   234,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,    -1,   356,   357,
     358,    -1,   360,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
     548,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,   592,   593,   594,   595,   596,    -1,
      -1,   599,   600,    -1,   602,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,    -1,    -1,    -1,   626,   627,
      -1,    -1,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
      -1,    -1,   640,   641,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,    -1,   103,   104,   105,    -1,   107,   108,   109,   110,
     111,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
      -1,    -1,   123,   124,   125,    -1,   127,    -1,    -1,    -1,
     131,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,
      -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,   160,
     161,    -1,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
      -1,   202,    -1,   204,    -1,   206,    -1,   208,   209,    -1,
     211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,    -1,   230,
      -1,    -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,   436,    -1,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,
      -1,   502,   503,   504,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,    -1,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
      -1,    -1,   543,   544,   545,   546,    -1,   548,   549,   550,
      -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,
      -1,   592,   593,   594,   595,   596,    -1,    -1,   599,   600,
      -1,   602,   603,   604,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,
      -1,   622,    -1,    -1,    -1,   626,   627,    -1,    -1,    -1,
      -1,   632,   633,    -1,    -1,   636,   637,    -1,    -1,   640,
     641,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    -1,    -1,    98,    99,   100,   101,    -1,   103,
     104,   105,    -1,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,    -1,    -1,   123,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,   206,    -1,   208,   209,    -1,   211,   212,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
     234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,    -1,   360,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,   548,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,   592,   593,
     594,   595,   596,    -1,    -1,   599,   600,    -1,   602,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,    -1,   622,    -1,
      -1,    -1,   626,   627,    -1,    -1,    -1,    -1,   632,   633,
      -1,    -1,   636,   637,    -1,    -1,   640,   641,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    36,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
     127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,
     157,    -1,    -1,   160,   161,    -1,   163,   164,   165,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,    -1,   186,
      -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,    -1,   211,   212,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,    -1,    -1,   534,   535,   536,
     537,    -1,   539,   540,    -1,    -1,   543,   544,   545,   546,
      -1,   548,   549,   550,    -1,   552,   553,   554,   555,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,    -1,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,
      -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,
     617,   618,   619,    -1,    -1,   622,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   640,   641,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,   228,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,   265,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,    -1,   622,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   641,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
     127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,
     157,    -1,    -1,   160,   161,    -1,   163,   164,   165,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,   191,    -1,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,   228,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
     497,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,    -1,    -1,   534,   535,   536,
     537,    -1,   539,   540,    -1,    -1,   543,   544,   545,   546,
      -1,    -1,   549,   550,    -1,   552,   553,   554,   555,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,
     567,   568,   569,    -1,   571,   572,    -1,   574,   575,    -1,
     577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,
      -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,
     617,   618,   619,    -1,    -1,   622,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   641,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,   634,    -1,    -1,    18,
      -1,    -1,    21,   641,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,   150,    -1,   152,   153,    -1,   155,   156,   157,    -1,
      -1,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
      -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,    -1,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,   530,   531,    -1,    -1,   534,   535,   536,   537,    -1,
     539,   540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,
      -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,
     569,    -1,   571,   572,    -1,   574,   575,    -1,   577,   578,
      -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,
     619,    -1,    -1,   622,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,   634,    14,    -1,    -1,    -1,
      18,   640,   641,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   641,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,   150,    -1,   152,   153,    -1,   155,   156,   157,    -1,
      -1,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
      -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,    -1,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,   530,   531,    -1,    -1,   534,   535,   536,   537,    -1,
     539,   540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,
      -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,
     569,    -1,   571,   572,    -1,   574,   575,    -1,   577,   578,
      -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,
     619,    -1,    -1,   622,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,   633,    -1,    14,    -1,    -1,    -1,
      18,    -1,   641,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   641,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,   150,    -1,   152,   153,    -1,   155,   156,   157,    -1,
      -1,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
      -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,    -1,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,   530,   531,    -1,    -1,   534,   535,   536,   537,    -1,
     539,   540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,
      -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,
     569,    -1,   571,   572,    -1,   574,   575,    -1,   577,   578,
      -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,
     619,    -1,    -1,   622,    -1,    -1,    -1,    -1,     5,   628,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   641,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
     127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,
     157,    -1,    -1,   160,   161,    -1,   163,   164,   165,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,    -1,    -1,   534,   535,   536,
     537,    -1,   539,   540,    -1,    -1,   543,   544,   545,   546,
      -1,    -1,   549,   550,    -1,   552,   553,   554,   555,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,
     567,   568,   569,    -1,   571,   572,    -1,   574,   575,    -1,
     577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,
      -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,
     617,   618,   619,    -1,    -1,   622,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,   633,    -1,    14,    -1,
      -1,    -1,    18,    -1,   641,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,    -1,   622,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,   640,   641,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
      -1,    -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,
     155,   156,   157,    -1,    -1,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,    -1,    -1,   171,   172,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,    -1,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,
      -1,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
      -1,   526,   527,   528,   529,   530,   531,    -1,    -1,   534,
     535,   536,   537,    -1,   539,   540,    -1,    -1,   543,   544,
     545,   546,    -1,    -1,   549,   550,    -1,   552,   553,   554,
     555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,
      -1,   566,   567,   568,   569,    -1,   571,   572,    -1,   574,
     575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,
      -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
     615,    -1,   617,   618,   619,    -1,    -1,   622,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   641,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,    -1,   622,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   641,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
     127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,
     157,    -1,    -1,   160,   161,    -1,   163,   164,   165,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,    -1,    -1,   534,   535,   536,
     537,    -1,   539,   540,    -1,    -1,   543,   544,   545,   546,
      -1,    -1,   549,   550,    -1,   552,   553,   554,   555,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,
     567,   568,   569,    -1,   571,   572,    -1,   574,   575,    -1,
     577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,
      -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,
     617,   618,   619,    -1,    -1,   622,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   641,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,   123,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   640,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,   548,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,    -1,   622,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     640,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,    -1,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,   548,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,   566,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,    -1,
     622,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   640,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,   123,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,    -1,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,    -1,   622,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   640,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,   548,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,    -1,   622,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   640,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,    -1,   622,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   640,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,    -1,   622,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
     640,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
      -1,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,    -1,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,   181,
     182,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,    -1,    -1,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,    -1,    -1,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,   441,
      -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,   469,    -1,    -1,
      -1,    -1,   474,   475,   476,    -1,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,    -1,
     492,    -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,    -1,   517,   518,   519,   520,    -1,
      -1,    -1,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,   584,    -1,    -1,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,   610,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   635,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,   628,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,   628,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,    -1,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,   628,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
     628,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,    -1,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,    -1,    -1,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,    -1,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,   566,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,   123,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,   158,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,   480,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,   548,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,   123,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,   548,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,   123,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
     548,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,   101,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,    -1,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,   548,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,   566,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    12,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,   548,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,   548,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,   123,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,    -1,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,   548,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
     548,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,    -1,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,   548,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,   566,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,   548,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,    -1,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,   192,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,   123,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,    -1,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,   566,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,   123,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,   123,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,    -1,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,   548,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,   123,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,   383,   384,    -1,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,   566,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,   577,   578,    -1,    -1,   581,
      -1,    -1,   584,    -1,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,   617,   618,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,   123,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   383,   384,    -1,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
     566,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,   577,   578,    -1,    -1,   581,    -1,    -1,   584,    -1,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,
      -1,   617,   618,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   383,   384,    -1,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,   566,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,   577,   578,    -1,
      -1,   581,    -1,    -1,   584,    -1,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,   615,    -1,   617,   618,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,   383,
     384,    -1,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,   566,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,   577,   578,    -1,    -1,   581,    -1,    -1,
     584,    -1,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,   617,   618,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,   384,    -1,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,   566,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,   577,
     578,    -1,    -1,   581,    -1,    -1,   584,    -1,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,   617,
     618,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,    -1,   144,   145,   146,    -1,   148,   149,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,    -1,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,   181,
     182,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,    -1,    -1,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,    -1,    -1,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,   441,
      -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,   469,    -1,    -1,
      -1,    -1,   474,   475,   476,    -1,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,    -1,
     492,    -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,    -1,   517,   518,   519,   520,    -1,
      -1,    -1,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,   584,    -1,    -1,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,   610,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    -1,    -1,    -1,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   145,
     146,    -1,   148,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,    -1,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,    -1,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,    -1,
      -1,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,    -1,    -1,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
      -1,    -1,   438,    -1,   440,   441,    -1,   443,    -1,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,   469,    -1,    -1,    -1,    -1,   474,   475,
     476,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,    -1,   488,    -1,   490,    -1,   492,    -1,    -1,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
      -1,   517,   518,   519,   520,    -1,    -1,    -1,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,   584,    -1,
      -1,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,   608,    -1,   610,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,
      -1,    -1,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,    -1,    -1,    -1,   144,   145,   146,    -1,   148,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,    -1,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,    -1,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,    -1,    -1,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
      -1,    -1,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,    -1,    -1,   438,    -1,
     440,   441,    -1,   443,    -1,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,   469,
      -1,    -1,    -1,    -1,   474,   475,   476,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,    -1,   488,    -1,
     490,    -1,   492,    -1,    -1,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,    -1,   517,   518,   519,
     520,    -1,    -1,    -1,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,    -1,    -1,    -1,
      -1,   581,    -1,    -1,   584,    -1,    -1,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
     610,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,   152,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,    -1,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,   181,   182,   183,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,    -1,    -1,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,    -1,    -1,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,    -1,    -1,   438,    -1,   440,   441,    -1,   443,
      -1,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,   469,    -1,    -1,    -1,    -1,
     474,   475,   476,    -1,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,    -1,   488,    -1,   490,    -1,   492,    -1,
      -1,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,    -1,   517,   518,   519,   520,    -1,    -1,    -1,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,
     584,    -1,    -1,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,   610,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,   152,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
      -1,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,    -1,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,    -1,    -1,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,    -1,    -1,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,    -1,    -1,
     438,    -1,   440,   441,    -1,   443,    -1,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,   469,    -1,    -1,    -1,    -1,   474,   475,   476,    -1,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,    -1,
     488,    -1,   490,    -1,   492,    -1,    -1,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,    -1,   517,
     518,   519,   520,    -1,    -1,    -1,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,    -1,
      -1,    -1,    -1,   581,    -1,    -1,   584,    -1,    -1,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,   610,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
     152,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,    -1,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,   181,
     182,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,    -1,    -1,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,    -1,    -1,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,   441,
      -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,   469,    -1,    -1,
      -1,    -1,   474,   475,   476,    -1,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,    -1,
     492,    -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,    -1,   517,   518,   519,   520,    -1,
      -1,    -1,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,   584,    -1,    -1,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,   610,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,   619,    -1,     5,
     622,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    -1,    -1,    -1,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,
      -1,   127,    -1,    -1,    -1,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,   155,
     156,   157,    -1,    -1,   160,   161,    -1,   163,   164,   165,
     166,   167,    -1,    -1,    -1,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,
      -1,    -1,   358,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,    -1,
      -1,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,    -1,    -1,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
      -1,    -1,   438,    -1,   440,   441,    -1,   443,    -1,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,   469,    -1,    -1,    -1,    -1,   474,   475,
     476,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,    -1,   488,    -1,   490,    -1,   492,    -1,    -1,   495,
     496,    -1,    -1,    -1,    -1,    -1,   502,   503,   504,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
      -1,   517,   518,   519,   520,    -1,    -1,    -1,   524,    -1,
     526,   527,   528,   529,   530,   531,    -1,    -1,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,    -1,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,   584,    -1,
      -1,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,    -1,    -1,   610,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,   619,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,
      -1,    -1,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,   125,    -1,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,    -1,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,
     150,    -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,
     160,   161,    -1,   163,   164,   165,   166,   167,    -1,    -1,
      -1,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,    -1,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,    -1,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,    -1,    -1,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
      -1,    -1,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,    -1,    -1,   438,    -1,
     440,   441,    -1,   443,    -1,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,   469,
      -1,    -1,    -1,    -1,   474,   475,   476,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,    -1,   488,    -1,
     490,    -1,   492,    -1,    -1,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,   504,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,    -1,   517,   518,   519,
     520,    -1,    -1,    -1,   524,    -1,   526,   527,   528,   529,
     530,   531,    -1,    -1,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,    -1,    -1,    -1,    -1,
      -1,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
      -1,   571,   572,    -1,   574,   575,    -1,    -1,    -1,    -1,
      -1,   581,    -1,    -1,   584,    -1,    -1,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,    -1,    -1,
     610,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,   619,
      -1,     5,   622,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
     124,   125,    -1,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,
     144,   145,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,
      -1,   155,   156,   157,    -1,    -1,   160,   161,    -1,   163,
     164,   165,   166,   167,    -1,    -1,    -1,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,   181,   182,   183,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,    -1,    -1,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,    -1,    -1,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,    -1,    -1,   438,    -1,   440,   441,    -1,   443,
      -1,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,   469,    -1,    -1,    -1,    -1,
     474,   475,   476,    -1,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,    -1,   488,    -1,   490,    -1,   492,    -1,
      -1,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,    -1,   517,   518,   519,   520,    -1,    -1,    -1,
     524,    -1,   526,   527,   528,   529,   530,   531,    -1,    -1,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,    -1,   571,   572,    -1,
     574,   575,    -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,
     584,    -1,    -1,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,    -1,    -1,   610,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,   619,    -1,     5,   622,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,   144,   145,   146,    -1,
      -1,    -1,   150,    -1,    -1,   153,    -1,   155,   156,   157,
      -1,    -1,   160,   161,    -1,   163,   164,   165,   166,   167,
      -1,    -1,    -1,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,    -1,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,    -1,    -1,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,    -1,    -1,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,    -1,    -1,
     438,    -1,   440,   441,    -1,   443,    -1,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,   469,    -1,    -1,    -1,    -1,   474,   475,   476,    -1,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,    -1,
     488,    -1,   490,    -1,   492,    -1,    -1,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,   503,   504,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,    -1,   517,
     518,   519,   520,    -1,    -1,    -1,   524,    -1,   526,   527,
     528,   529,   530,   531,    -1,    -1,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,    -1,   571,   572,    -1,   574,   575,    -1,    -1,
      -1,    -1,    -1,   581,    -1,    -1,   584,    -1,    -1,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
      -1,    -1,   610,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,   619,    -1,     5,   622,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,   131,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,    -1,   144,   145,   146,    -1,    -1,    -1,   150,    -1,
      -1,   153,    -1,   155,   156,   157,    -1,    -1,   160,   161,
      -1,   163,   164,   165,   166,   167,    -1,    -1,    -1,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,    -1,    -1,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,    -1,    -1,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,    -1,
      -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,    -1,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,   469,    -1,    -1,
      -1,    -1,   474,   475,   476,    -1,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,    -1,
     492,    -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,
     502,   503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,    -1,   517,   518,   519,   520,    -1,
      -1,    -1,   524,    -1,   526,   527,   528,   529,   530,   531,
      -1,    -1,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,    -1,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,   584,    -1,    -1,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,   619,    -1,    -1,
     622
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    61,    62,
      77,    96,   118,   119,   128,   129,   130,   141,   142,   154,
     168,   186,   201,   203,   208,   211,   234,   236,   254,   271,
     275,   371,   388,   401,   412,   434,   437,   439,   442,   445,
     446,   455,   457,   465,   471,   479,   484,   486,   516,   523,
     566,   578,   582,   585,   590,   618,   633,   644,   647,   648,
     649,   650,   651,   653,   658,   660,   667,   700,   727,   734,
     735,   854,  1018,  1060,  1062,  1076,  1079,  1084,  1086,  1087,
    1092,  1095,  1100,  1107,  1119,  1120,  1125,  1281,  1283,  1298,
    1301,  1326,  1334,  1345,  1352,  1366,  1370,  1373,  1383,  1389,
    1393,  1395,  1396,  1448,  1476,  1482,  1484,  1491,  1493,  1519,
    1525,  1526,  1527,  1528,  1585,  1593,  1594,    11,   105,   125,
     195,   224,   276,   406,   477,   540,   588,  1056,  1550,  1551,
    1552,  1555,   272,   359,  1094,  1520,   548,  1439,   228,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    31,    35,    39,    42,    43,
      44,    46,    48,    49,    52,    55,    56,    58,    59,    61,
      63,    64,    65,    66,    67,    68,    70,    71,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    83,    84,    86,
      87,    88,    89,    90,    92,    95,    98,   100,   103,   107,
     108,   109,   112,   117,   119,   124,   125,   127,   131,   133,
     134,   135,   136,   137,   141,   144,   145,   146,   150,   152,
     153,   155,   156,   157,   160,   161,   163,   164,   165,   166,
     167,   168,   171,   172,   173,   174,   175,   178,   179,   181,
     182,   183,   186,   190,   191,   193,   195,   197,   198,   199,
     200,   202,   204,   208,   209,   211,   214,   215,   219,   220,
     221,   222,   225,   226,   227,   230,   235,   236,   240,   244,
     245,   247,   248,   252,   255,   256,   259,   262,   263,   269,
     270,   272,   274,   276,   277,   285,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   305,   306,   307,   309,   310,   311,   312,
     314,   315,   320,   321,   322,   323,   324,   325,   328,   329,
     331,   333,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   346,   347,   350,   351,   352,   353,   357,   358,   362,
     364,   365,   366,   368,   369,   370,   372,   382,   383,   384,
     386,   387,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   401,   402,   403,   405,   407,   408,   409,   410,
     411,   413,   414,   415,   418,   422,   423,   424,   425,   426,
     429,   430,   431,   432,   433,   435,   436,   438,   439,   440,
     443,   445,   447,   448,   450,   451,   452,   454,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   469,
     470,   474,   475,   476,   477,   481,   485,   487,   488,   489,
     490,   492,   493,   494,   495,   496,   502,   503,   504,   506,
     507,   509,   512,   515,   516,   517,   518,   519,   520,   523,
     524,   526,   527,   528,   529,   530,   531,   534,   535,   536,
     537,   539,   540,   543,   544,   545,   546,   549,   550,   552,
     553,   554,   555,   561,   562,   566,   567,   568,   569,   571,
     572,   574,   575,   577,   578,   581,   584,   586,   588,   589,
     596,   599,   603,   604,   605,   606,   607,   614,   615,   617,
     618,   619,   622,   694,  1437,  1442,  1446,  1447,   305,   539,
     542,  1478,  1478,   614,  1521,   105,   194,   276,   477,   497,
     540,   545,   580,   588,   676,   677,   905,   906,   907,   996,
     997,   998,   138,  1121,  1335,  1282,   105,   165,   195,   228,
     276,   406,   477,   540,   545,   563,   588,   603,  1294,  1442,
    1094,   100,   736,   693,   641,  1434,  1436,  1442,   659,  1299,
     394,    83,   414,  1394,   108,   228,   619,  1401,  1478,  1094,
     855,  1442,  1390,   465,   588,  1478,  1094,  1302,  1384,   500,
     724,   728,   729,  1442,   693,  1521,  1442,  1128,  1130,  1131,
    1449,  1353,   728,   489,   561,   489,   542,  1347,   394,  1483,
    1327,  1442,    31,    77,   152,   401,   423,   457,   516,  1587,
     471,   633,  1126,     0,   154,   645,   401,   118,   174,   190,
     389,  1371,  1434,  1442,   158,  1030,  1442,   158,   694,   205,
     694,   264,  1439,  1442,  1444,   802,   803,   806,   829,  1442,
     693,   542,   165,  1024,  1550,  1478,  1521,  1101,   701,   641,
     559,  1077,  1088,    17,  1522,   223,   908,   205,  1444,   804,
     829,   693,   378,  1547,  1551,  1552,  1553,  1554,  1555,   542,
     906,   228,   228,   228,   628,  1123,  1140,  1141,   224,   283,
     415,  1343,  1344,     7,    21,    28,    34,    36,    37,    38,
      40,    53,    54,    59,    60,    67,    70,    89,    93,    94,
      99,   101,   104,   105,   110,   111,   112,   117,   120,   123,
     169,   176,   177,   184,   190,   198,   200,   206,   212,   219,
     223,   234,   237,   261,   269,   280,   308,   313,   324,   328,
     330,   334,   335,   336,   337,   338,   345,   354,   355,   356,
     360,   361,   366,   385,   391,   396,   397,   399,   413,   441,
     442,   454,   456,   462,   463,   469,   521,   522,   528,   532,
     533,   538,   548,   552,   553,   554,   555,   564,   565,   566,
     570,   573,   588,   592,   593,   594,   595,   600,   602,   606,
     607,   622,   626,   627,   632,   633,   636,   637,   640,   641,
     957,  1145,  1146,  1147,  1148,  1152,  1155,  1156,  1157,  1158,
    1159,  1160,  1168,  1172,  1182,  1420,  1422,  1424,  1425,  1426,
    1430,  1432,  1437,  1442,   223,  1293,  1293,  1293,  1442,   205,
    1293,  1293,   829,  1293,   693,  1293,  1478,   654,  1374,   133,
      12,    13,    96,   128,   142,   165,   168,   181,   203,   228,
     234,   275,   407,   411,   427,   435,   443,   471,   484,   485,
     534,   563,   585,   587,  1494,  1496,  1498,  1499,  1442,   370,
      66,   419,   641,  1444,   126,   213,   283,  1304,  1442,  1145,
     238,  1397,  1477,  1478,    47,   856,   192,    34,   305,  1358,
    1391,  1442,   693,  1096,  1478,   126,   283,  1305,  1333,   305,
     414,   489,  1385,  1386,   596,   725,   479,   730,    12,   411,
    1492,  1496,   559,  1522,  1129,    12,   138,   213,   505,   506,
     507,   508,   509,   510,   525,  1135,  1136,  1137,  1546,    59,
      60,   123,   202,   272,   341,   391,   476,   561,   640,   959,
    1442,  1450,  1462,  1466,  1468,    24,    35,    59,    70,    92,
      94,    96,   106,   156,   161,   164,   193,   195,   202,   204,
     227,   228,   251,   272,   305,   370,   395,   405,   406,   409,
     410,   430,   476,   489,   524,   542,   605,   959,   995,  1354,
    1358,  1359,  1361,  1463,   730,   433,   512,  1071,  1072,  1073,
     419,   611,  1063,  1064,  1065,  1071,  1346,  1442,  1478,  1333,
      36,   212,   548,  1421,  1440,  1586,  1586,  1586,  1586,  1586,
    1130,  1126,   634,   639,  1442,  1121,   158,  1368,  1367,   322,
     546,   572,  1020,   586,   101,  1444,  1445,  1022,   808,   830,
    1442,  1021,   372,     6,    57,   142,   355,   418,   420,   831,
    1026,  1445,  1434,   694,   511,  1556,  1557,  1023,  1085,  1102,
    1103,  1104,  1105,  1434,   633,   702,  1442,   661,  1288,  1289,
    1434,  1288,    56,   357,   357,   434,  1523,   354,   355,  1151,
    1442,   807,   830,   188,     6,  1445,  1509,  1510,   442,    10,
     406,   563,   680,  1141,  1549,  1557,  1569,  1573,  1574,  1580,
     680,  1141,  1548,  1557,  1569,  1574,  1580,  1550,  1555,   908,
    1442,  1442,  1442,   192,   635,  1122,  1145,  1428,  1442,   192,
    1336,  1340,  1341,  1442,  1343,   633,   633,   633,  1155,   633,
     633,   633,  1145,  1185,   633,   633,   633,   633,   633,   633,
     633,   633,   633,  1144,  1144,   633,   946,   633,   633,   633,
     548,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,  1145,   633,   633,   633,  1183,  1184,
    1430,  1442,   633,   633,   633,   633,   633,   633,   633,   633,
     633,  1145,   946,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   946,   548,   633,   633,   633,   548,   633,   633,   633,
      36,   212,   548,   633,  1144,   946,   946,   633,   633,   633,
     633,   633,   633,  1155,  1155,  1155,  1145,  1541,  1542,  1442,
    1173,  1442,    16,    17,   375,   378,   620,  1149,  1150,   158,
     159,   196,   207,   246,   257,   284,   348,  1153,    32,   139,
     241,   265,   334,   428,   482,   483,   495,   624,   625,   626,
     627,   628,   629,   630,   631,  1151,  1155,    69,   377,   635,
    1440,   633,   641,   169,  1442,   694,  1442,   367,   830,   694,
    1444,   358,   604,   840,   841,  1295,  1296,  1297,  1359,   694,
    1445,  1508,  1287,  1293,   591,   655,    34,   131,   156,   160,
     197,   215,   277,   405,   414,   429,   447,   490,   520,  1375,
    1380,  1381,  1478,    82,   640,   737,   738,   739,   740,  1442,
     405,  1497,   459,   459,   540,   545,   588,   603,   373,  1501,
     539,   367,  1503,    65,   489,  1500,   106,   603,  1502,   367,
     635,    19,   158,  1237,  1238,  1485,  1442,  1056,   494,    49,
      81,   283,  1403,  1434,  1479,  1480,  1093,   267,   270,   416,
     857,   859,   640,   652,  1439,   277,  1097,  1445,  1098,  1099,
    1434,  1080,   238,  1290,  1306,  1307,  1434,    49,  1387,   635,
    1440,    55,    64,    74,    86,    87,    88,   103,   323,   340,
     467,   527,   544,   731,   733,  1497,   367,   367,   465,  1524,
    1523,   579,  1529,  1530,   628,  1139,  1140,  1137,   479,   641,
      34,   123,   158,   480,   960,   961,  1317,  1444,   189,  1317,
    1452,   640,  1444,    34,   123,   963,   964,  1444,   641,  1453,
    1451,  1317,   164,   265,   609,  1365,   633,   105,   165,   195,
     406,   542,   563,   603,  1365,    12,   917,  1444,   266,  1256,
    1258,   192,   241,  1360,  1362,    68,   520,   189,   520,   539,
      68,   520,    12,    42,    90,    95,   245,   321,   384,   496,
     536,  1348,  1349,  1350,   164,   215,   520,   520,  1256,  1365,
    1362,   277,   155,    71,   408,   539,   562,   520,   599,  1061,
     635,   369,   616,    84,   635,  1289,  1056,   635,   368,  1589,
     535,  1590,   250,   450,  1588,   634,  1530,  1532,  1534,  1535,
     154,   646,  1123,  1444,  1120,  1298,  1301,  1326,  1334,  1369,
    1372,  1421,  1442,   123,   903,   904,   914,   915,   968,   108,
    1144,   640,   695,     6,   809,   695,   633,   107,   826,   826,
     826,     4,   635,   391,  1019,  1025,   470,   603,  1557,  1288,
     241,   635,   388,  1113,  1115,  1116,   703,   704,  1145,   225,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   306,
     307,   431,   432,   662,   663,   666,   174,   415,   635,  1078,
      58,   174,   178,   189,   320,   415,  1089,  1090,  1091,    56,
     434,   169,   675,   809,   108,   826,   221,   635,  1141,  1141,
    1141,   165,   195,   195,  1557,  1434,   999,  1000,   999,   999,
     471,   633,   637,  1188,  1189,  1190,  1191,  1192,  1203,  1204,
    1218,  1140,  1142,  1142,   641,  1291,  1292,  1434,  1435,  1442,
     635,  1338,   641,  1342,  1145,  1145,    12,   138,  1178,  1239,
    1178,  1178,  1178,   608,  1187,  1145,  1145,  1182,  1182,  1145,
    1145,  1145,   138,  1178,  1239,   634,   361,   634,   634,  1145,
    1145,  1145,  1145,  1430,  1541,   113,   114,   115,   116,   117,
     216,   217,   218,   219,   324,   326,   327,   328,   335,   413,
     468,   469,   606,   621,   622,  1234,  1235,  1145,  1182,   109,
     112,   552,   555,  1236,   138,  1175,  1145,  1145,  1145,  1145,
    1234,  1145,  1182,  1184,     9,   635,   641,   138,  1178,  1145,
    1145,   138,  1178,  1145,  1145,  1182,  1182,  1182,  1145,  1145,
    1145,  1182,  1148,  1145,  1145,  1145,  1145,  1145,  1145,   634,
    1145,  1178,  1178,  1145,  1145,   138,  1178,  1145,  1235,  1235,
    1145,    45,   258,   560,  1145,  1145,   634,  1431,  1432,  1442,
    1178,  1178,  1145,  1145,  1145,   634,   635,   634,   471,   633,
    1538,  1539,  1145,   640,  1174,  1444,   641,  1145,  1145,  1145,
    1147,   177,   360,   565,   581,  1151,    12,    18,  1147,  1154,
    1148,  1148,   633,  1155,  1148,  1148,  1148,  1148,   265,  1148,
    1148,   237,  1148,   237,  1148,  1148,  1148,  1148,  1148,    32,
     241,   265,   428,  1444,  1155,  1145,  1161,  1442,   641,  1434,
    1295,   635,  1297,   156,   635,  1288,  1284,   640,   656,   657,
     277,   277,   277,   277,    49,   277,   277,   635,  1376,   112,
     552,   555,   732,   742,  1172,  1424,  1430,  1444,   635,   158,
     539,   633,  1511,  1445,  1511,  1511,  1511,   195,   406,   542,
    1495,  1499,  1442,   182,   351,  1442,  1486,  1487,  1306,  1439,
    1108,   272,  1402,  1238,   635,  1288,    71,   633,   863,   864,
     863,   864,   389,   866,   209,   253,  1444,    30,   559,  1392,
     635,   559,   635,   559,  1288,  1307,  1303,   388,  1201,  1202,
      12,  1388,  1386,   635,   158,   635,  1445,   195,   406,  1495,
    1442,    12,   138,  1537,   635,  1132,  1442,    69,   966,  1145,
    1445,   366,   391,   548,  1474,   247,   419,  1469,  1470,  1471,
    1472,   202,   272,   476,  1464,  1317,  1442,   561,  1454,  1465,
    1468,   635,  1456,  1467,   241,  1363,  1439,  1145,   628,   908,
     694,   694,   694,  1434,   694,  1434,   277,   339,   520,  1357,
    1357,   280,   361,   570,  1259,  1260,  1422,  1442,  1365,  1442,
     694,  1365,  1445,  1360,   694,  1365,   244,   537,   179,   189,
    1351,   635,  1363,  1360,  1434,  1362,  1360,  1360,  1365,  1365,
     584,  1074,  1073,   492,  1065,  1189,  1421,   392,  1591,   376,
    1252,  1258,  1536,  1122,   904,    69,   959,   134,  1444,    75,
      89,   255,   332,   357,   417,   511,   697,   699,   424,   574,
     827,   828,   230,   823,   824,   825,   832,   840,   841,   105,
     214,   382,   391,   398,   493,   588,   678,   679,  1439,    25,
     312,   817,   818,   819,   832,   833,   834,   840,   841,   810,
     811,   817,  1445,   172,     6,    11,    13,    15,    26,    27,
      57,    61,    62,    67,    75,    83,    93,   108,   127,   135,
     136,   142,   150,   156,   167,   187,   226,   228,   235,   252,
     275,   311,   329,   333,   371,   376,   383,   388,   391,   422,
     436,   437,   438,   439,   461,   517,   518,   519,   524,   540,
     543,   566,   579,   851,   910,   912,   914,   915,  1031,  1035,
    1037,  1040,  1046,  1047,  1048,  1053,  1054,  1248,   367,   688,
    1027,   125,   240,  1434,   123,  1106,  1442,  1104,  1434,   853,
    1115,   228,   253,   993,  1117,   634,   635,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   635,  1289,   586,  1090,   902,   903,    75,   352,   425,
     575,   820,   821,   822,   832,   836,   837,   838,   839,   840,
     841,   615,   590,   805,    47,   611,  1510,   195,   694,   694,
     908,   694,  1442,   668,   568,   591,  1007,   367,   367,   367,
    1217,  1442,    97,   231,   250,   261,   344,   456,   525,  1200,
     609,  1124,   635,  1434,  1217,    19,  1143,  1439,  1442,   628,
    1442,   635,  1339,  1201,   641,  1342,  1341,   192,   628,  1442,
     635,   634,  1178,   634,  1179,   634,   634,   634,  1145,   148,
     608,  1186,    19,   634,   591,   634,   634,   634,   635,   591,
     635,  1169,   634,   628,   634,   635,   635,   634,   634,   634,
     634,   192,   635,   634,   635,  1171,   634,   635,   635,   635,
     627,   635,   634,   634,   633,  1430,  1442,  1178,   634,   634,
     634,  1178,   634,   635,   634,   634,   634,   634,   634,   634,
     635,   634,   241,   634,   635,   635,   634,   635,   635,   634,
     634,   634,   635,   192,   635,  1178,   634,   634,   635,   635,
     635,   634,   192,  1145,   192,  1145,   192,  1145,   192,   634,
     635,   634,   634,   634,   634,   635,    19,   263,   635,   983,
     634,  1182,  1208,  1209,  1210,   471,   633,  1127,  1533,  1534,
     579,  1543,   638,  1464,   480,  1442,   177,   360,   565,   581,
     633,    17,  1145,  1541,   163,  1244,  1148,  1145,  1145,  1148,
     633,  1155,  1148,  1141,  1165,  1166,  1167,   633,   641,  1442,
    1285,  1297,  1317,  1318,  1445,    51,   449,  1057,  1288,  1444,
     635,  1381,  1288,  1382,   740,   743,   744,   739,   362,   463,
     741,  1442,  1512,  1513,   559,   628,  1434,  1442,  1507,  1507,
    1507,   158,   182,   196,   207,   256,   257,   284,   351,   403,
    1488,  1490,   609,  1240,  1300,  1109,  1110,  1111,  1112,  1434,
     229,   283,   419,   616,  1481,  1480,   633,  1141,   120,   184,
     212,   280,   361,   570,  1263,  1266,  1267,   531,   867,   858,
     633,  1145,  1439,  1445,  1445,  1099,  1434,   174,   415,   589,
    1081,  1082,  1083,   471,   479,   595,   596,   633,   898,  1308,
    1311,   633,   733,   732,   203,   192,  1507,  1507,  1507,  1531,
    1140,   192,   238,  1133,  1134,  1251,  1252,  1276,   123,   965,
     967,  1444,  1317,   633,   633,   263,   369,   616,   635,   635,
     641,   641,   641,  1468,  1145,  1469,  1455,  1317,  1457,  1458,
      12,    34,   123,   367,  1145,  1475,  1439,   192,  1364,   634,
    1442,   365,   635,  1365,   414,  1256,  1350,  1364,  1365,  1360,
    1434,  1365,  1365,   502,   503,   504,   666,  1075,   588,  1066,
    1067,   479,   635,   189,  1592,    47,  1256,  1318,  1318,   342,
    1439,   511,   511,   511,   511,   511,   470,  1439,  1439,  1318,
     635,   825,  1439,  1439,  1439,  1439,   120,   184,   212,   280,
     361,   570,  1262,  1439,  1439,   634,   635,  1318,  1318,   635,
     819,   812,   813,   832,   833,   834,   391,    72,    85,   388,
     926,   929,   930,   991,   993,   997,   998,  1055,  1318,  1055,
     388,  1318,  1318,  1055,  1318,   388,   388,  1318,  1318,   559,
     134,  1318,   251,   540,   188,   388,   404,   993,  1055,   251,
    1318,   388,   540,   134,  1318,  1318,  1318,  1318,  1318,  1055,
     388,    47,  1318,   853,  1318,   388,   390,    19,   158,   559,
    1059,   388,   388,  1318,  1318,  1318,  1318,   137,   321,  1442,
    1318,   388,  1318,   910,   635,   850,   851,  1035,   633,   641,
     925,   931,  1433,  1442,    79,   466,   437,  1028,  1558,  1114,
     633,  1145,   633,  1262,  1438,  1439,  1262,  1262,  1438,  1438,
     120,   184,   280,   361,   570,  1264,  1438,  1262,  1262,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1262,  1262,  1438,  1425,
    1438,  1262,   663,  1318,  1318,  1318,  1318,   635,   822,  1444,
     276,   175,   814,   815,   816,   832,   833,   834,   835,   838,
     839,   840,   841,   391,   548,  1444,  1442,  1581,     8,    30,
     800,   694,   633,   452,   265,   633,   843,   909,   911,   912,
      46,   209,   464,  1012,  1012,  1434,  1434,  1434,  1205,  1212,
    1217,  1188,   250,   250,   379,  1219,   250,   261,   456,  1219,
    1203,  1188,  1145,  1190,  1201,  1214,  1215,  1439,  1442,   641,
    1292,  1442,   591,  1337,  1442,  1189,   641,  1342,   237,  1145,
     634,  1145,   551,  1145,  1145,   152,    34,    60,   109,   112,
     121,   346,   487,   555,   583,  1180,   960,  1145,   960,  1180,
    1182,   634,   237,   237,  1145,  1145,  1145,  1182,  1145,  1145,
    1145,  1145,  1145,  1148,   634,   634,  1145,  1145,  1145,  1145,
    1145,  1145,  1182,   237,  1145,  1145,  1145,   634,  1145,  1145,
    1145,  1145,   192,  1145,   192,  1145,   192,  1145,  1145,  1145,
      34,    60,   978,   979,   980,   981,   982,  1263,  1262,   634,
     634,  1544,  1545,  1546,  1209,  1127,   634,  1537,  1444,  1145,
    1541,  1147,   634,   635,   634,  1155,  1234,  1234,    17,  1145,
    1541,  1244,  1145,   634,   635,  1181,  1182,  1442,  1286,   916,
    1444,  1057,   657,  1377,   158,   635,   634,   635,  1509,   641,
     641,   559,   559,   559,  1489,  1241,  1257,  1258,  1308,   635,
    1113,  1115,   548,  1441,   616,   272,   860,   861,   862,  1442,
     872,  1148,    47,   633,   874,   864,   860,   559,  1082,   899,
    1309,   633,  1314,  1319,  1314,   634,   898,  1310,  1427,  1428,
    1431,  1442,  1312,  1233,  1442,   158,   373,  1509,   192,   192,
     192,  1125,   143,  1189,  1277,   189,   275,  1138,  1276,  1257,
    1134,  1474,   548,   548,   419,   440,   474,  1473,  1471,  1470,
    1317,  1456,  1475,   635,  1460,  1462,  1466,  1264,  1355,   161,
     605,  1260,  1260,   361,  1356,  1240,  1360,   158,   158,   635,
     158,   391,  1068,  1329,  1330,  1431,  1262,   325,  1253,   967,
     961,   108,   108,   125,   240,   220,   842,  1263,   825,   679,
     842,   842,   819,   635,   813,   172,  1015,  1433,  1094,    62,
     188,   404,   580,   928,   992,  1015,   993,   994,   994,   123,
    1442,  1433,  1094,  1264,  1262,  1433,  1262,    12,  1036,  1044,
    1045,  1442,  1094,  1439,  1439,   959,  1318,  1262,   253,  1044,
     253,  1433,  1433,   916,  1045,  1318,   182,   256,   357,   919,
    1262,   123,  1442,  1264,  1264,  1433,  1094,  1249,  1250,  1431,
     123,  1262,   852,  1439,  1094,   853,  1434,  1094,  1094,    78,
      80,   123,   146,   183,   426,   918,   123,  1262,   123,  1262,
     123,  1262,  1262,  1036,   913,     6,   142,  1048,   922,   923,
     924,   925,   926,  1442,     8,   182,  1058,   427,   927,   928,
     985,   932,   641,   355,   402,    23,   166,   682,   559,   135,
     150,   684,   633,  1559,   633,   404,  1230,  1231,  1232,  1442,
     664,   665,  1262,  1439,  1263,   842,   842,   822,   372,   205,
    1318,   635,   816,   548,    19,   452,   633,   128,   234,   585,
     801,   681,  1575,   121,   239,   421,   526,   921,  1434,   265,
     844,   849,   850,   922,   849,   635,   911,   669,   671,   673,
     579,   634,  1533,  1213,   638,   250,  1203,  1219,  1219,   250,
     367,   367,   591,  1238,  1135,   628,   641,  1189,  1240,  1342,
    1240,  1145,   634,  1145,   551,   633,   950,   951,   951,   633,
     945,   633,   943,   944,   950,   951,   239,   945,   239,   634,
     634,   634,   634,   634,  1170,  1145,  1145,   634,   634,   635,
     634,  1177,  1252,   635,   635,   634,   635,   634,   241,  1162,
    1163,   634,   634,   634,   634,   635,   634,   634,  1145,   634,
     189,   634,   634,   635,   634,   635,   635,   634,  1145,   634,
    1145,   634,  1145,   634,   634,   634,   633,   973,   973,    20,
     129,   454,   626,   975,   976,   977,   635,   635,  1139,  1546,
     634,  1540,   641,  1016,   634,  1182,  1147,   634,   635,   634,
    1142,  1167,   634,  1052,  1053,  1054,   189,   611,  1378,    55,
      64,    74,    86,    87,    88,   103,   323,   340,   451,   467,
     527,   544,   745,   744,  1513,   611,  1516,   628,   628,  1509,
    1509,  1509,   633,  1145,   367,  1324,  1111,  1434,  1115,   224,
    1118,  1398,   634,   635,  1142,   859,   388,   875,   876,   634,
    1445,  1135,  1315,  1316,  1431,  1320,   635,   633,  1311,   634,
     634,   635,   641,  1529,   634,   635,   732,   192,  1509,  1509,
    1509,  1240,  1240,   144,   380,  1272,  1273,  1278,   585,   241,
     634,   634,    76,   571,   419,  1475,  1459,  1461,  1256,  1256,
    1365,  1439,  1439,   666,  1439,   158,   124,  1069,   635,  1328,
    1317,  1145,  1254,  1429,   813,  1038,   633,   253,   253,   994,
    1015,  1000,  1015,  1015,   142,   479,  1036,  1049,  1033,   635,
    1263,   961,  1439,  1433,  1057,   611,  1439,  1050,  1036,   635,
      20,   129,  1255,   856,  1036,  1041,  1036,   633,   634,   635,
    1442,  1434,    33,    34,    39,    41,    43,    44,    60,   109,
     112,   121,   140,   157,   183,   185,   198,   199,   239,   269,
     278,   279,   281,   317,   318,   319,   336,   337,   338,   343,
     346,   363,   364,   396,   397,   421,   475,   479,   491,   549,
     552,   555,   556,   557,   558,   597,   598,   622,   933,   936,
     937,   938,   939,   940,   941,   942,  1442,   402,  1145,  1145,
     367,   688,   694,   367,    75,   689,  1442,  1560,    19,  1036,
     634,   635,   634,   635,   633,  1442,   842,   816,  1439,   921,
    1582,   367,   367,   705,   706,   708,  1442,   494,  1434,   898,
     634,   224,   442,   846,  1404,   911,   633,   633,   633,  1537,
    1238,  1191,  1188,  1203,   250,   250,  1188,  1203,  1194,  1193,
    1195,  1228,  1229,  1139,  1442,  1240,  1251,  1234,  1145,   120,
     280,   361,   570,    21,    34,    48,   577,   959,   969,   970,
     971,   361,   361,   634,  1234,  1234,  1145,   473,  1176,  1145,
    1145,  1182,    43,   344,   634,   611,  1164,  1145,  1234,  1145,
    1145,  1145,  1145,   634,   634,   634,  1263,   634,   983,   978,
     976,   978,   979,  1262,  1211,  1538,  1442,   634,  1182,  1143,
    1054,  1053,  1379,   419,   203,   444,  1514,  1514,  1514,   123,
    1145,  1322,  1323,   145,  1118,   259,  1404,   862,   634,   209,
     253,   877,   634,   635,  1139,   635,  1317,  1321,  1322,  1319,
    1313,  1311,  1427,  1442,   853,  1442,  1509,  1257,   205,  1245,
    1441,  1441,   640,  1274,  1275,  1444,   481,  1460,  1465,  1439,
     158,   393,  1070,  1330,  1240,  1323,   635,  1255,   389,   633,
    1039,  1145,  1015,  1000,   633,   999,   999,   123,   123,   931,
    1089,  1045,   966,   542,   933,  1032,  1250,  1042,  1044,  1034,
    1382,   924,   633,   986,   950,   950,   951,   945,   943,   400,
     934,   943,   943,   971,    60,   597,   937,   939,   971,   971,
      60,   598,   598,   601,   943,   935,   951,   945,   945,   971,
     950,   951,    26,    69,    73,    75,   123,   360,   367,   404,
     475,   524,   580,   953,   954,   955,   984,  1151,   601,   950,
     971,    34,   950,   972,   950,   950,   951,   633,   944,   952,
     641,  1234,   489,  1439,   141,  1029,   634,   635,  1561,  1562,
     634,  1231,   665,   678,   494,   232,   241,   381,   709,   710,
     711,   712,  1141,   466,   634,   635,   707,  1439,   634,   634,
     909,    19,   901,  1013,  1014,  1442,  1013,  1013,  1206,   367,
    1197,  1203,  1203,   367,  1199,  1145,  1145,   633,  1226,  1227,
    1216,   266,  1261,   634,   634,   634,   634,   634,    34,    21,
     577,   959,    34,   960,   634,   635,   634,   634,   634,  1421,
     634,   634,   635,   634,   331,   255,   414,   634,   634,   634,
     634,   634,   634,   974,   634,   635,   920,  1134,  1257,  1533,
     634,   173,   275,   373,    63,   248,   353,   513,   529,   617,
    1505,  1506,   611,  1515,  1515,  1515,   634,   635,  1325,   238,
     633,   865,   633,   878,  1442,   876,   900,  1316,  1323,   634,
    1532,    47,   210,  1242,  1279,  1444,   635,   331,  1439,   158,
    1251,  1429,  1263,   875,   634,   633,   633,  1013,   633,   633,
     112,   552,   555,   626,   627,  1423,  1424,  1058,  1434,   953,
    1094,  1043,  1081,   634,   987,  1442,   308,   988,   487,   583,
     623,   947,   948,   949,   633,   947,   947,   971,   601,   947,
     633,   971,   947,   965,   123,   146,   183,  1439,   957,   958,
    1423,   585,   123,   123,   137,   321,   253,   955,   253,   360,
     971,   972,   971,   972,   947,   361,   947,  1442,   683,   690,
     691,  1442,   471,   633,  1563,  1566,   634,  1439,   634,   635,
     707,  1570,   682,  1576,   708,   933,   956,   845,   849,   633,
     898,   634,   635,  1255,   633,   634,   634,  1538,  1196,   591,
    1198,   591,  1233,   187,   224,   590,  1221,  1222,  1225,   920,
    1260,   960,   972,   361,  1145,   331,   171,   634,  1262,  1138,
    1138,   548,   548,   548,    17,  1504,   203,   309,   310,   314,
     315,  1517,  1518,  1323,   253,   542,  1141,   868,   870,   871,
    1442,   595,   879,   920,  1246,  1429,  1243,  1251,   959,   962,
    1275,  1439,  1261,  1255,   634,  1013,  1013,   634,  1013,  1013,
    1425,  1425,   853,  1051,   238,   634,   635,   193,   387,   488,
     367,   989,   949,  1017,  1421,  1017,   957,   596,   515,   685,
      53,    66,   180,   223,   249,   260,   370,   453,   692,   750,
     752,   753,   754,   756,   757,   758,   759,   760,   761,   763,
     771,   772,   775,   786,   789,   791,   792,  1437,  1443,  1447,
    1567,   633,  1565,  1566,   611,  1568,  1564,  1583,   711,  1442,
    1434,   687,   688,   452,   966,  1532,   846,   898,   847,    75,
     252,  1001,  1004,  1007,  1008,  1009,  1014,   361,   611,  1002,
    1006,  1008,  1011,  1003,  1005,  1008,  1010,  1207,  1145,   633,
    1145,   633,   634,   993,   993,  1222,   634,   634,   634,  1505,
     373,  1262,  1262,  1262,  1262,  1518,   585,  1434,   872,   530,
     873,   634,   635,   241,   262,    75,   108,   228,   311,   329,
     352,   540,   895,   896,   897,  1359,   612,   613,   635,  1247,
    1255,  1145,  1257,   961,  1280,   634,   634,  1001,   634,   634,
    1058,   633,  1442,   128,   585,   634,   635,   634,  1145,   153,
     686,   773,   776,  1442,   192,   351,   764,   751,  1443,  1443,
    1442,   755,   648,   282,   441,   610,   795,    31,   793,   642,
    1130,  1565,   634,    52,    62,   272,  1529,   696,   956,   189,
     684,  1577,   634,  1529,  1439,  1318,   670,  1009,  1255,   634,
     386,   672,  1011,   674,  1010,  1533,  1233,  1233,   189,  1220,
    1220,  1331,  1332,  1431,  1201,  1142,  1263,   869,   871,   881,
     550,  1318,   134,   134,  1318,  1318,  1318,  1318,   633,   890,
     897,   156,  1429,   406,  1268,    71,  1405,   985,  1001,  1002,
    1003,   875,    51,   357,   449,   479,   990,   990,   971,  1421,
     971,  1145,  1145,   608,   778,   782,   192,  1442,   766,   767,
    1145,   714,   749,   750,   752,   754,   756,   758,   759,   760,
     761,   763,   771,   786,   789,   791,   714,   796,   794,   787,
     790,   634,  1532,    62,   373,    62,   132,   697,   698,  1151,
    1584,  1141,   689,   956,   848,  1262,  1052,  1437,  1052,  1052,
     634,   634,   205,   250,   376,  1224,  1223,   635,  1317,  1399,
     634,   873,   633,   883,   885,   880,  1439,  1318,  1318,   280,
     361,   570,  1265,  1266,  1265,  1263,  1444,   531,   891,   892,
    1318,  1255,    14,   151,   162,   374,   547,  1406,  1407,   268,
    1408,   634,     5,   123,   360,   367,   367,   774,   783,   148,
     782,   785,   238,   152,  1145,   152,   749,   639,   584,  1145,
     715,   795,   793,   373,   373,   132,   749,  1571,   141,  1578,
    1532,    47,    47,   633,   633,  1332,  1323,   962,   633,   884,
     885,   886,   316,   882,   885,  1439,  1439,   893,   634,   635,
     916,  1269,    47,    47,   151,    47,  1407,   514,   547,  1409,
    1410,   585,   128,   608,   777,   779,  1145,   714,   152,   762,
     223,   768,   282,   639,   798,   797,   122,   713,   716,   788,
    1443,   788,   147,   690,   696,  1230,  1232,  1400,   634,   635,
     316,   888,   889,  1148,   894,  1444,   892,   633,  1421,  1421,
      47,  1421,    47,    47,  1410,   990,   990,   780,   779,   785,
     784,    53,   765,  1442,   551,  1145,   141,    91,   170,   720,
     746,  1442,   152,   749,   639,   462,  1579,   634,   634,   460,
    1411,   885,   635,   887,   895,   361,  1270,  1271,  1421,  1421,
    1421,  1145,   152,   551,   635,   714,   799,   714,   208,   635,
     717,    82,   102,   639,  1572,   749,   221,  1405,   889,   634,
     634,   635,   781,    53,   714,  1442,   769,   152,   152,   189,
    1442,   956,   189,   189,   749,    47,  1408,  1271,   551,   148,
     149,   770,   441,   610,   718,   123,   747,   723,   724,  1262,
     719,  1421,   224,  1412,   714,   714,   766,   499,   501,   721,
     722,   723,   726,  1151,  1442,   748,  1120,   361,   633,  1414,
     635,   749,   191,  1145,   268,   460,  1413,   634,   640,  1415,
    1416,  1431,   479,  1417,   722,  1444,   634,   635,  1418,  1419,
    1431,  1416,   635,  1317,  1419,  1141,  1323,  1142
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1937 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1949 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1974 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 2053 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 2068 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2078 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2085 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2095 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2102 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2117 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2129 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2137 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2148 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2161 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2171 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2175 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2179 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2183 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2187 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2191 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2195 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2200 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       static_cast<uint>((yyvsp[(3) - (3)].ulong_num)), MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2210 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2215 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2219 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2223 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2227 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2231 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2235 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2240 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2244 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2249 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2280 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2285 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2302 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2316 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2320 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2336 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2340 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2352 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2377 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2396 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2401 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2405 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2408 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2413 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2417 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2420 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2425 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2429 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2431 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2436 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2443 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2449 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2451 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2455 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2459 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2463 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2474 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2488 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2492 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2496 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2500 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2504 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2508 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2512 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2519 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2539 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2550 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2557 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2563 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2565 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2571 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2577 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2586 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2593 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2601 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2607 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2613 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2619 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2627 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2629 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2636 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2679 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2708 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2723 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2737 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2755 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2756 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2760 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2761 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2767 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2769 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2771 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2773 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2775 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2777 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2779 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2784 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2785 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2786 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2791 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2795 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2802 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2810 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2826 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2830 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2848 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2868 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2909 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2937 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2938 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2939 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2940 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2944 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2949 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2955 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2959 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2985 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2996 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3069 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3085 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3125 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3159 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3168 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3231 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3232 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3238 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3240 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3245 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3268 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3283 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3304 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3305 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3310 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3314 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3327 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3333 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3339 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3348 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3363 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3389 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3394 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3396 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3401 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3409 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3418 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3437 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3439 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3457 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3463 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3465 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3467 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3469 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3471 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3473 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3475 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3477 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3479 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3481 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3483 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3485 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3490 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3506 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3521 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3523 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3528 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3534 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3543 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3549 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3558 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3566 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3595 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3604 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3606 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3615 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3620 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3626 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3635 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3643 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3645 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3647 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3649 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3651 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3653 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3655 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3657 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3659 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3661 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3663 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3665 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3667 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3672 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3692 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3715 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3717 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3719 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3740 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3742 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3750 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3760 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3807 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3817 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3863 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3874 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3886 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3945 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3995 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 4019 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 4040 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 4045 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 4075 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 4093 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 4113 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 4122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 4158 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 4177 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4200 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4211 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4255 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4262 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4269 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4286 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4295 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4336 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4344 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4353 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4389 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4397 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4415 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4433 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4452 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4453 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4458 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4474 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4491 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4502 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4510 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4525 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4561 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4576 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4585 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4623 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4639 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4648 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4689 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4691 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4696 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4698 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4700 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4734 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4736 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4746 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 4752 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 4775 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4873 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4881 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4889 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4897 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4909 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4921 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4926 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4931 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4939 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4947 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4955 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4963 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4971 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4979 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4987 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 5000 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 5013 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 5027 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 5032 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 5044 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 5046 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 5096 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 5099 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 5101 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 5116 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 5135 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 5138 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 5139 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 5143 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 5145 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 5146 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 5148 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 5149 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 5154 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 5190 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 5196 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 5214 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 5233 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 5245 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 5254 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 5261 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 5262 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 5264 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 5266 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 5268 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 5270 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 5274 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 5276 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 5280 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 5281 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 5285 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 5286 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 5291 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 5310 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 5320 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 5331 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 5339 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5341 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5356 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5358 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5359 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5362 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5367 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5371 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5372 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5377 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5395 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5410 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5412 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5427 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5443 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5464 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5465 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5470 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5489 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5494 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5503 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5525 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5540 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5542 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5557 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5562 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5583 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5588 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5617 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5628 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5629 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5634 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5645 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5647 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5670 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5671 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5676 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5689 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5709 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5723 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5748 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5749 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5754 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5786 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5791 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5795 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5796 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5800 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5801 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5806 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5808 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5814 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5816 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5818 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5820 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5822 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5824 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5833 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5848 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5852 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5862 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5863 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5867 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5868 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5872 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5873 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5877 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5878 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5882 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5883 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5887 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5888 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5892 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5896 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5897 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5918 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5923 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5928 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5933 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5938 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5943 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5948 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5953 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5968 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5974 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5989 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5994 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 6009 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 6015 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 6033 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 6038 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 6043 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 6048 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 6053 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 6058 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 6062 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 6086 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 6091 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 6096 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 6101 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 6103 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 6105 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 6107 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 6113 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 6121 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 6139 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 6156 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 6182 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 6199 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 6200 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 6201 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 6202 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 6203 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 6204 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 6208 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 6209 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 6210 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 6214 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 6219 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 6220 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 6221 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 6222 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 6228 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 6246 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 6253 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 6259 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 6265 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 6271 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 6276 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 6295 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 6310 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 6311 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 6315 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 6320 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 6329 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 6342 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 6343 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 6344 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 6346 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 6351 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 6355 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 6360 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 6365 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 6369 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 6374 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 6379 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 6385 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 6390 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 6396 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 6400 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 6405 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6410 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6428 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6430 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6432 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6448 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6450 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6455 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6460 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6472 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6477 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6482 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6487 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6489 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6491 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6493 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6495 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6497 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6499 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6501 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6503 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6505 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6507 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6509 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6511 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6513 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6521 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6522 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6524 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6528 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6529 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6530 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6531 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6532 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6536 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6540 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6541 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6545 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6546 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6550 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6551 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6552 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6553 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6554 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6558 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6559 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6560 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6561 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6562 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6567 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6572 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6574 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6579 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6581 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6583 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6588 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6597 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6598 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6602 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6603 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6605 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6612 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6613 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6617 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6618 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6622 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6623 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6624 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6628 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6629 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6630 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6631 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6634 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6635 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6639 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6640 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6644 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6645 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6649 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6654 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6655 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6656 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6657 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6658 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6660 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6666 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6672 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6678 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6683 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6685 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6698 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6704 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6710 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6716 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6721 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6726 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6735 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6756 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6765 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6769 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6770 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6775 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6782 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6786 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6787 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6791 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6792 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6797 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6805 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6809 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6810 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6815 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6822 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6823 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6827 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6828 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6832 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6833 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6838 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6840 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6844 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6851 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6860 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6865 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6872 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6875 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6876 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6878 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6883 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6890 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6891 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6896 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6904 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6908 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6909 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6913 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6916 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6917 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6918 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6919 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6924 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6932 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6938 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6939 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6944 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6953 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6954 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6958 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6959 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6973 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6980 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6986 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6993 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 7005 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 7007 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 7009 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 7011 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 7016 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 7022 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 7028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 7035 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 7042 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 7050 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 7051 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 7052 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 7053 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 7054 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 7058 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 7062 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 7063 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 7067 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 7068 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 7072 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 7077 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 7078 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 7079 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 7083 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 7084 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 7088 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 7093 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 7105 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 7122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 7127 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 7132 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 7152 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 7153 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 7158 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 7159 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 7174 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 7186 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 7187 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 7188 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 7192 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 7193 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 7198 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 7204 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 7217 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 7218 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 7222 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 7223 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 7227 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 7228 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 7236 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
          }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 7262 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 7274 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 7279 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 7288 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 7299 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 7310 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 7317 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 7328 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 7335 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 7346 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 7353 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 7365 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 7367 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 7387 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 7400 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 7405 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 7410 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 7415 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 7420 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 7427 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 7434 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 7439 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7446 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7447 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7448 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7449 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7453 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7455 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7466 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7467 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7471 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7472 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7478 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7486 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7508 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7513 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7520 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7534 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7546 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7559 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7572 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7579 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7592 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7619 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7626 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7634 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7646 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7652 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7657 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7664 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7679 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7683 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7687 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7694 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7695 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7700 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7720 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7729 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7733 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7738 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7743 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7749 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7753 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7762 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7774 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7778 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7787 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7796 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7805 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7814 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7820 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7826 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7835 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7844 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7872 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7893 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7903 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7907 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7924 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7929 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7940 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7945 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7955 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7956 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7960 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7961 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7965 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7966 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7967 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7971 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7973 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7978 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7985 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7986 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7987 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7988 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7993 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 8005 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 8022 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 8032 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 8048 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 8052 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 8059 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 8063 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 8070 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 8074 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 8078 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 8089 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 8093 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 8099 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 8103 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 8108 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 8112 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 8118 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 8122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 8129 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 8133 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 8140 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 8144 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 8151 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 8155 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 8161 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 8163 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 8190 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 8195 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 8200 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 8207 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 8214 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 8218 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 8219 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 8220 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 8225 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 8235 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 8246 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 8247 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 8251 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 8252 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 8256 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 8257 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 8258 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 8263 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 8273 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 8285 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 8293 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 8308 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 8319 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 8320 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 8324 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 8325 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 8329 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 8330 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 8331 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 8332 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 8333 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 8334 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 8339 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 8349 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 8360 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 8361 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 8362 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 8367 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 8371 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 8373 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 8380 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 8385 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 8398 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 8411 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 8415 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 8434 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 8444 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8453 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8454 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8459 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 8465 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 8480 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 8490 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 8500 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 8507 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8518 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8524 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8525 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8540 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
           lex->sql_command = SQLCOM_DBXP_SELECT;
         }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8550 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 8563 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
     Select->options|= SELECT_DISTINCT;
   }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8569 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8576 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      THD *thd= YYTHD;
      Item *item= new (thd->mem_root)
                    Item_field(&thd->lex->current_select->context,
                               NULL, NULL, "*");
      if (item == NULL)
        MYSQL_YYABORT;
      if (add_item_to_list(thd, item))
        MYSQL_YYABORT;
      (thd->lex->current_select->with_wild)++;
    }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8589 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8591 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      SELECT_LEX *select= Select;
      select->where= (yyvsp[(2) - (2)].item);
      if ((yyvsp[(2) - (2)].item))
        (yyvsp[(2) - (2)].item)->top_level_item();
    }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8611 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8621 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8630 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8649 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8657 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8664 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8674 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8689 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8706 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8734 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8766 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8772 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8784 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8799 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8806 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8830 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8836 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8842 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8843 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8844 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8845 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8846 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8850 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8851 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8857 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8908 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8915 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8958 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8964 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8970 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8976 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8982 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8988 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8994 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 9004 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 9010 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 9016 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 9022 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 9028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 9038 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 9044 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 9054 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 9060 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 9068 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 9074 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 9084 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 9090 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 9099 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 9109 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 9115 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 9125 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 9131 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 9144 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 9150 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 9156 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 9162 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 9168 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 9174 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 9180 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 9186 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 9192 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 9198 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 9204 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 9210 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 9216 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 9222 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 9251 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 9252 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 9253 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 9254 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 9255 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 9256 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 9260 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 9261 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 9271 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 9287 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 9293 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 9297 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 9303 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 9309 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 9315 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 9321 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 9323 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 9330 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 9337 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 9343 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 9384 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 9393 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 9400 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 9408 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 9414 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 9421 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 9427 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 9441 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 9449 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 9464 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 9470 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 9476 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 9484 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 9490 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 9496 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 9502 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 9508 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 9523 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 9535 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9541 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9547 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9553 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9559 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9565 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 9571 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9577 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 9583 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9589 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9595 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9601 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9607 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9613 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9619 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9625 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9631 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9639 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9660 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9667 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9673 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9680 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9688 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9695 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9701 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9707 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9713 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9718 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9724 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9731 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9737 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9743 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9749 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9755 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9761 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9779 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9785 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9791 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9798 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9805 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9820 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9826 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9832 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9838 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9844 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9851 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9857 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9863 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9869 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9875 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9881 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9887 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9899 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9905 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9911 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9917 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9923 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9931 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9937 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9949 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9955 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9961 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9969 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9979 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9985 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 10001 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 10007 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 10014 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 10021 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 10028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 10035 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 10042 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 10046 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 10065 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 10084 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 10138 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 10178 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 10180 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 10184 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 10185 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 10189 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 10190 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 10194 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 10195 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 10200 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 10207 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 10215 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 10240 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 10246 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 10252 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 10258 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 10264 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 10270 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 10279 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 10285 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 10287 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 10289 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 10295 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 10306 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 10312 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 10318 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 10324 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 10330 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 10336 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 10342 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 10348 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 10354 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 10360 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 10364 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 10378 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 10386 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 10393 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 10403 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 10411 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 10426 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 10427 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 10432 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 10437 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 10442 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 10446 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 10458 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 10467 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 10475 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 10477 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 10479 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 10481 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 10483 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 10485 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 10487 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10489 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10491 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10493 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10495 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10499 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10500 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10505 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10512 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10519 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10520 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10525 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10532 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 10539 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 10540 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10544 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10545 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10550 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10558 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10568 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10570 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10578 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10589 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10590 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10596 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10598 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10618 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10620 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10623 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10631 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10638 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10646 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10654 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10658 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10660 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10668 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10676 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10684 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10688 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10694 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10704 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10712 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10721 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10725 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10732 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10742 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10743 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10744 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10752 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10758 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10772 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10777 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10788 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10828 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                     (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union()) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10882 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10887 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10900 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10919 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10927 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10936 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10942 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10958 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10975 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10982 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10987 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 11012 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 11013 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 11018 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 11021 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 11022 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 11023 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 11027 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 11028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 11033 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 11038 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 11051 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 11055 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 11060 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 11061 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 11066 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 11068 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 11078 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 11089 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 11101 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 11102 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 11103 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 11104 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 11105 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 11106 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 11107 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 11108 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 11109 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 11110 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 11111 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 11112 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 11116 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 11117 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 11118 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 11119 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 11120 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 11121 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 11122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 11123 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 11124 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 11128 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 11129 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 11130 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 11131 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 11141 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 11143 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 11156 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 11158 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 11162 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 11174 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 11178 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 11189 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 11194 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 11216 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 11218 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 11222 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 11224 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 11244 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 11278 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 11297 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 11332 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 11334 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 11338 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11339 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 11340 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 11345 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11351 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 11355 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11356 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11361 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 11368 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11375 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 11382 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11392 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11419 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 11423 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11429 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 11435 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11444 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11449 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11458 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11459 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11460 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11461 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11462 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11463 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11467 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11468 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11469 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11470 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11471 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11475 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11476 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11477 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11478 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11479 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11483 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11484 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11485 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11486 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11491 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11502 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(0));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 11535 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11537 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11541 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11549 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11561 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11567 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11572 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11577 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11596 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11635 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11647 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11655 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11658 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11670 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11681 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11687 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11698 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11707 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11708 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11709 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11724 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11726 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11733 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11754 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11775 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11787 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11791 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11799 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11801 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11807 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11814 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11819 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11824 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11839 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11850 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11868 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11878 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11879 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11883 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11884 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11907 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11915 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11920 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11925 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11932 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11937 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11942 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11954 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11956 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11968 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11972 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11974 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11989 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11990 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11995 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 12003 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 12004 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 12005 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 12007 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 12017 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 12018 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 12022 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 12023 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 12025 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 12026 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 12028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 12029 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 12044 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 12053 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 12054 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 12058 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 12059 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 12064 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 12069 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 12077 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 12083 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 12088 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 12095 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 12097 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 12106 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 12114 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 12122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 12140 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 12150 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 12163 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 12172 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 12173 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 12180 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 12195 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 12206 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 12208 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 12214 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 12219 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 12225 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 12238 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 12251 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 12266 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 12267 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 12271 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 12272 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 12276 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 12277 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 12278 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 12283 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 12294 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 12319 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 12323 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 12327 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 12331 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 12335 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 12339 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 12343 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 12347 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 12351 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 12358 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 12362 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 12371 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 12379 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 12386 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 12393 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 12401 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 12409 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 12417 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 12425 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 12433 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 12440 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12442 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12444 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12453 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12457 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12461 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12466 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12471 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12480 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12487 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12492 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 12497 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12502 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12504 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12506 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12508 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12510 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12518 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12529 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12537 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 12539 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12547 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12554 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12561 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12571 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12578 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12584 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12593 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12601 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12605 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12609 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12616 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12623 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12629 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12636 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12643 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12648 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12653 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12661 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12663 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12665 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12679 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12680 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12684 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12685 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12694 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12695 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12699 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12700 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12706 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12713 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12728 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->sql_command = SQLCOM_DBXP_EXPLAIN_SELECT;
          lex->select_lex.db= 0;
          lex->verbose= 0;
  }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12737 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12748 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12752 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12754 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12772 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12777 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12783 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12789 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12810 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12811 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12813 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12827 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12834 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12839 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12848 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12849 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12854 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12856 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12867 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12875 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12890 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12895 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12897 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12899 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12901 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12903 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12905 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12907 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12909 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12911 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12913 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12915 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12917 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12919 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12923 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12924 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12929 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12934 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12943 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12944 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12945 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12946 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12950 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12951 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12956 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12962 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12971 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12975 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12987 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12996 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12997 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12998 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 13005 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 13016 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 13028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 13038 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 13048 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 13052 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 13056 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 13057 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 13061 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 13062 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 13066 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 13068 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 13079 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 13083 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 13084 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 13085 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 13100 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 13105 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 13112 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 13117 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 13135 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 13140 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 13147 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 13149 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 13154 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 13161 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 13163 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 13167 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 13168 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 13169 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 13174 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 13176 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 13180 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 13182 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 13190 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 13191 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 13201 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 13214 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 13238 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 13250 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 13261 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 13280 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 13288 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 13300 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 13315 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 13335 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 13336 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 13338 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 13346 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 13347 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 13348 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 13350 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 13357 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 13363 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 13369 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 13375 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 13381 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 13410 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 13441 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 13451 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 13461 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 13467 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 13476 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13488 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 13494 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13500 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13515 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13516 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13521 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13530 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13545 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13550 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13600 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13605 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13622 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13627 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_trg_table_fields.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13707 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13732 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13762 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13764 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13780 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13789 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13794 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13800 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13806 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13816 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13822 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13831 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13840 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13842 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13872 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13885 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13901 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13917 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13933 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13935 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13945 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13947 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13957 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13958 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13959 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13964 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13985 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 14012 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 14026 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 14027 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 14028 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 14029 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 14030 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 14031 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 14032 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 14033 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 14034 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 14035 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 14036 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 14037 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 14038 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 14039 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 14040 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 14041 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 14042 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 14043 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 14044 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 14045 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 14046 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 14047 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 14048 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 14049 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 14050 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 14051 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 14052 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 14053 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 14054 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 14055 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 14056 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 14057 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 14058 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 14059 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 14060 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 14061 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 14062 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 14063 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 14064 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 14065 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 14066 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 14067 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 14068 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 14069 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 14070 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 14071 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 14072 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 14073 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 14074 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 14075 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 14085 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 14086 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 14087 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 14088 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 14089 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 14090 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 14091 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 14092 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 14093 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 14094 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 14095 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 14096 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 14097 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 14098 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 14099 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 14100 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 14101 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 14102 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 14103 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 14104 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 14105 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 14106 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 14107 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 14108 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 14109 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 14110 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 14111 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 14112 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 14113 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 14114 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 14115 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 14116 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 14117 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 14118 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 14119 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 14120 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 14121 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 14122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 14123 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 14124 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 14125 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 14126 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 14127 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 14128 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 14129 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 14130 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 14131 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 14136 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 14137 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 14138 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 14139 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 14140 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 14141 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 14142 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 14143 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 14144 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 14145 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 14146 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 14147 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 14148 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 14149 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 14150 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14151 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14152 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14153 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 14154 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 14155 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14156 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14157 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14158 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14159 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14160 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14161 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14162 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14163 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14164 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14165 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14166 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14167 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14168 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14169 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14170 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14171 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14172 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14173 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14174 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14175 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14176 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14177 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14178 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14179 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14180 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14181 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14182 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14183 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14184 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14185 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14186 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14187 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14188 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14189 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14190 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14191 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14192 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14193 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14194 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14195 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14196 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14197 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14198 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14199 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14200 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14201 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14202 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14203 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14204 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14205 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14206 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14207 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14208 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14209 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14210 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14211 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14212 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14213 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14214 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14215 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14216 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14217 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14218 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14219 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14220 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14221 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14222 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14223 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14224 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14225 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14226 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14227 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14228 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14229 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14230 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14231 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14232 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14233 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14234 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14235 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14236 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14237 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14238 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14239 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14240 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14241 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14242 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14243 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14244 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14245 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14246 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14247 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14248 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14249 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14250 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14251 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14252 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14253 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14254 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14255 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14256 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14257 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14258 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14259 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14260 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14261 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14262 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14263 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14264 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14265 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14266 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14267 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14268 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14269 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14270 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14271 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14272 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14273 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14274 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14275 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14276 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14277 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14278 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14279 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14280 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14281 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14282 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14283 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14284 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14285 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14286 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14287 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14288 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14289 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14290 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14291 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14292 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14293 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14294 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14295 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14296 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14297 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14298 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14299 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14300 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14301 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14302 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14303 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14304 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14305 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14306 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14307 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14308 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14309 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14310 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14311 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14312 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14313 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14314 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14315 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14316 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14317 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14318 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14319 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14320 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14321 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14322 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14323 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14324 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14325 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14326 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14327 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14328 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14329 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14330 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14331 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14332 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14333 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14334 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14335 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14336 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14337 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14338 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14339 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14340 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14341 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14342 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14343 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14344 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14345 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14346 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14347 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14348 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14349 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14350 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14351 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14352 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14353 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14354 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14355 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14356 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14357 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14358 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14359 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14360 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14361 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14362 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14363 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14364 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14365 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14366 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14367 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14368 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14369 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14370 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14371 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14372 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14373 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14374 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14375 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14376 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14377 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14378 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14379 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14380 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14381 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14382 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14383 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14384 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14385 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14386 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14387 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14388 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14389 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14390 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14391 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14403 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14415 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14422 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14428 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14432 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14437 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14447 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14453 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14467 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14471 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14476 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14480 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14489 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14497 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14498 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14499 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14503 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14504 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14505 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14506 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14510 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14511 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14512 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14513 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14519 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14544 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14551 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14644 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14655 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14668 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14684 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14697 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14719 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14753 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            if (!user->user.str)
              lex->is_change_password= TRUE;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14772 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14800 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14846 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14867 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14885 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14902 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14903 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14907 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14908 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14909 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14910 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14914 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14916 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14933 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14944 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14945 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14947 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14953 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14959 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14970 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14981 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14996 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 15008 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 15009 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 15011 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 15015 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 15020 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 15031 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 15040 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 15056 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 15072 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 15090 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 15110 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 15111 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 15115 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 15116 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 15120 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 15121 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 15122 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 15123 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 15125 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 15132 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 15138 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 15139 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 15140 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 15141 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 15142 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 15149 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 15154 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 15160 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 15171 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 15182 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 15186 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 15196 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 15202 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 15209 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 15221 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 15232 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 15246 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 15248 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 15266 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 15267 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 15269 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 15270 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 15272 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 15273 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 15275 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 15276 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 15277 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 15278 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 15279 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 15280 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 15281 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 15282 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 15283 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 15284 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 15285 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 15286 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 15287 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 15288 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 15289 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 15290 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 15291 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 15292 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 15293 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 15294 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 15295 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 15296 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 15297 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 15298 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 15299 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 15300 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 15301 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 15302 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 15306 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 15307 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 15317 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 15327 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 15337 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 15350 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 15365 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 15378 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 15391 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 15403 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 15408 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 15416 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 15421 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 15429 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 15443 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 15454 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 15463 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 15473 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 15481 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 15495 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 15524 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 15528 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 15532 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 15536 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 15542 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 15547 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 15548 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 15552 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 15553 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 15557 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15559 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15565 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 15571 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 15577 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 15586 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 15591 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15595 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15596 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15601 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 15602 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 15603 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 15608 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15609 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 15610 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15614 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 15615 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 15620 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 15632 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15642 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 15651 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 15660 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 15673 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 15679 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 15684 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 15694 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15695 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 15696 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15705 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15721 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15734 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15735 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15736 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15741 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15745 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15754 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15760 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15769 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15775 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15796 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15824 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15826 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15833 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15834 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 15835 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15837 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 15843 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15848 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15859 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 15861 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15863 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15896 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15910 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15923 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15925 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15927 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15932 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15937 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15939 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15941 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15946 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15948 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15950 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15955 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15972 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15978 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15983 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15990 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15999 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 16016 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 16037 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 16046 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 16050 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 16057 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 16059 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 16061 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 16063 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 16080 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 16086 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 16091 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 16121 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 16156 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 16174 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 16197 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 16229 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 16234 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 16242 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 16265 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 16273 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 16331 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 16351 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 16364 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 16374 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 16382 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 16396 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 16400 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 16404 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 16408 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 16412 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 16416 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 16423 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 16430 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 16437 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 16446 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 16447 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 16451 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 16452 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 16453 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 16457 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 16458 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 16463 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 16465 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 16470 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {}
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 16471 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 16476 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 16486 "D:/mysqlDebugSpace/mysql-5.6.7-dev/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 41899 "D:/mysqlDebugSpace/mysql-5.6.7-dev/cbuild/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



