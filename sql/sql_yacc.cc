
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 24 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      (tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_NDB_BINLOG
       || tmp->var == Sys_gtid_next_list_ptr
#endif
     ))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}




/* Line 189 of yacc.c  */
#line 980 "y.tab.c"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKSUM_SYM = 316,
     CHECK_SYM = 317,
     CIPHER_SYM = 318,
     CLASS_ORIGIN_SYM = 319,
     CLIENT_SYM = 320,
     CLOSE_SYM = 321,
     COALESCE = 322,
     CODE_SYM = 323,
     COLLATE_SYM = 324,
     COLLATION_SYM = 325,
     COLUMNS = 326,
     COLUMN_SYM = 327,
     COLUMN_FORMAT_SYM = 328,
     COLUMN_NAME_SYM = 329,
     COMMENT_SYM = 330,
     COMMITTED_SYM = 331,
     COMMIT_SYM = 332,
     COMPACT_SYM = 333,
     COMPLETION_SYM = 334,
     COMPRESSED_SYM = 335,
     CONCURRENT = 336,
     CONDITION_SYM = 337,
     CONNECTION_SYM = 338,
     CONSISTENT_SYM = 339,
     CONSTRAINT = 340,
     CONSTRAINT_CATALOG_SYM = 341,
     CONSTRAINT_NAME_SYM = 342,
     CONSTRAINT_SCHEMA_SYM = 343,
     CONTAINS_SYM = 344,
     CONTEXT_SYM = 345,
     CONTINUE_SYM = 346,
     CONTRIBUTORS_SYM = 347,
     CONVERT_SYM = 348,
     COUNT_SYM = 349,
     CPU_SYM = 350,
     CREATE = 351,
     CROSS = 352,
     CUBE_SYM = 353,
     CURDATE = 354,
     CURRENT_SYM = 355,
     CURRENT_USER = 356,
     CURSOR_SYM = 357,
     CURSOR_NAME_SYM = 358,
     CURTIME = 359,
     DATABASE = 360,
     DATABASES = 361,
     DATAFILE_SYM = 362,
     DATA_SYM = 363,
     DATETIME = 364,
     DATE_ADD_INTERVAL = 365,
     DATE_SUB_INTERVAL = 366,
     DATE_SYM = 367,
     DAY_HOUR_SYM = 368,
     DAY_MICROSECOND_SYM = 369,
     DAY_MINUTE_SYM = 370,
     DAY_SECOND_SYM = 371,
     DAY_SYM = 372,
     DEALLOCATE_SYM = 373,
     DECIMAL_NUM = 374,
     DECIMAL_SYM = 375,
     DECLARE_SYM = 376,
     DEFAULT = 377,
     DEFAULT_AUTH_SYM = 378,
     DEFINER_SYM = 379,
     DELAYED_SYM = 380,
     DELAY_KEY_WRITE_SYM = 381,
     DELETE_SYM = 382,
     DESC = 383,
     DESCRIBE = 384,
     DES_KEY_FILE = 385,
     DETERMINISTIC_SYM = 386,
     DIAGNOSTICS_SYM = 387,
     DIRECTORY_SYM = 388,
     DISABLE_SYM = 389,
     DISCARD = 390,
     DISK_SYM = 391,
     DISTINCT = 392,
     DIV_SYM = 393,
     DOUBLE_SYM = 394,
     DO_SYM = 395,
     DROP = 396,
     DUAL_SYM = 397,
     DUMPFILE = 398,
     DUPLICATE_SYM = 399,
     DYNAMIC_SYM = 400,
     EACH_SYM = 401,
     ELSE = 402,
     ELSEIF_SYM = 403,
     ENABLE_SYM = 404,
     ENCLOSED = 405,
     END = 406,
     ENDS_SYM = 407,
     END_OF_INPUT = 408,
     ENGINES_SYM = 409,
     ENGINE_SYM = 410,
     ENUM = 411,
     EQ = 412,
     EQUAL_SYM = 413,
     ERROR_SYM = 414,
     ERRORS = 415,
     ESCAPED = 416,
     ESCAPE_SYM = 417,
     EVENTS_SYM = 418,
     EVENT_SYM = 419,
     EVERY_SYM = 420,
     EXCHANGE_SYM = 421,
     EXECUTE_SYM = 422,
     EXISTS = 423,
     EXIT_SYM = 424,
     EXPANSION_SYM = 425,
     EXPIRE_SYM = 426,
     EXPORT_SYM = 427,
     EXTENDED_SYM = 428,
     EXTENT_SIZE_SYM = 429,
     EXTRACT_SYM = 430,
     FALSE_SYM = 431,
     FAST_SYM = 432,
     FAULTS_SYM = 433,
     FETCH_SYM = 434,
     FILE_SYM = 435,
     FIRST_SYM = 436,
     FIXED_SYM = 437,
     FLOAT_NUM = 438,
     FLOAT_SYM = 439,
     FLUSH_SYM = 440,
     FORCE_SYM = 441,
     FOREIGN = 442,
     FOR_SYM = 443,
     FORMAT_SYM = 444,
     FOUND_SYM = 445,
     FROM = 446,
     FULL = 447,
     FULLTEXT_SYM = 448,
     FUNCTION_SYM = 449,
     GE = 450,
     GENERAL = 451,
     GEOMETRYCOLLECTION = 452,
     GEOMETRY_SYM = 453,
     GET_FORMAT = 454,
     GET_SYM = 455,
     GLOBAL_SYM = 456,
     GRANT = 457,
     GRANTS = 458,
     GROUP_SYM = 459,
     GROUP_CONCAT_SYM = 460,
     GT_SYM = 461,
     HANDLER_SYM = 462,
     HASH_SYM = 463,
     HAVING = 464,
     HELP_SYM = 465,
     HEX_NUM = 466,
     HIGH_PRIORITY = 467,
     HOST_SYM = 468,
     HOSTS_SYM = 469,
     HOUR_MICROSECOND_SYM = 470,
     HOUR_MINUTE_SYM = 471,
     HOUR_SECOND_SYM = 472,
     HOUR_SYM = 473,
     IDENT = 474,
     IDENTIFIED_SYM = 475,
     IDENT_QUOTED = 476,
     IF = 477,
     IGNORE_SYM = 478,
     IGNORE_SERVER_IDS_SYM = 479,
     IMPORT = 480,
     INDEXES = 481,
     INDEX_SYM = 482,
     INFILE = 483,
     INITIAL_SIZE_SYM = 484,
     INNER_SYM = 485,
     INOUT_SYM = 486,
     INSENSITIVE_SYM = 487,
     INSERT = 488,
     INSERT_METHOD = 489,
     INSTALL_SYM = 490,
     INTERVAL_SYM = 491,
     INTO = 492,
     INT_SYM = 493,
     INVOKER_SYM = 494,
     IN_SYM = 495,
     IO_AFTER_GTIDS = 496,
     IO_BEFORE_GTIDS = 497,
     IO_SYM = 498,
     IPC_SYM = 499,
     IS = 500,
     ISOLATION = 501,
     ISSUER_SYM = 502,
     ITERATE_SYM = 503,
     JOIN_SYM = 504,
     KEYS = 505,
     KEY_BLOCK_SIZE = 506,
     KEY_SYM = 507,
     KILL_SYM = 508,
     LANGUAGE_SYM = 509,
     LAST_SYM = 510,
     LE = 511,
     LEADING = 512,
     LEAVES = 513,
     LEAVE_SYM = 514,
     LEFT = 515,
     LESS_SYM = 516,
     LEVEL_SYM = 517,
     LEX_HOSTNAME = 518,
     LIKE = 519,
     LIMIT = 520,
     LINEAR_SYM = 521,
     LINES = 522,
     LINESTRING = 523,
     LIST_SYM = 524,
     LOAD = 525,
     LOCAL_SYM = 526,
     LOCATOR_SYM = 527,
     LOCKS_SYM = 528,
     LOCK_SYM = 529,
     LOGFILE_SYM = 530,
     LOGS_SYM = 531,
     LONGBLOB = 532,
     LONGTEXT = 533,
     LONG_NUM = 534,
     LONG_SYM = 535,
     LOOP_SYM = 536,
     LOW_PRIORITY = 537,
     LT = 538,
     MASTER_AUTO_POSITION_SYM = 539,
     MASTER_BIND_SYM = 540,
     MASTER_CONNECT_RETRY_SYM = 541,
     MASTER_DELAY_SYM = 542,
     MASTER_HOST_SYM = 543,
     MASTER_LOG_FILE_SYM = 544,
     MASTER_LOG_POS_SYM = 545,
     MASTER_PASSWORD_SYM = 546,
     MASTER_PORT_SYM = 547,
     MASTER_RETRY_COUNT_SYM = 548,
     MASTER_SERVER_ID_SYM = 549,
     MASTER_SSL_CAPATH_SYM = 550,
     MASTER_SSL_CA_SYM = 551,
     MASTER_SSL_CERT_SYM = 552,
     MASTER_SSL_CIPHER_SYM = 553,
     MASTER_SSL_CRL_SYM = 554,
     MASTER_SSL_CRLPATH_SYM = 555,
     MASTER_SSL_KEY_SYM = 556,
     MASTER_SSL_SYM = 557,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 558,
     MASTER_SYM = 559,
     MASTER_USER_SYM = 560,
     MASTER_HEARTBEAT_PERIOD_SYM = 561,
     MATCH = 562,
     MAX_CONNECTIONS_PER_HOUR = 563,
     MAX_QUERIES_PER_HOUR = 564,
     MAX_ROWS = 565,
     MAX_SIZE_SYM = 566,
     MAX_SYM = 567,
     MAX_UPDATES_PER_HOUR = 568,
     MAX_USER_CONNECTIONS_SYM = 569,
     MAX_VALUE_SYM = 570,
     MEDIUMBLOB = 571,
     MEDIUMINT = 572,
     MEDIUMTEXT = 573,
     MEDIUM_SYM = 574,
     MEMORY_SYM = 575,
     MERGE_SYM = 576,
     MESSAGE_TEXT_SYM = 577,
     MICROSECOND_SYM = 578,
     MIGRATE_SYM = 579,
     MINUTE_MICROSECOND_SYM = 580,
     MINUTE_SECOND_SYM = 581,
     MINUTE_SYM = 582,
     MIN_ROWS = 583,
     MIN_SYM = 584,
     MODE_SYM = 585,
     MODIFIES_SYM = 586,
     MODIFY_SYM = 587,
     MOD_SYM = 588,
     MONTH_SYM = 589,
     MULTILINESTRING = 590,
     MULTIPOINT = 591,
     MULTIPOLYGON = 592,
     MUTEX_SYM = 593,
     MYSQL_ERRNO_SYM = 594,
     NAMES_SYM = 595,
     NAME_SYM = 596,
     NATIONAL_SYM = 597,
     NATURAL = 598,
     NCHAR_STRING = 599,
     NCHAR_SYM = 600,
     NDBCLUSTER_SYM = 601,
     NE = 602,
     NEG = 603,
     NEW_SYM = 604,
     NEXT_SYM = 605,
     NODEGROUP_SYM = 606,
     NONE_SYM = 607,
     NOT2_SYM = 608,
     NOT_SYM = 609,
     NOW_SYM = 610,
     NO_SYM = 611,
     NO_WAIT_SYM = 612,
     NO_WRITE_TO_BINLOG = 613,
     NULL_SYM = 614,
     NUM = 615,
     NUMBER_SYM = 616,
     NUMERIC_SYM = 617,
     NVARCHAR_SYM = 618,
     OFFSET_SYM = 619,
     OLD_PASSWORD = 620,
     ON = 621,
     ONE_SYM = 622,
     ONLY_SYM = 623,
     OPEN_SYM = 624,
     OPTIMIZE = 625,
     OPTIONS_SYM = 626,
     OPTION = 627,
     OPTIONALLY = 628,
     OR2_SYM = 629,
     ORDER_SYM = 630,
     OR_OR_SYM = 631,
     OR_SYM = 632,
     OUTER = 633,
     OUTFILE = 634,
     OUT_SYM = 635,
     OWNER_SYM = 636,
     PACK_KEYS_SYM = 637,
     PAGE_SYM = 638,
     PARAM_MARKER = 639,
     PARSER_SYM = 640,
     PARTIAL = 641,
     PARTITION_SYM = 642,
     PARTITIONS_SYM = 643,
     PARTITIONING_SYM = 644,
     PASSWORD = 645,
     PHASE_SYM = 646,
     PLUGIN_DIR_SYM = 647,
     PLUGIN_SYM = 648,
     PLUGINS_SYM = 649,
     POINT_SYM = 650,
     POLYGON = 651,
     PORT_SYM = 652,
     POSITION_SYM = 653,
     PRECISION = 654,
     PREPARE_SYM = 655,
     PRESERVE_SYM = 656,
     PREV_SYM = 657,
     PRIMARY_SYM = 658,
     PRIVILEGES = 659,
     PROCEDURE_SYM = 660,
     PROCESS = 661,
     PROCESSLIST_SYM = 662,
     PROFILE_SYM = 663,
     PROFILES_SYM = 664,
     PROXY_SYM = 665,
     PURGE = 666,
     QUARTER_SYM = 667,
     QUERY_SYM = 668,
     QUICK = 669,
     RANGE_SYM = 670,
     READS_SYM = 671,
     READ_ONLY_SYM = 672,
     READ_SYM = 673,
     READ_WRITE_SYM = 674,
     REAL = 675,
     REBUILD_SYM = 676,
     RECOVER_SYM = 677,
     REDOFILE_SYM = 678,
     REDO_BUFFER_SIZE_SYM = 679,
     REDUNDANT_SYM = 680,
     REFERENCES = 681,
     REGEXP = 682,
     RELAY = 683,
     RELAYLOG_SYM = 684,
     RELAY_LOG_FILE_SYM = 685,
     RELAY_LOG_POS_SYM = 686,
     RELAY_THREAD = 687,
     RELEASE_SYM = 688,
     RELOAD = 689,
     REMOVE_SYM = 690,
     RENAME = 691,
     REORGANIZE_SYM = 692,
     REPAIR = 693,
     REPEATABLE_SYM = 694,
     REPEAT_SYM = 695,
     REPLACE = 696,
     REPLICATION = 697,
     REQUIRE_SYM = 698,
     RESET_SYM = 699,
     RESIGNAL_SYM = 700,
     RESOURCES = 701,
     RESTORE_SYM = 702,
     RESTRICT = 703,
     RESUME_SYM = 704,
     RETURNED_SQLSTATE_SYM = 705,
     RETURNS_SYM = 706,
     RETURN_SYM = 707,
     REVERSE_SYM = 708,
     REVOKE = 709,
     RIGHT = 710,
     ROLLBACK_SYM = 711,
     ROLLUP_SYM = 712,
     ROUTINE_SYM = 713,
     ROWS_SYM = 714,
     ROW_FORMAT_SYM = 715,
     ROW_SYM = 716,
     ROW_COUNT_SYM = 717,
     RTREE_SYM = 718,
     SAVEPOINT_SYM = 719,
     SCHEDULE_SYM = 720,
     SCHEMA_NAME_SYM = 721,
     SECOND_MICROSECOND_SYM = 722,
     SECOND_SYM = 723,
     SECURITY_SYM = 724,
     SELECT_SYM = 725,
     SENSITIVE_SYM = 726,
     SEPARATOR_SYM = 727,
     SERIALIZABLE_SYM = 728,
     SERIAL_SYM = 729,
     SESSION_SYM = 730,
     SERVER_SYM = 731,
     SERVER_OPTIONS = 732,
     SET = 733,
     SET_VAR = 734,
     SHARE_SYM = 735,
     SHIFT_LEFT = 736,
     SHIFT_RIGHT = 737,
     SHOW = 738,
     SHUTDOWN = 739,
     SIGNAL_SYM = 740,
     SIGNED_SYM = 741,
     SIMPLE_SYM = 742,
     SLAVE = 743,
     SLOW = 744,
     SMALLINT = 745,
     SNAPSHOT_SYM = 746,
     SOCKET_SYM = 747,
     SONAME_SYM = 748,
     SOUNDS_SYM = 749,
     SOURCE_SYM = 750,
     SPATIAL_SYM = 751,
     SPECIFIC_SYM = 752,
     SQLEXCEPTION_SYM = 753,
     SQLSTATE_SYM = 754,
     SQLWARNING_SYM = 755,
     SQL_AFTER_GTIDS = 756,
     SQL_AFTER_MTS_GAPS = 757,
     SQL_BEFORE_GTIDS = 758,
     SQL_BIG_RESULT = 759,
     SQL_BUFFER_RESULT = 760,
     SQL_CACHE_SYM = 761,
     SQL_CALC_FOUND_ROWS = 762,
     SQL_NO_CACHE_SYM = 763,
     SQL_SMALL_RESULT = 764,
     SQL_SYM = 765,
     SQL_THREAD = 766,
     SSL_SYM = 767,
     STARTING = 768,
     STARTS_SYM = 769,
     START_SYM = 770,
     STATS_AUTO_RECALC_SYM = 771,
     STATS_PERSISTENT_SYM = 772,
     STATS_SAMPLE_PAGES_SYM = 773,
     STATUS_SYM = 774,
     STDDEV_SAMP_SYM = 775,
     STD_SYM = 776,
     STOP_SYM = 777,
     STORAGE_SYM = 778,
     STRAIGHT_JOIN = 779,
     STRING_SYM = 780,
     SUBCLASS_ORIGIN_SYM = 781,
     SUBDATE_SYM = 782,
     SUBJECT_SYM = 783,
     SUBPARTITIONS_SYM = 784,
     SUBPARTITION_SYM = 785,
     SUBSTRING = 786,
     SUM_SYM = 787,
     SUPER_SYM = 788,
     SUSPEND_SYM = 789,
     SWAPS_SYM = 790,
     SWITCHES_SYM = 791,
     SYSDATE = 792,
     TABLES = 793,
     TABLESPACE = 794,
     TABLE_REF_PRIORITY = 795,
     TABLE_SYM = 796,
     TABLE_CHECKSUM_SYM = 797,
     TABLE_NAME_SYM = 798,
     TEMPORARY = 799,
     TEMPTABLE_SYM = 800,
     TERMINATED = 801,
     TEXT_STRING = 802,
     TEXT_SYM = 803,
     THAN_SYM = 804,
     THEN_SYM = 805,
     TIMESTAMP = 806,
     TIMESTAMP_ADD = 807,
     TIMESTAMP_DIFF = 808,
     TIME_SYM = 809,
     TINYBLOB = 810,
     TINYINT = 811,
     TINYTEXT = 812,
     TO_SYM = 813,
     TRAILING = 814,
     TRANSACTION_SYM = 815,
     TRIGGERS_SYM = 816,
     TRIGGER_SYM = 817,
     TRIM = 818,
     TRUE_SYM = 819,
     TRUNCATE_SYM = 820,
     TYPES_SYM = 821,
     TYPE_SYM = 822,
     UDF_RETURNS_SYM = 823,
     ULONGLONG_NUM = 824,
     UNCOMMITTED_SYM = 825,
     UNDEFINED_SYM = 826,
     UNDERSCORE_CHARSET = 827,
     UNDOFILE_SYM = 828,
     UNDO_BUFFER_SIZE_SYM = 829,
     UNDO_SYM = 830,
     UNICODE_SYM = 831,
     UNINSTALL_SYM = 832,
     UNION_SYM = 833,
     UNIQUE_SYM = 834,
     UNKNOWN_SYM = 835,
     UNLOCK_SYM = 836,
     UNSIGNED = 837,
     UNTIL_SYM = 838,
     UPDATE_SYM = 839,
     UPGRADE_SYM = 840,
     USAGE = 841,
     USER = 842,
     USE_FRM = 843,
     USE_SYM = 844,
     USING = 845,
     UTC_DATE_SYM = 846,
     UTC_TIMESTAMP_SYM = 847,
     UTC_TIME_SYM = 848,
     VALUES = 849,
     VALUE_SYM = 850,
     VARBINARY = 851,
     VARCHAR = 852,
     VARIABLES = 853,
     VARIANCE_SYM = 854,
     VARYING = 855,
     VAR_SAMP_SYM = 856,
     VIEW_SYM = 857,
     WAIT_SYM = 858,
     WARNINGS = 859,
     WEEK_SYM = 860,
     WEIGHT_STRING_SYM = 861,
     WHEN_SYM = 862,
     WHERE = 863,
     WHILE_SYM = 864,
     WITH = 865,
     WITH_CUBE_SYM = 866,
     WITH_ROLLUP_SYM = 867,
     WORK_SYM = 868,
     WRAPPER_SYM = 869,
     WRITE_SYM = 870,
     X509_SYM = 871,
     XA_SYM = 872,
     XML_SYM = 873,
     XOR = 874,
     YEAR_MONTH_SYM = 875,
     YEAR_SYM = 876,
     ZEROFILL = 877
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKSUM_SYM 316
#define CHECK_SYM 317
#define CIPHER_SYM 318
#define CLASS_ORIGIN_SYM 319
#define CLIENT_SYM 320
#define CLOSE_SYM 321
#define COALESCE 322
#define CODE_SYM 323
#define COLLATE_SYM 324
#define COLLATION_SYM 325
#define COLUMNS 326
#define COLUMN_SYM 327
#define COLUMN_FORMAT_SYM 328
#define COLUMN_NAME_SYM 329
#define COMMENT_SYM 330
#define COMMITTED_SYM 331
#define COMMIT_SYM 332
#define COMPACT_SYM 333
#define COMPLETION_SYM 334
#define COMPRESSED_SYM 335
#define CONCURRENT 336
#define CONDITION_SYM 337
#define CONNECTION_SYM 338
#define CONSISTENT_SYM 339
#define CONSTRAINT 340
#define CONSTRAINT_CATALOG_SYM 341
#define CONSTRAINT_NAME_SYM 342
#define CONSTRAINT_SCHEMA_SYM 343
#define CONTAINS_SYM 344
#define CONTEXT_SYM 345
#define CONTINUE_SYM 346
#define CONTRIBUTORS_SYM 347
#define CONVERT_SYM 348
#define COUNT_SYM 349
#define CPU_SYM 350
#define CREATE 351
#define CROSS 352
#define CUBE_SYM 353
#define CURDATE 354
#define CURRENT_SYM 355
#define CURRENT_USER 356
#define CURSOR_SYM 357
#define CURSOR_NAME_SYM 358
#define CURTIME 359
#define DATABASE 360
#define DATABASES 361
#define DATAFILE_SYM 362
#define DATA_SYM 363
#define DATETIME 364
#define DATE_ADD_INTERVAL 365
#define DATE_SUB_INTERVAL 366
#define DATE_SYM 367
#define DAY_HOUR_SYM 368
#define DAY_MICROSECOND_SYM 369
#define DAY_MINUTE_SYM 370
#define DAY_SECOND_SYM 371
#define DAY_SYM 372
#define DEALLOCATE_SYM 373
#define DECIMAL_NUM 374
#define DECIMAL_SYM 375
#define DECLARE_SYM 376
#define DEFAULT 377
#define DEFAULT_AUTH_SYM 378
#define DEFINER_SYM 379
#define DELAYED_SYM 380
#define DELAY_KEY_WRITE_SYM 381
#define DELETE_SYM 382
#define DESC 383
#define DESCRIBE 384
#define DES_KEY_FILE 385
#define DETERMINISTIC_SYM 386
#define DIAGNOSTICS_SYM 387
#define DIRECTORY_SYM 388
#define DISABLE_SYM 389
#define DISCARD 390
#define DISK_SYM 391
#define DISTINCT 392
#define DIV_SYM 393
#define DOUBLE_SYM 394
#define DO_SYM 395
#define DROP 396
#define DUAL_SYM 397
#define DUMPFILE 398
#define DUPLICATE_SYM 399
#define DYNAMIC_SYM 400
#define EACH_SYM 401
#define ELSE 402
#define ELSEIF_SYM 403
#define ENABLE_SYM 404
#define ENCLOSED 405
#define END 406
#define ENDS_SYM 407
#define END_OF_INPUT 408
#define ENGINES_SYM 409
#define ENGINE_SYM 410
#define ENUM 411
#define EQ 412
#define EQUAL_SYM 413
#define ERROR_SYM 414
#define ERRORS 415
#define ESCAPED 416
#define ESCAPE_SYM 417
#define EVENTS_SYM 418
#define EVENT_SYM 419
#define EVERY_SYM 420
#define EXCHANGE_SYM 421
#define EXECUTE_SYM 422
#define EXISTS 423
#define EXIT_SYM 424
#define EXPANSION_SYM 425
#define EXPIRE_SYM 426
#define EXPORT_SYM 427
#define EXTENDED_SYM 428
#define EXTENT_SIZE_SYM 429
#define EXTRACT_SYM 430
#define FALSE_SYM 431
#define FAST_SYM 432
#define FAULTS_SYM 433
#define FETCH_SYM 434
#define FILE_SYM 435
#define FIRST_SYM 436
#define FIXED_SYM 437
#define FLOAT_NUM 438
#define FLOAT_SYM 439
#define FLUSH_SYM 440
#define FORCE_SYM 441
#define FOREIGN 442
#define FOR_SYM 443
#define FORMAT_SYM 444
#define FOUND_SYM 445
#define FROM 446
#define FULL 447
#define FULLTEXT_SYM 448
#define FUNCTION_SYM 449
#define GE 450
#define GENERAL 451
#define GEOMETRYCOLLECTION 452
#define GEOMETRY_SYM 453
#define GET_FORMAT 454
#define GET_SYM 455
#define GLOBAL_SYM 456
#define GRANT 457
#define GRANTS 458
#define GROUP_SYM 459
#define GROUP_CONCAT_SYM 460
#define GT_SYM 461
#define HANDLER_SYM 462
#define HASH_SYM 463
#define HAVING 464
#define HELP_SYM 465
#define HEX_NUM 466
#define HIGH_PRIORITY 467
#define HOST_SYM 468
#define HOSTS_SYM 469
#define HOUR_MICROSECOND_SYM 470
#define HOUR_MINUTE_SYM 471
#define HOUR_SECOND_SYM 472
#define HOUR_SYM 473
#define IDENT 474
#define IDENTIFIED_SYM 475
#define IDENT_QUOTED 476
#define IF 477
#define IGNORE_SYM 478
#define IGNORE_SERVER_IDS_SYM 479
#define IMPORT 480
#define INDEXES 481
#define INDEX_SYM 482
#define INFILE 483
#define INITIAL_SIZE_SYM 484
#define INNER_SYM 485
#define INOUT_SYM 486
#define INSENSITIVE_SYM 487
#define INSERT 488
#define INSERT_METHOD 489
#define INSTALL_SYM 490
#define INTERVAL_SYM 491
#define INTO 492
#define INT_SYM 493
#define INVOKER_SYM 494
#define IN_SYM 495
#define IO_AFTER_GTIDS 496
#define IO_BEFORE_GTIDS 497
#define IO_SYM 498
#define IPC_SYM 499
#define IS 500
#define ISOLATION 501
#define ISSUER_SYM 502
#define ITERATE_SYM 503
#define JOIN_SYM 504
#define KEYS 505
#define KEY_BLOCK_SIZE 506
#define KEY_SYM 507
#define KILL_SYM 508
#define LANGUAGE_SYM 509
#define LAST_SYM 510
#define LE 511
#define LEADING 512
#define LEAVES 513
#define LEAVE_SYM 514
#define LEFT 515
#define LESS_SYM 516
#define LEVEL_SYM 517
#define LEX_HOSTNAME 518
#define LIKE 519
#define LIMIT 520
#define LINEAR_SYM 521
#define LINES 522
#define LINESTRING 523
#define LIST_SYM 524
#define LOAD 525
#define LOCAL_SYM 526
#define LOCATOR_SYM 527
#define LOCKS_SYM 528
#define LOCK_SYM 529
#define LOGFILE_SYM 530
#define LOGS_SYM 531
#define LONGBLOB 532
#define LONGTEXT 533
#define LONG_NUM 534
#define LONG_SYM 535
#define LOOP_SYM 536
#define LOW_PRIORITY 537
#define LT 538
#define MASTER_AUTO_POSITION_SYM 539
#define MASTER_BIND_SYM 540
#define MASTER_CONNECT_RETRY_SYM 541
#define MASTER_DELAY_SYM 542
#define MASTER_HOST_SYM 543
#define MASTER_LOG_FILE_SYM 544
#define MASTER_LOG_POS_SYM 545
#define MASTER_PASSWORD_SYM 546
#define MASTER_PORT_SYM 547
#define MASTER_RETRY_COUNT_SYM 548
#define MASTER_SERVER_ID_SYM 549
#define MASTER_SSL_CAPATH_SYM 550
#define MASTER_SSL_CA_SYM 551
#define MASTER_SSL_CERT_SYM 552
#define MASTER_SSL_CIPHER_SYM 553
#define MASTER_SSL_CRL_SYM 554
#define MASTER_SSL_CRLPATH_SYM 555
#define MASTER_SSL_KEY_SYM 556
#define MASTER_SSL_SYM 557
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 558
#define MASTER_SYM 559
#define MASTER_USER_SYM 560
#define MASTER_HEARTBEAT_PERIOD_SYM 561
#define MATCH 562
#define MAX_CONNECTIONS_PER_HOUR 563
#define MAX_QUERIES_PER_HOUR 564
#define MAX_ROWS 565
#define MAX_SIZE_SYM 566
#define MAX_SYM 567
#define MAX_UPDATES_PER_HOUR 568
#define MAX_USER_CONNECTIONS_SYM 569
#define MAX_VALUE_SYM 570
#define MEDIUMBLOB 571
#define MEDIUMINT 572
#define MEDIUMTEXT 573
#define MEDIUM_SYM 574
#define MEMORY_SYM 575
#define MERGE_SYM 576
#define MESSAGE_TEXT_SYM 577
#define MICROSECOND_SYM 578
#define MIGRATE_SYM 579
#define MINUTE_MICROSECOND_SYM 580
#define MINUTE_SECOND_SYM 581
#define MINUTE_SYM 582
#define MIN_ROWS 583
#define MIN_SYM 584
#define MODE_SYM 585
#define MODIFIES_SYM 586
#define MODIFY_SYM 587
#define MOD_SYM 588
#define MONTH_SYM 589
#define MULTILINESTRING 590
#define MULTIPOINT 591
#define MULTIPOLYGON 592
#define MUTEX_SYM 593
#define MYSQL_ERRNO_SYM 594
#define NAMES_SYM 595
#define NAME_SYM 596
#define NATIONAL_SYM 597
#define NATURAL 598
#define NCHAR_STRING 599
#define NCHAR_SYM 600
#define NDBCLUSTER_SYM 601
#define NE 602
#define NEG 603
#define NEW_SYM 604
#define NEXT_SYM 605
#define NODEGROUP_SYM 606
#define NONE_SYM 607
#define NOT2_SYM 608
#define NOT_SYM 609
#define NOW_SYM 610
#define NO_SYM 611
#define NO_WAIT_SYM 612
#define NO_WRITE_TO_BINLOG 613
#define NULL_SYM 614
#define NUM 615
#define NUMBER_SYM 616
#define NUMERIC_SYM 617
#define NVARCHAR_SYM 618
#define OFFSET_SYM 619
#define OLD_PASSWORD 620
#define ON 621
#define ONE_SYM 622
#define ONLY_SYM 623
#define OPEN_SYM 624
#define OPTIMIZE 625
#define OPTIONS_SYM 626
#define OPTION 627
#define OPTIONALLY 628
#define OR2_SYM 629
#define ORDER_SYM 630
#define OR_OR_SYM 631
#define OR_SYM 632
#define OUTER 633
#define OUTFILE 634
#define OUT_SYM 635
#define OWNER_SYM 636
#define PACK_KEYS_SYM 637
#define PAGE_SYM 638
#define PARAM_MARKER 639
#define PARSER_SYM 640
#define PARTIAL 641
#define PARTITION_SYM 642
#define PARTITIONS_SYM 643
#define PARTITIONING_SYM 644
#define PASSWORD 645
#define PHASE_SYM 646
#define PLUGIN_DIR_SYM 647
#define PLUGIN_SYM 648
#define PLUGINS_SYM 649
#define POINT_SYM 650
#define POLYGON 651
#define PORT_SYM 652
#define POSITION_SYM 653
#define PRECISION 654
#define PREPARE_SYM 655
#define PRESERVE_SYM 656
#define PREV_SYM 657
#define PRIMARY_SYM 658
#define PRIVILEGES 659
#define PROCEDURE_SYM 660
#define PROCESS 661
#define PROCESSLIST_SYM 662
#define PROFILE_SYM 663
#define PROFILES_SYM 664
#define PROXY_SYM 665
#define PURGE 666
#define QUARTER_SYM 667
#define QUERY_SYM 668
#define QUICK 669
#define RANGE_SYM 670
#define READS_SYM 671
#define READ_ONLY_SYM 672
#define READ_SYM 673
#define READ_WRITE_SYM 674
#define REAL 675
#define REBUILD_SYM 676
#define RECOVER_SYM 677
#define REDOFILE_SYM 678
#define REDO_BUFFER_SIZE_SYM 679
#define REDUNDANT_SYM 680
#define REFERENCES 681
#define REGEXP 682
#define RELAY 683
#define RELAYLOG_SYM 684
#define RELAY_LOG_FILE_SYM 685
#define RELAY_LOG_POS_SYM 686
#define RELAY_THREAD 687
#define RELEASE_SYM 688
#define RELOAD 689
#define REMOVE_SYM 690
#define RENAME 691
#define REORGANIZE_SYM 692
#define REPAIR 693
#define REPEATABLE_SYM 694
#define REPEAT_SYM 695
#define REPLACE 696
#define REPLICATION 697
#define REQUIRE_SYM 698
#define RESET_SYM 699
#define RESIGNAL_SYM 700
#define RESOURCES 701
#define RESTORE_SYM 702
#define RESTRICT 703
#define RESUME_SYM 704
#define RETURNED_SQLSTATE_SYM 705
#define RETURNS_SYM 706
#define RETURN_SYM 707
#define REVERSE_SYM 708
#define REVOKE 709
#define RIGHT 710
#define ROLLBACK_SYM 711
#define ROLLUP_SYM 712
#define ROUTINE_SYM 713
#define ROWS_SYM 714
#define ROW_FORMAT_SYM 715
#define ROW_SYM 716
#define ROW_COUNT_SYM 717
#define RTREE_SYM 718
#define SAVEPOINT_SYM 719
#define SCHEDULE_SYM 720
#define SCHEMA_NAME_SYM 721
#define SECOND_MICROSECOND_SYM 722
#define SECOND_SYM 723
#define SECURITY_SYM 724
#define SELECT_SYM 725
#define SENSITIVE_SYM 726
#define SEPARATOR_SYM 727
#define SERIALIZABLE_SYM 728
#define SERIAL_SYM 729
#define SESSION_SYM 730
#define SERVER_SYM 731
#define SERVER_OPTIONS 732
#define SET 733
#define SET_VAR 734
#define SHARE_SYM 735
#define SHIFT_LEFT 736
#define SHIFT_RIGHT 737
#define SHOW 738
#define SHUTDOWN 739
#define SIGNAL_SYM 740
#define SIGNED_SYM 741
#define SIMPLE_SYM 742
#define SLAVE 743
#define SLOW 744
#define SMALLINT 745
#define SNAPSHOT_SYM 746
#define SOCKET_SYM 747
#define SONAME_SYM 748
#define SOUNDS_SYM 749
#define SOURCE_SYM 750
#define SPATIAL_SYM 751
#define SPECIFIC_SYM 752
#define SQLEXCEPTION_SYM 753
#define SQLSTATE_SYM 754
#define SQLWARNING_SYM 755
#define SQL_AFTER_GTIDS 756
#define SQL_AFTER_MTS_GAPS 757
#define SQL_BEFORE_GTIDS 758
#define SQL_BIG_RESULT 759
#define SQL_BUFFER_RESULT 760
#define SQL_CACHE_SYM 761
#define SQL_CALC_FOUND_ROWS 762
#define SQL_NO_CACHE_SYM 763
#define SQL_SMALL_RESULT 764
#define SQL_SYM 765
#define SQL_THREAD 766
#define SSL_SYM 767
#define STARTING 768
#define STARTS_SYM 769
#define START_SYM 770
#define STATS_AUTO_RECALC_SYM 771
#define STATS_PERSISTENT_SYM 772
#define STATS_SAMPLE_PAGES_SYM 773
#define STATUS_SYM 774
#define STDDEV_SAMP_SYM 775
#define STD_SYM 776
#define STOP_SYM 777
#define STORAGE_SYM 778
#define STRAIGHT_JOIN 779
#define STRING_SYM 780
#define SUBCLASS_ORIGIN_SYM 781
#define SUBDATE_SYM 782
#define SUBJECT_SYM 783
#define SUBPARTITIONS_SYM 784
#define SUBPARTITION_SYM 785
#define SUBSTRING 786
#define SUM_SYM 787
#define SUPER_SYM 788
#define SUSPEND_SYM 789
#define SWAPS_SYM 790
#define SWITCHES_SYM 791
#define SYSDATE 792
#define TABLES 793
#define TABLESPACE 794
#define TABLE_REF_PRIORITY 795
#define TABLE_SYM 796
#define TABLE_CHECKSUM_SYM 797
#define TABLE_NAME_SYM 798
#define TEMPORARY 799
#define TEMPTABLE_SYM 800
#define TERMINATED 801
#define TEXT_STRING 802
#define TEXT_SYM 803
#define THAN_SYM 804
#define THEN_SYM 805
#define TIMESTAMP 806
#define TIMESTAMP_ADD 807
#define TIMESTAMP_DIFF 808
#define TIME_SYM 809
#define TINYBLOB 810
#define TINYINT 811
#define TINYTEXT 812
#define TO_SYM 813
#define TRAILING 814
#define TRANSACTION_SYM 815
#define TRIGGERS_SYM 816
#define TRIGGER_SYM 817
#define TRIM 818
#define TRUE_SYM 819
#define TRUNCATE_SYM 820
#define TYPES_SYM 821
#define TYPE_SYM 822
#define UDF_RETURNS_SYM 823
#define ULONGLONG_NUM 824
#define UNCOMMITTED_SYM 825
#define UNDEFINED_SYM 826
#define UNDERSCORE_CHARSET 827
#define UNDOFILE_SYM 828
#define UNDO_BUFFER_SIZE_SYM 829
#define UNDO_SYM 830
#define UNICODE_SYM 831
#define UNINSTALL_SYM 832
#define UNION_SYM 833
#define UNIQUE_SYM 834
#define UNKNOWN_SYM 835
#define UNLOCK_SYM 836
#define UNSIGNED 837
#define UNTIL_SYM 838
#define UPDATE_SYM 839
#define UPGRADE_SYM 840
#define USAGE 841
#define USER 842
#define USE_FRM 843
#define USE_SYM 844
#define USING 845
#define UTC_DATE_SYM 846
#define UTC_TIMESTAMP_SYM 847
#define UTC_TIME_SYM 848
#define VALUES 849
#define VALUE_SYM 850
#define VARBINARY 851
#define VARCHAR 852
#define VARIABLES 853
#define VARIANCE_SYM 854
#define VARYING 855
#define VAR_SAMP_SYM 856
#define VIEW_SYM 857
#define WAIT_SYM 858
#define WARNINGS 859
#define WEEK_SYM 860
#define WEIGHT_STRING_SYM 861
#define WHEN_SYM 862
#define WHERE 863
#define WHILE_SYM 864
#define WITH 865
#define WITH_CUBE_SYM 866
#define WITH_ROLLUP_SYM 867
#define WORK_SYM 868
#define WRAPPER_SYM 869
#define WRITE_SYM 870
#define X509_SYM 871
#define XA_SYM 872
#define XML_SYM 873
#define XOR 874
#define YEAR_MONTH_SYM 875
#define YEAR_SYM 876
#define ZEROFILL 877




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 929 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;



/* Line 214 of yacc.c  */
#line 2319 "y.tab.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 986 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2336 "y.tab.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  599
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   55788

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  642
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  947
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2667
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4519

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   877

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   635,     2,     2,     2,   629,   624,     2,
     632,   633,   627,   626,   634,   625,   640,   628,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   641,   638,
       2,     2,     2,     2,   639,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   630,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   636,   623,   637,   631,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   129,   131,   133,   138,   140,   143,   144,
     149,   150,   153,   157,   159,   162,   163,   167,   168,   174,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   224,   228,   232,   236,   240,   244,   248,   252,
     258,   262,   264,   265,   267,   271,   273,   277,   281,   285,
     289,   290,   298,   299,   300,   315,   316,   317,   332,   333,
     334,   349,   350,   357,   358,   362,   367,   372,   376,   379,
     390,   392,   396,   399,   402,   405,   408,   411,   414,   417,
     418,   432,   433,   440,   443,   444,   446,   450,   452,   453,
     456,   457,   460,   461,   463,   467,   472,   473,   476,   477,
     480,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   507,   511,   513,   514,   517,   518,
     521,   524,   527,   530,   533,   537,   541,   543,   545,   547,
     550,   554,   558,   559,   564,   565,   569,   570,   572,   576,
     578,   579,   581,   585,   587,   588,   592,   593,   595,   599,
     601,   606,   607,   609,   611,   613,   614,   618,   621,   625,
     626,   630,   631,   637,   643,   644,   652,   653,   660,   662,
     664,   666,   670,   672,   674,   676,   680,   681,   683,   685,
     687,   689,   692,   694,   698,   700,   702,   703,   705,   706,
     709,   713,   719,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   753,   758,
     759,   761,   763,   767,   769,   773,   777,   779,   782,   784,
     786,   788,   790,   794,   798,   800,   802,   804,   806,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   830,
     831,   832,   836,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   863,   869,   870,   873,
     874,   878,   879,   882,   885,   888,   891,   892,   899,   902,
     903,   906,   908,   910,   914,   915,   916,   917,   925,   926,
     929,   932,   934,   936,   937,   938,   947,   948,   955,   957,
     960,   962,   965,   966,   967,   974,   975,   976,   983,   984,
     987,   988,   994,   995,   997,   998,  1004,  1005,  1008,  1009,
    1015,  1020,  1021,  1022,  1031,  1032,  1033,  1042,  1044,  1046,
    1048,  1050,  1052,  1055,  1060,  1066,  1067,  1072,  1077,  1082,
    1086,  1090,  1093,  1096,  1097,  1100,  1102,  1105,  1109,  1111,
    1113,  1115,  1116,  1118,  1120,  1123,  1127,  1129,  1131,  1133,
    1135,  1137,  1139,  1141,  1143,  1144,  1146,  1148,  1151,  1155,
    1157,  1159,  1161,  1163,  1165,  1166,  1168,  1170,  1173,  1177,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1192,  1194,  1196,
    1199,  1203,  1205,  1207,  1209,  1212,  1215,  1218,  1220,  1222,
    1224,  1226,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,
    1261,  1266,  1268,  1270,  1272,  1274,  1277,  1281,  1284,  1289,
    1295,  1296,  1302,  1303,  1304,  1310,  1311,  1319,  1321,  1322,
    1324,  1325,  1330,  1331,  1332,  1336,  1342,  1348,  1349,  1354,
    1357,  1360,  1363,  1366,  1367,  1369,  1370,  1372,  1374,  1378,
    1380,  1385,  1391,  1397,  1398,  1401,  1402,  1403,  1411,  1412,
    1422,  1424,  1428,  1430,  1432,  1433,  1436,  1437,  1441,  1443,
    1447,  1448,  1455,  1457,  1458,  1459,  1465,  1466,  1471,  1473,
    1475,  1477,  1481,  1483,  1487,  1488,  1489,  1495,  1497,  1501,
    1503,  1505,  1506,  1510,  1512,  1516,  1517,  1522,  1524,  1525,
    1527,  1530,  1532,  1536,  1541,  1545,  1549,  1553,  1558,  1563,
    1567,  1568,  1569,  1576,  1577,  1579,  1580,  1582,  1584,  1587,
    1589,  1591,  1592,  1594,  1596,  1599,  1601,  1602,  1606,  1607,
    1609,  1611,  1614,  1616,  1619,  1623,  1627,  1631,  1635,  1639,
    1643,  1647,  1651,  1655,  1659,  1663,  1667,  1671,  1675,  1679,
    1683,  1687,  1691,  1695,  1699,  1700,  1707,  1709,  1711,  1715,
    1720,  1725,  1728,  1731,  1734,  1738,  1742,  1747,  1752,  1754,
    1756,  1758,  1760,  1762,  1764,  1766,  1768,  1770,  1772,  1774,
    1776,  1779,  1781,  1783,  1785,  1787,  1789,  1791,  1795,  1797,
    1799,  1802,  1805,  1813,  1822,  1831,  1840,  1849,  1852,  1853,
    1855,  1860,  1861,  1863,  1866,  1867,  1872,  1876,  1880,  1884,
    1886,  1889,  1891,  1893,  1897,  1900,  1904,  1907,  1910,  1912,
    1916,  1920,  1923,  1927,  1929,  1932,  1935,  1938,  1940,  1943,
    1945,  1947,  1949,  1952,  1956,  1959,  1963,  1966,  1969,  1973,
    1977,  1981,  1982,  1989,  1990,  1997,  2000,  2002,  2004,  2006,
    2008,  2010,  2012,  2014,  2016,  2018,  2020,  2022,  2025,  2028,
    2030,  2033,  2035,  2038,  2042,  2045,  2047,  2049,  2051,  2053,
    2055,  2057,  2059,  2062,  2063,  2065,  2067,  2073,  2074,  2078,
    2079,  2082,  2086,  2087,  2089,  2092,  2094,  2096,  2098,  2100,
    2104,  2108,  2112,  2116,  2117,  2119,  2120,  2122,  2123,  2125,
    2128,  2130,  2132,  2135,  2138,  2142,  2144,  2148,  2151,  2153,
    2156,  2159,  2162,  2165,  2168,  2171,  2174,  2177,  2180,  2183,
    2186,  2188,  2190,  2193,  2195,  2197,  2199,  2201,  2203,  2204,
    2207,  2209,  2211,  2213,  2215,  2217,  2218,  2221,  2223,  2225,
    2226,  2228,  2230,  2233,  2236,  2238,  2241,  2244,  2245,  2247,
    2249,  2251,  2255,  2257,  2261,  2262,  2264,  2265,  2270,  2272,
    2274,  2276,  2277,  2279,  2282,  2284,  2286,  2289,  2291,  2295,
    2299,  2301,  2303,  2304,  2307,  2308,  2310,  2316,  2317,  2321,
    2325,  2327,  2328,  2331,  2334,  2337,  2338,  2342,  2346,  2353,
    2360,  2362,  2364,  2367,  2370,  2373,  2375,  2378,  2381,  2383,
    2385,  2386,  2388,  2390,  2392,  2394,  2395,  2397,  2399,  2401,
    2402,  2404,  2407,  2408,  2410,  2411,  2413,  2414,  2416,  2418,
    2421,  2423,  2426,  2428,  2431,  2434,  2437,  2441,  2444,  2446,
    2448,  2450,  2452,  2456,  2458,  2460,  2462,  2467,  2470,  2472,
    2477,  2478,  2480,  2481,  2484,  2486,  2490,  2491,  2498,  2499,
    2505,  2513,  2514,  2520,  2521,  2527,  2528,  2534,  2535,  2540,
    2541,  2552,  2556,  2561,  2565,  2569,  2577,  2582,  2586,  2592,
    2593,  2597,  2599,  2604,  2605,  2609,  2610,  2613,  2614,  2616,
    2617,  2620,  2623,  2626,  2629,  2631,  2633,  2635,  2639,  2644,
    2645,  2652,  2657,  2658,  2664,  2665,  2672,  2677,  2681,  2683,
    2691,  2695,  2697,  2699,  2700,  2706,  2707,  2711,  2714,  2715,
    2721,  2722,  2723,  2730,  2732,  2736,  2738,  2740,  2744,  2747,
    2751,  2754,  2759,  2760,  2767,  2768,  2769,  2778,  2783,  2788,
    2792,  2796,  2799,  2802,  2809,  2815,  2819,  2825,  2827,  2829,
    2831,  2833,  2835,  2836,  2838,  2840,  2843,  2846,  2850,  2854,
    2858,  2862,  2863,  2865,  2866,  2868,  2869,  2871,  2873,  2874,
    2877,  2879,  2880,  2882,  2884,  2886,  2887,  2894,  2898,  2902,
    2903,  2905,  2907,  2911,  2915,  2918,  2921,  2926,  2927,  2931,
    2932,  2936,  2937,  2941,  2942,  2946,  2947,  2949,  2951,  2955,
    2957,  2959,  2960,  2963,  2965,  2969,  2973,  2977,  2979,  2980,
    2986,  2987,  2989,  2991,  2992,  2999,  3000,  3002,  3004,  3007,
    3009,  3011,  3013,  3014,  3020,  3023,  3024,  3030,  3031,  3033,
    3035,  3038,  3040,  3042,  3044,  3046,  3048,  3051,  3052,  3058,
    3059,  3061,  3063,  3064,  3069,  3074,  3078,  3084,  3086,  3090,
    3094,  3095,  3102,  3104,  3106,  3108,  3112,  3115,  3119,  3121,
    3123,  3124,  3131,  3133,  3135,  3137,  3141,  3145,  3150,  3151,
    3158,  3159,  3162,  3163,  3168,  3169,  3172,  3174,  3177,  3182,
    3185,  3189,  3192,  3196,  3197,  3201,  3202,  3203,  3210,  3213,
    3215,  3217,  3220,  3223,  3232,  3237,  3238,  3240,  3243,  3245,
    3247,  3249,  3251,  3252,  3255,  3260,  3264,  3266,  3268,  3272,
    3277,  3278,  3279,  3280,  3283,  3286,  3288,  3290,  3291,  3294,
    3298,  3302,  3306,  3309,  3313,  3318,  3322,  3327,  3331,  3336,
    3338,  3342,  3347,  3351,  3355,  3362,  3364,  3370,  3377,  3383,
    3391,  3398,  3407,  3413,  3420,  3425,  3430,  3436,  3440,  3445,
    3447,  3451,  3455,  3459,  3463,  3467,  3471,  3477,  3483,  3487,
    3491,  3495,  3499,  3503,  3507,  3509,  3511,  3513,  3515,  3517,
    3519,  3521,  3523,  3525,  3527,  3529,  3531,  3533,  3535,  3537,
    3539,  3541,  3543,  3545,  3547,  3549,  3551,  3555,  3557,  3559,
    3561,  3563,  3567,  3570,  3573,  3576,  3579,  3583,  3587,  3593,
    3600,  3605,  3610,  3618,  3621,  3628,  3634,  3641,  3648,  3653,
    3658,  3664,  3669,  3676,  3679,  3684,  3689,  3694,  3705,  3712,
    3721,  3728,  3733,  3738,  3745,  3750,  3755,  3760,  3767,  3772,
    3780,  3788,  3796,  3803,  3810,  3817,  3824,  3828,  3833,  3840,
    3849,  3852,  3855,  3864,  3873,  3880,  3887,  3889,  3896,  3903,
    3912,  3921,  3928,  3937,  3944,  3947,  3956,  3965,  3968,  3971,
    3974,  3979,  3984,  3989,  3994,  3998,  4007,  4014,  4023,  4028,
    4035,  4040,  4045,  4050,  4057,  4066,  4071,  4075,  4082,  4087,
    4094,  4100,  4109,  4117,  4128,  4130,  4137,  4142,  4147,  4152,
    4157,  4162,  4169,  4174,  4175,  4181,  4188,  4191,  4195,  4196,
    4201,  4202,  4206,  4207,  4209,  4211,  4215,  4220,  4225,  4231,
    4236,  4241,  4246,  4252,  4257,  4258,  4259,  4267,  4272,  4278,
    4283,  4289,  4294,  4299,  4304,  4309,  4314,  4320,  4321,  4330,
    4331,  4335,  4339,  4341,  4346,  4347,  4349,  4350,  4353,  4354,
    4356,  4357,  4361,  4364,  4368,  4371,  4373,  4376,  4378,  4381,
    4383,  4386,  4389,  4392,  4393,  4395,  4397,  4401,  4403,  4407,
    4409,  4413,  4414,  4416,  4417,  4420,  4425,  4431,  4433,  4435,
    4437,  4439,  4444,  4446,  4450,  4454,  4458,  4459,  4466,  4467,
    4474,  4475,  4484,  4489,  4490,  4499,  4500,  4511,  4518,  4519,
    4528,  4529,  4540,  4547,  4549,  4552,  4555,  4556,  4558,  4564,
    4565,  4571,  4575,  4581,  4584,  4585,  4586,  4594,  4596,  4597,
    4598,  4605,  4606,  4610,  4611,  4612,  4618,  4619,  4621,  4622,
    4624,  4625,  4628,  4632,  4636,  4638,  4640,  4641,  4649,  4650,
    4658,  4660,  4663,  4664,  4665,  4668,  4669,  4672,  4673,  4675,
    4677,  4679,  4681,  4685,  4687,  4691,  4693,  4695,  4697,  4699,
    4701,  4703,  4705,  4707,  4709,  4711,  4713,  4715,  4717,  4719,
    4721,  4723,  4725,  4727,  4729,  4731,  4733,  4735,  4737,  4739,
    4741,  4742,  4744,  4746,  4747,  4750,  4751,  4753,  4754,  4755,
    4759,  4760,  4761,  4765,  4768,  4769,  4770,  4775,  4780,  4783,
    4784,  4786,  4788,  4792,  4796,  4798,  4801,  4802,  4804,  4805,
    4810,  4815,  4818,  4819,  4821,  4823,  4824,  4826,  4827,  4829,
    4832,  4834,  4838,  4842,  4844,  4846,  4848,  4850,  4852,  4853,
    4856,  4858,  4860,  4862,  4864,  4866,  4868,  4870,  4872,  4874,
    4876,  4878,  4880,  4882,  4884,  4886,  4888,  4890,  4892,  4894,
    4896,  4898,  4900,  4902,  4903,  4904,  4911,  4912,  4914,  4918,
    4920,  4921,  4924,  4928,  4930,  4933,  4935,  4936,  4940,  4941,
    4942,  4950,  4953,  4955,  4956,  4960,  4961,  4969,  4970,  4971,
    4980,  4985,  4992,  4997,  5002,  5007,  5008,  5015,  5020,  5025,
    5030,  5036,  5041,  5043,  5047,  5049,  5052,  5054,  5058,  5060,
    5061,  5064,  5065,  5067,  5068,  5070,  5072,  5075,  5079,  5081,
    5083,  5084,  5085,  5094,  5095,  5096,  5103,  5104,  5106,  5108,
    5110,  5112,  5114,  5117,  5119,  5121,  5123,  5127,  5132,  5133,
    5137,  5141,  5143,  5146,  5149,  5150,  5154,  5155,  5161,  5165,
    5167,  5171,  5173,  5177,  5179,  5181,  5182,  5184,  5185,  5190,
    5191,  5193,  5197,  5199,  5201,  5203,  5204,  5205,  5212,  5213,
    5214,  5226,  5230,  5232,  5236,  5240,  5242,  5246,  5247,  5249,
    5250,  5255,  5256,  5264,  5265,  5271,  5272,  5279,  5281,  5285,
    5288,  5293,  5294,  5297,  5298,  5301,  5303,  5305,  5307,  5308,
    5313,  5314,  5316,  5317,  5319,  5321,  5325,  5327,  5329,  5332,
    5335,  5338,  5340,  5342,  5344,  5346,  5347,  5351,  5352,  5356,
    5359,  5364,  5369,  5373,  5378,  5383,  5385,  5389,  5393,  5400,
    5403,  5406,  5407,  5414,  5415,  5422,  5428,  5431,  5433,  5435,
    5437,  5443,  5449,  5452,  5455,  5457,  5462,  5466,  5469,  5473,
    5476,  5479,  5481,  5485,  5490,  5494,  5498,  5501,  5504,  5508,
    5512,  5516,  5520,  5524,  5528,  5532,  5536,  5538,  5540,  5542,
    5544,  5546,  5547,  5549,  5550,  5553,  5554,  5556,  5558,  5560,
    5561,  5564,  5565,  5568,  5569,  5572,  5575,  5576,  5581,  5582,
    5587,  5589,  5591,  5593,  5595,  5597,  5599,  5601,  5602,  5604,
    5606,  5610,  5611,  5613,  5615,  5616,  5621,  5622,  5623,  5629,
    5631,  5632,  5636,  5637,  5641,  5645,  5647,  5650,  5653,  5656,
    5659,  5662,  5665,  5668,  5670,  5672,  5674,  5676,  5678,  5680,
    5681,  5683,  5684,  5688,  5692,  5694,  5695,  5699,  5701,  5704,
    5705,  5707,  5708,  5712,  5716,  5719,  5722,  5726,  5727,  5729,
    5731,  5734,  5735,  5736,  5737,  5738,  5761,  5763,  5765,  5766,
    5768,  5769,  5771,  5773,  5774,  5776,  5778,  5779,  5782,  5785,
    5787,  5791,  5796,  5800,  5804,  5805,  5808,  5811,  5813,  5817,
    5821,  5822,  5827,  5828,  5832,  5834,  5836,  5837,  5841,  5844,
    5848,  5850,  5852,  5855,  5856,  5859,  5863,  5865,  5871,  5873,
    5875,  5878,  5881,  5883,  5885,  5887,  5889,  5891,  5894,  5897,
    5899,  5901,  5903,  5905,  5907,  5909,  5911,  5913,  5916,  5919,
    5921,  5923,  5925,  5927,  5929,  5932,  5935,  5938,  5940,  5942,
    5946,  5952,  5954,  5956,  5958,  5960,  5962,  5966,  5971,  5977,
    5979,  5985,  5989,  5992,  5994,  5998,  6001,  6004,  6009,  6011,
    6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,  6029,  6031,
    6033,  6035,  6037,  6039,  6043,  6046,  6048,  6050,  6052,  6054,
    6056,  6058,  6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,
    6076,  6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,
    6096,  6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,
    6116,  6118,  6120,  6122,  6124,  6126,  6128,  6130,  6132,  6134,
    6136,  6138,  6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,
    6156,  6158,  6160,  6162,  6164,  6166,  6168,  6170,  6172,  6174,
    6176,  6178,  6180,  6182,  6184,  6186,  6188,  6190,  6192,  6194,
    6196,  6198,  6200,  6202,  6204,  6206,  6208,  6210,  6212,  6214,
    6216,  6218,  6220,  6222,  6224,  6226,  6228,  6230,  6232,  6234,
    6236,  6238,  6240,  6242,  6244,  6246,  6248,  6250,  6252,  6254,
    6256,  6258,  6260,  6262,  6264,  6266,  6268,  6270,  6272,  6274,
    6276,  6278,  6280,  6282,  6284,  6286,  6288,  6290,  6292,  6294,
    6296,  6298,  6300,  6302,  6304,  6306,  6308,  6310,  6312,  6314,
    6316,  6318,  6320,  6322,  6324,  6326,  6328,  6330,  6332,  6334,
    6336,  6338,  6340,  6342,  6344,  6346,  6348,  6350,  6352,  6354,
    6356,  6358,  6360,  6362,  6364,  6366,  6368,  6370,  6372,  6374,
    6376,  6378,  6380,  6382,  6384,  6386,  6388,  6390,  6392,  6394,
    6396,  6398,  6400,  6402,  6404,  6406,  6408,  6410,  6412,  6414,
    6416,  6418,  6420,  6422,  6424,  6426,  6428,  6430,  6432,  6434,
    6436,  6438,  6440,  6442,  6444,  6446,  6448,  6450,  6452,  6454,
    6456,  6458,  6460,  6462,  6464,  6466,  6468,  6470,  6472,  6474,
    6476,  6478,  6480,  6482,  6484,  6486,  6488,  6490,  6492,  6494,
    6496,  6498,  6500,  6502,  6504,  6506,  6508,  6510,  6512,  6514,
    6516,  6518,  6520,  6522,  6524,  6526,  6528,  6530,  6532,  6534,
    6536,  6538,  6540,  6542,  6544,  6546,  6548,  6550,  6552,  6554,
    6556,  6558,  6560,  6562,  6564,  6566,  6568,  6570,  6572,  6574,
    6576,  6578,  6580,  6582,  6584,  6586,  6588,  6590,  6592,  6594,
    6596,  6598,  6600,  6602,  6604,  6606,  6608,  6610,  6612,  6614,
    6616,  6618,  6620,  6622,  6624,  6626,  6628,  6630,  6632,  6634,
    6636,  6638,  6640,  6642,  6644,  6646,  6648,  6650,  6652,  6654,
    6656,  6658,  6660,  6662,  6664,  6666,  6668,  6670,  6672,  6674,
    6676,  6678,  6680,  6682,  6684,  6686,  6688,  6690,  6692,  6694,
    6696,  6698,  6700,  6702,  6704,  6706,  6708,  6710,  6712,  6714,
    6716,  6718,  6720,  6722,  6724,  6726,  6728,  6730,  6732,  6734,
    6736,  6738,  6740,  6742,  6744,  6746,  6748,  6750,  6752,  6753,
    6757,  6758,  6762,  6763,  6767,  6768,  6772,  6773,  6777,  6780,
    6781,  6784,  6785,  6788,  6789,  6794,  6795,  6799,  6801,  6803,
    6805,  6807,  6808,  6810,  6812,  6814,  6815,  6818,  6821,  6824,
    6828,  6829,  6834,  6839,  6846,  6849,  6853,  6857,  6861,  6867,
    6869,  6873,  6877,  6879,  6881,  6885,  6889,  6891,  6895,  6898,
    6901,  6904,  6907,  6910,  6912,  6914,  6919,  6924,  6926,  6928,
    6930,  6932,  6934,  6935,  6940,  6942,  6944,  6946,  6950,  6954,
    6956,  6958,  6961,  6964,  6965,  6969,  6974,  6978,  6979,  6987,
    6989,  6992,  6994,  6996,  6998,  7000,  7002,  7004,  7005,  7011,
    7013,  7015,  7017,  7019,  7021,  7025,  7032,  7039,  7046,  7054,
    7060,  7064,  7073,  7082,  7091,  7098,  7099,  7101,  7103,  7106,
    7107,  7109,  7111,  7115,  7116,  7120,  7121,  7125,  7126,  7130,
    7131,  7135,  7137,  7139,  7141,  7143,  7145,  7147,  7149,  7151,
    7153,  7155,  7157,  7160,  7163,  7165,  7169,  7172,  7175,  7178,
    7181,  7184,  7187,  7190,  7193,  7195,  7197,  7200,  7201,  7203,
    7207,  7209,  7212,  7215,  7218,  7220,  7224,  7228,  7230,  7232,
    7236,  7238,  7242,  7247,  7253,  7258,  7265,  7267,  7268,  7272,
    7276,  7278,  7280,  7281,  7284,  7287,  7290,  7293,  7294,  7297,
    7298,  7302,  7305,  7307,  7310,  7313,  7316,  7319,  7322,  7323,
    7327,  7328,  7330,  7331,  7335,  7338,  7339,  7341,  7344,  7345,
    7347,  7352,  7357,  7363,  7366,  7370,  7371,  7373,  7374,  7379,
    7380,  7382,  7384,  7385,  7387,  7388,  7391,  7394,  7396,  7397,
    7399,  7401,  7404,  7408,  7411,  7412,  7419,  7423,  7424,  7425,
    7426,  7428,  7431,  7433,  7435,  7437,  7439,  7441,  7443,  7445,
    7447,  7449,  7452,  7455,  7459,  7461,  7463,  7465,  7467,  7469,
    7471,  7473,  7475,  7477,  7479,  7481,  7483,  7485,  7486,  7490,
    7492,  7495,  7497,  7500,  7504,  7508,  7512,  7513,  7517,  7521,
    7522,  7530,  7531,  7535,  7537,  7541,  7542,  7546,  7547,  7551,
    7556,  7558,  7562,  7563,  7567,  7568,  7572,  7577,  7582,  7583,
    7584,  7585,  7602,  7611,  7619,  7620,  7621,  7622,  7623,  7624,
    7640,  7641,  7642,  7643,  7644,  7657,  7662,  7667,  7671,  7676,
    7680,  7683,  7685,  7689,  7695,  7697,  7699,  7700,  7702,  7704,
    7705,  7708,  7709,  7710,  7714,  7715,  7718,  7724
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     643,     0,    -1,   153,    -1,    -1,   646,   644,   638,   645,
      -1,   646,   153,    -1,    -1,   153,    -1,   647,    -1,  1513,
      -1,  1017,    -1,  1083,    -1,  1085,    -1,   699,    -1,   659,
      -1,  1086,    -1,  1075,    -1,  1519,    -1,   666,    -1,   648,
      -1,  1328,    -1,  1360,    -1,  1275,    -1,  1277,    -1,   652,
      -1,  1367,    -1,   734,    -1,  1487,    -1,  1478,    -1,   657,
      -1,  1292,    -1,  1587,    -1,  1387,    -1,  1390,    -1,  1470,
      -1,  1091,    -1,  1099,    -1,   853,    -1,  1106,    -1,   650,
      -1,  1383,    -1,  1522,    -1,  1094,    -1,  1078,    -1,  1295,
      -1,  1377,    -1,   733,    -1,  1485,    -1,  1520,    -1,  1521,
      -1,  1118,    -1,  1442,    -1,   726,    -1,  1346,    -1,  1059,
      -1,  1061,    -1,  1339,    -1,  1588,    -1,  1476,    -1,  1320,
      -1,  1389,    -1,  1579,    -1,   649,   400,  1436,    -1,   118,
      -1,   141,    -1,   400,  1436,   191,   651,    -1,  1433,    -1,
     639,  1438,    -1,    -1,   167,  1436,   653,   654,    -1,    -1,
     590,   655,    -1,   655,   634,   656,    -1,   656,    -1,   639,
    1438,    -1,    -1,   210,   658,  1438,    -1,    -1,    57,   304,
     558,   660,   661,    -1,   662,    -1,   661,   634,   662,    -1,
     288,   157,  1432,    -1,   285,   157,  1432,    -1,   305,   157,
    1432,    -1,   291,   157,  1432,    -1,   292,   157,  1256,    -1,
     286,   157,  1256,    -1,   293,   157,  1256,    -1,   287,   157,
    1256,    -1,   302,   157,  1256,    -1,   296,   157,  1432,    -1,
     295,   157,  1432,    -1,   297,   157,  1432,    -1,   298,   157,
    1432,    -1,   301,   157,  1432,    -1,   303,   157,  1256,    -1,
     299,   157,  1432,    -1,   300,   157,  1432,    -1,   306,   157,
    1419,    -1,   224,   157,   632,   663,   633,    -1,   284,   157,
    1256,    -1,   665,    -1,    -1,   664,    -1,   663,   634,   664,
      -1,  1256,    -1,   289,   157,  1432,    -1,   290,   157,  1258,
      -1,   430,   157,  1432,    -1,   431,   157,  1256,    -1,    -1,
      96,   904,   541,   907,  1428,   667,   842,    -1,    -1,    -1,
      96,   995,   227,  1436,   999,   366,  1428,   668,   632,  1012,
     633,  1000,   669,  1051,    -1,    -1,    -1,    96,   996,   227,
    1436,   998,   366,  1428,   670,   632,  1012,   633,  1001,   671,
    1051,    -1,    -1,    -1,    96,   997,   227,  1436,   998,   366,
    1428,   672,   632,  1012,   633,  1002,   673,  1051,    -1,    -1,
      96,   105,   907,  1436,   674,   901,    -1,    -1,    96,   675,
    1541,    -1,    96,   587,   692,  1503,    -1,    96,   275,   204,
     806,    -1,    96,   539,   803,    -1,    96,   676,    -1,   476,
    1438,   187,   108,   614,  1438,   371,   632,   677,   633,    -1,
     678,    -1,   677,   634,   678,    -1,   587,  1433,    -1,   213,
    1433,    -1,   105,  1433,    -1,   381,  1433,    -1,   390,  1433,
      -1,   492,  1433,    -1,   397,  1256,    -1,    -1,  1135,   164,
     907,   693,   680,   366,   465,   681,   686,   683,   688,   140,
     689,    -1,    -1,   165,  1139,  1228,   682,   684,   685,    -1,
      23,  1139,    -1,    -1,   149,    -1,   134,   366,   488,    -1,
     134,    -1,    -1,   514,  1139,    -1,    -1,   152,  1139,    -1,
      -1,   687,    -1,   366,    79,   401,    -1,   366,    79,   354,
     401,    -1,    -1,    75,  1433,    -1,    -1,   690,   691,    -1,
     751,    -1,   753,    -1,   749,    -1,   770,    -1,   788,    -1,
     790,    -1,   785,    -1,   755,    -1,   757,    -1,   758,    -1,
     759,    -1,   760,    -1,   762,    -1,    -1,  1436,   640,  1436,
      -1,  1436,    -1,    -1,   694,   696,    -1,    -1,   695,   697,
      -1,    75,  1433,    -1,   254,   510,    -1,   356,   510,    -1,
      89,   510,    -1,   416,   510,   108,    -1,   331,   510,   108,
      -1,   698,    -1,   696,    -1,   131,    -1,  1145,   131,    -1,
     510,   469,   124,    -1,   510,   469,   239,    -1,    -1,    50,
     693,   700,   701,    -1,    -1,   632,   702,   633,    -1,    -1,
     703,    -1,   703,   634,  1139,    -1,  1139,    -1,    -1,   705,
      -1,   705,   634,   707,    -1,   707,    -1,    -1,  1436,   706,
     955,    -1,    -1,   709,    -1,   709,   634,   710,    -1,   710,
      -1,   711,   706,  1436,   955,    -1,    -1,   240,    -1,   380,
      -1,   231,    -1,    -1,   712,   748,   638,    -1,   748,   638,
      -1,   713,   748,   638,    -1,    -1,   714,   715,   638,    -1,
      -1,   121,   745,   716,   955,   746,    -1,   121,  1436,    82,
     188,   722,    -1,    -1,   121,   719,   207,   188,   717,   720,
     748,    -1,    -1,   121,  1436,   102,   188,   718,  1118,    -1,
     169,    -1,    91,    -1,   721,    -1,   720,   634,   721,    -1,
     725,    -1,  1256,    -1,   723,    -1,   499,   724,  1434,    -1,
      -1,   595,    -1,   722,    -1,  1436,    -1,   500,    -1,  1145,
     190,    -1,   498,    -1,   485,   727,   729,    -1,  1436,    -1,
     723,    -1,    -1,   727,    -1,    -1,   478,   730,    -1,   732,
     157,   731,    -1,   730,   634,   732,   157,   731,    -1,  1418,
      -1,  1166,    -1,  1424,    -1,    64,    -1,   526,    -1,    86,
      -1,    88,    -1,    87,    -1,    55,    -1,   466,    -1,   543,
      -1,    74,    -1,   103,    -1,   322,    -1,   339,    -1,   445,
     728,   729,    -1,   200,   735,   132,   736,    -1,    -1,   100,
      -1,   737,    -1,    82,   741,   742,    -1,   738,    -1,   737,
     634,   738,    -1,   739,   157,   740,    -1,  1436,    -1,   639,
    1438,    -1,   361,    -1,   462,    -1,   731,    -1,   743,    -1,
     742,   634,   743,    -1,   739,   157,   744,    -1,    64,    -1,
     526,    -1,    86,    -1,    88,    -1,    87,    -1,    55,    -1,
     466,    -1,   543,    -1,    74,    -1,   103,    -1,   322,    -1,
     339,    -1,   450,    -1,  1436,    -1,   745,   634,  1436,    -1,
      -1,    -1,   122,   747,  1139,    -1,   751,    -1,   753,    -1,
     749,    -1,   770,    -1,   788,    -1,   790,    -1,   785,    -1,
     755,    -1,   757,    -1,   758,    -1,   759,    -1,   760,    -1,
     762,    -1,    -1,   222,   750,   765,   151,   222,    -1,    -1,
     752,   647,    -1,    -1,   452,   754,  1139,    -1,    -1,   756,
     794,    -1,   259,  1437,    -1,   248,  1437,    -1,   369,  1436,
      -1,    -1,   179,   763,  1436,   237,   761,   764,    -1,    66,
    1436,    -1,    -1,   350,   191,    -1,   191,    -1,  1436,    -1,
     764,   634,  1436,    -1,    -1,    -1,    -1,   766,  1139,   767,
     550,   713,   768,   769,    -1,    -1,   148,   765,    -1,   147,
     713,    -1,   771,    -1,   774,    -1,    -1,    -1,    53,   772,
    1139,   773,   776,   784,   151,    53,    -1,    -1,    53,   775,
     777,   784,   151,    53,    -1,   778,    -1,   776,   778,    -1,
     781,    -1,   777,   781,    -1,    -1,    -1,   607,   779,  1139,
     780,   550,   713,    -1,    -1,    -1,   607,   782,  1139,   783,
     550,   713,    -1,    -1,   147,   713,    -1,    -1,  1437,   641,
     786,   794,   787,    -1,    -1,  1437,    -1,    -1,  1437,   641,
     789,   792,   787,    -1,    -1,   791,   792,    -1,    -1,    31,
     793,   714,   712,   151,    -1,   281,   713,   151,   281,    -1,
      -1,    -1,   609,   795,  1139,   796,   140,   713,   151,   609,
      -1,    -1,    -1,   440,   713,   583,   797,  1139,   798,   151,
     440,    -1,    30,    -1,     8,    -1,   233,    -1,   584,    -1,
     127,    -1,   828,   830,    -1,   828,    57,   825,   809,    -1,
     828,     6,   825,   804,   813,    -1,    -1,   589,   275,   204,
    1436,    -1,   828,     6,   825,   816,    -1,   828,   141,   825,
     816,    -1,   829,   808,   819,    -1,   829,   808,   822,    -1,
       6,   826,    -1,     6,   827,    -1,    -1,   810,   811,    -1,
     812,    -1,   811,   812,    -1,   811,   634,   812,    -1,   831,
      -1,   832,    -1,   833,    -1,    -1,   814,    -1,   815,    -1,
     814,   815,    -1,   814,   634,   815,    -1,   831,    -1,   832,
      -1,   833,    -1,   834,    -1,   837,    -1,   839,    -1,   840,
      -1,   838,    -1,    -1,   817,    -1,   818,    -1,   817,   818,
      -1,   817,   634,   818,    -1,   831,    -1,   832,    -1,   833,
      -1,   839,    -1,   840,    -1,    -1,   820,    -1,   821,    -1,
     820,   821,    -1,   820,   634,   821,    -1,   831,    -1,   835,
      -1,   836,    -1,   837,    -1,   839,    -1,   840,    -1,   838,
      -1,    -1,   823,    -1,   824,    -1,   823,   824,    -1,   823,
     634,   824,    -1,   831,    -1,   839,    -1,   840,    -1,   107,
    1433,    -1,   573,  1433,    -1,   423,  1433,    -1,  1436,    -1,
    1436,    -1,   417,    -1,   419,    -1,   354,     4,    -1,   229,
    1312,   841,    -1,    25,  1312,   841,    -1,   311,  1312,   841,
      -1,   174,  1312,   841,    -1,   574,  1312,   841,    -1,   424,
    1312,   841,    -1,   351,  1312,  1257,    -1,    75,  1312,  1433,
      -1,  1353,   155,  1312,   915,    -1,   603,    -1,   357,    -1,
    1257,    -1,   219,    -1,   632,   843,    -1,   908,   848,   845,
      -1,   264,  1428,    -1,   632,   264,  1428,   633,    -1,   921,
     633,   908,   848,   845,    -1,    -1,   848,   897,   633,   844,
    1526,    -1,    -1,    -1,  1398,   900,   897,   846,  1523,    -1,
      -1,  1398,   900,   632,   897,   633,   847,  1526,    -1,   849,
      -1,    -1,   850,    -1,    -1,   387,   852,   851,   855,    -1,
      -1,    -1,   387,   854,   855,    -1,    47,   856,   865,   866,
     873,    -1,   858,   252,   632,   859,   633,    -1,    -1,   858,
     208,   857,   863,    -1,   415,   863,    -1,   415,   862,    -1,
     269,   863,    -1,   269,   862,    -1,    -1,   266,    -1,    -1,
     860,    -1,   861,    -1,   860,   634,   861,    -1,  1436,    -1,
      71,   632,   859,   633,    -1,   632,  1135,   871,  1136,   633,
      -1,   632,  1135,   871,  1136,   633,    -1,    -1,   388,  1257,
      -1,    -1,    -1,   530,    47,   858,   208,   864,   867,   872,
      -1,    -1,   530,    47,   858,   252,   632,   869,   633,   868,
     872,    -1,   870,    -1,   869,   634,   870,    -1,  1436,    -1,
    1142,    -1,    -1,   529,  1257,    -1,    -1,   632,   874,   633,
      -1,   875,    -1,   874,   634,   875,    -1,    -1,   387,   876,
     877,   878,   894,   889,    -1,  1436,    -1,    -1,    -1,   594,
     261,   549,   879,   881,    -1,    -1,   594,   240,   880,   882,
      -1,   315,    -1,   884,    -1,   884,    -1,   632,   883,   633,
      -1,   884,    -1,   883,   634,   884,    -1,    -1,    -1,   632,
     885,   887,   886,   633,    -1,   888,    -1,   887,   634,   888,
      -1,   315,    -1,  1142,    -1,    -1,   632,   890,   633,    -1,
     891,    -1,   890,   634,   891,    -1,    -1,   530,   892,   893,
     894,    -1,  1438,    -1,    -1,   895,    -1,   895,   896,    -1,
     896,    -1,   539,  1312,  1438,    -1,  1353,   155,  1312,   915,
      -1,   351,  1312,  1257,    -1,   310,  1312,  1259,    -1,   328,
    1312,  1259,    -1,   108,   133,  1312,  1433,    -1,   227,   133,
    1312,  1433,    -1,    75,  1312,  1433,    -1,    -1,    -1,   470,
     898,  1129,  1133,   899,   919,    -1,    -1,    19,    -1,    -1,
     902,    -1,   903,    -1,   902,   903,    -1,   914,    -1,   913,
      -1,    -1,   905,    -1,   906,    -1,   906,   905,    -1,   544,
      -1,    -1,   222,  1145,   168,    -1,    -1,   910,    -1,   911,
      -1,   911,   909,    -1,   911,    -1,   911,   910,    -1,   911,
     634,   910,    -1,   155,  1312,   915,    -1,   310,  1312,  1258,
      -1,   328,  1312,  1258,    -1,    27,  1312,  1256,    -1,   390,
    1312,  1433,    -1,    75,  1312,  1433,    -1,    26,  1312,  1258,
      -1,   382,  1312,  1256,    -1,   382,  1312,   122,    -1,   516,
    1312,  1256,    -1,   516,  1312,   122,    -1,   517,  1312,  1256,
      -1,   517,  1312,   122,    -1,   518,  1312,  1256,    -1,   518,
    1312,   122,    -1,    61,  1312,  1256,    -1,   542,  1312,  1256,
      -1,   126,  1312,  1256,    -1,   460,  1312,   917,    -1,    -1,
     578,  1312,   912,   632,  1376,   633,    -1,   913,    -1,   914,
      -1,   234,  1312,   918,    -1,   108,   133,  1312,  1433,    -1,
     227,   133,  1312,  1433,    -1,   539,  1436,    -1,   523,   136,
      -1,   523,   320,    -1,    83,  1312,  1433,    -1,   251,  1312,
    1256,    -1,   967,   958,  1312,   960,    -1,   967,    69,  1312,
     966,    -1,  1438,    -1,  1438,    -1,   122,    -1,   182,    -1,
     145,    -1,    80,    -1,   425,    -1,    78,    -1,   356,    -1,
     181,    -1,   255,    -1,  1251,    -1,  1128,  1132,    -1,   525,
      -1,   420,    -1,   120,    -1,   238,    -1,   922,    -1,   923,
      -1,   922,   634,   923,    -1,   924,    -1,   925,    -1,   930,
     926,    -1,   930,   984,    -1,   990,  1014,   999,   632,  1012,
     633,  1000,    -1,   996,   993,  1014,   998,   632,  1012,   633,
    1001,    -1,   997,   993,  1014,   998,   632,  1012,   633,  1002,
      -1,   928,   991,  1014,   999,   632,  1012,   633,  1000,    -1,
     928,   187,   252,  1014,   632,  1012,   633,   984,    -1,   928,
     927,    -1,    -1,   927,    -1,    62,   632,  1139,   633,    -1,
      -1,   929,    -1,    85,  1014,    -1,    -1,  1427,   931,   932,
     952,    -1,   940,   950,   946,    -1,   941,   951,   946,    -1,
     184,   942,   946,    -1,    39,    -1,    39,   949,    -1,    44,
      -1,    43,    -1,   936,   949,   970,    -1,   936,   970,    -1,
     937,   949,   971,    -1,   937,   971,    -1,    34,   949,    -1,
      34,    -1,   938,   949,   970,    -1,   939,   949,   971,    -1,
     596,   949,    -1,   621,   950,   946,    -1,   112,    -1,   554,
     944,    -1,   551,   944,    -1,   109,   944,    -1,   555,    -1,
      41,   950,    -1,   935,    -1,   316,    -1,   277,    -1,   280,
     596,    -1,   280,   938,   970,    -1,   557,   970,    -1,   548,
     950,   970,    -1,   318,   970,    -1,   278,   970,    -1,   120,
     942,   946,    -1,   362,   942,   946,    -1,   182,   942,   946,
      -1,    -1,   156,   933,   632,  1016,   633,   970,    -1,    -1,
     478,   934,   632,  1016,   633,   970,    -1,   280,   970,    -1,
     474,    -1,   198,    -1,   197,    -1,   395,    -1,   336,    -1,
     268,    -1,   335,    -1,   396,    -1,   337,    -1,    60,    -1,
     345,    -1,   342,    60,    -1,   936,   600,    -1,   597,    -1,
     342,   597,    -1,   363,    -1,   345,   597,    -1,   342,    60,
     600,    -1,   345,   600,    -1,   238,    -1,   556,    -1,   490,
      -1,   317,    -1,    33,    -1,   420,    -1,   139,    -1,   139,
     399,    -1,    -1,   949,    -1,   943,    -1,   632,   360,   634,
     360,   633,    -1,    -1,   632,   360,   633,    -1,    -1,   632,
     633,    -1,   632,   360,   633,    -1,    -1,   947,    -1,   947,
     948,    -1,   948,    -1,   486,    -1,   582,    -1,   622,    -1,
     632,   279,   633,    -1,   632,   569,   633,    -1,   632,   119,
     633,    -1,   632,   360,   633,    -1,    -1,   949,    -1,    -1,
     943,    -1,    -1,   953,    -1,   953,   954,    -1,   954,    -1,
     359,    -1,  1145,   359,    -1,   122,   957,    -1,   366,   584,
     956,    -1,    26,    -1,   474,   122,   595,    -1,   983,   252,
      -1,   579,    -1,   579,   252,    -1,    75,  1433,    -1,    69,
     964,    -1,    73,   122,    -1,    73,   182,    -1,    73,   145,
      -1,   523,   122,    -1,   523,   136,    -1,   523,   320,    -1,
     932,   965,    -1,   355,   945,    -1,   956,    -1,  1417,    -1,
      60,   478,    -1,    59,    -1,  1438,    -1,    34,    -1,   959,
      -1,   122,    -1,    -1,   958,   960,    -1,  1438,    -1,    34,
      -1,   962,    -1,   122,    -1,  1438,    -1,    -1,    69,   966,
      -1,   964,    -1,   122,    -1,    -1,   122,    -1,    21,    -1,
      34,    21,    -1,    21,    34,    -1,   576,    -1,   576,    34,
      -1,    34,   576,    -1,    -1,   968,    -1,   969,    -1,    48,
      -1,   958,   959,   971,    -1,    34,    -1,    34,   958,   959,
      -1,    -1,    34,    -1,    -1,   632,  1257,   973,   633,    -1,
      20,    -1,   128,    -1,   453,    -1,    -1,   974,    -1,   974,
     975,    -1,   975,    -1,  1257,    -1,   977,   976,    -1,   978,
      -1,   979,   634,   978,    -1,   977,   625,   977,    -1,   979,
      -1,   980,    -1,    -1,   262,   981,    -1,    -1,   403,    -1,
     426,  1428,   985,   987,   988,    -1,    -1,   632,   986,   633,
      -1,   986,   634,  1436,    -1,  1436,    -1,    -1,   307,   192,
      -1,   307,   386,    -1,   307,   487,    -1,    -1,   366,   584,
     989,    -1,   366,   127,   989,    -1,   366,   584,   989,   366,
     127,   989,    -1,   366,   127,   989,   366,   584,   989,    -1,
     448,    -1,    51,    -1,   478,   359,    -1,   356,     5,    -1,
     478,   122,    -1,   992,    -1,   403,   252,    -1,   579,   993,
      -1,   252,    -1,   227,    -1,    -1,   992,    -1,   250,    -1,
     227,    -1,   226,    -1,    -1,   579,    -1,   193,    -1,   496,
      -1,    -1,   998,    -1,   998,  1006,    -1,    -1,  1003,    -1,
      -1,  1005,    -1,    -1,  1004,    -1,  1008,    -1,  1003,  1008,
      -1,  1009,    -1,  1004,  1009,    -1,  1010,    -1,  1005,  1010,
      -1,   590,  1011,    -1,   567,  1011,    -1,   251,  1312,  1256,
      -1,    75,  1433,    -1,  1007,    -1,  1006,    -1,  1007,    -1,
    1007,    -1,   610,   385,  1431,    -1,    46,    -1,   463,    -1,
     208,    -1,  1012,   634,  1013,  1249,    -1,  1013,  1249,    -1,
    1436,    -1,  1436,   632,   360,   633,    -1,    -1,  1427,    -1,
      -1,   640,  1436,    -1,  1415,    -1,  1016,   634,  1415,    -1,
      -1,    13,  1055,   541,  1428,  1018,  1030,    -1,    -1,    13,
     105,  1029,  1019,   902,    -1,    13,   105,  1436,   585,   108,
     133,   341,    -1,    -1,    13,   405,   693,  1020,   694,    -1,
      -1,    13,   194,   693,  1021,   694,    -1,    -1,    13,  1549,
    1544,  1022,  1551,    -1,    -1,    13,  1544,  1023,  1551,    -1,
      -1,    13,  1544,   164,   693,  1024,  1026,  1027,   683,   688,
    1028,    -1,    13,   539,   805,    -1,    13,   275,   204,   807,
      -1,    13,   539,   802,    -1,    13,   539,   801,    -1,    13,
     476,  1438,   371,   632,   677,   633,    -1,    13,   587,   692,
    1025,    -1,  1439,   390,   171,    -1,  1025,   634,  1439,   390,
     171,    -1,    -1,   366,   465,   681,    -1,   687,    -1,   366,
     465,   681,   687,    -1,    -1,   436,   558,   693,    -1,    -1,
     140,   689,    -1,    -1,  1436,    -1,    -1,   135,   539,    -1,
     225,   539,    -1,  1045,   849,    -1,  1045,  1034,    -1,  1034,
      -1,   850,    -1,  1036,    -1,   141,   387,  1043,    -1,   421,
     387,  1093,  1035,    -1,    -1,   370,   387,  1093,  1035,  1031,
    1093,    -1,    15,   387,  1093,  1035,    -1,    -1,    62,   387,
    1035,  1032,  1088,    -1,    -1,   438,   387,  1093,  1035,  1033,
    1080,    -1,    67,   387,  1093,  1257,    -1,   565,   387,  1035,
      -1,  1039,    -1,   166,   387,  1044,   610,   541,  1428,   852,
      -1,   435,   389,   852,    -1,    12,    -1,  1043,    -1,    -1,
       6,   387,  1093,  1037,  1038,    -1,    -1,   632,   874,   633,
      -1,   388,  1257,    -1,    -1,   437,   387,  1093,  1040,  1041,
      -1,    -1,    -1,  1043,  1042,   237,   632,   874,   633,    -1,
    1044,    -1,  1043,   634,  1044,    -1,  1436,    -1,  1047,    -1,
    1045,   634,  1047,    -1,     6,  1054,    -1,  1046,   924,  1057,
      -1,     6,   925,    -1,  1046,   632,   921,   633,    -1,    -1,
      57,  1054,  1427,  1048,   930,  1057,    -1,    -1,    -1,   332,
    1054,  1427,  1049,   932,   952,  1050,  1057,    -1,   141,  1054,
    1427,  1056,    -1,   141,   187,   252,  1427,    -1,   141,   403,
     252,    -1,   141,   992,  1427,    -1,   134,   250,    -1,   149,
     250,    -1,    13,  1054,  1427,   478,   122,  1417,    -1,    13,
    1054,  1427,   141,   122,    -1,   436,  1058,  1428,    -1,    93,
     558,   958,   960,   965,    -1,   909,    -1,   186,    -1,  1242,
      -1,  1052,    -1,  1053,    -1,    -1,  1053,    -1,  1052,    -1,
    1053,  1052,    -1,  1052,  1053,    -1,    11,  1312,   122,    -1,
      11,  1312,  1436,    -1,   274,  1312,   122,    -1,   274,  1312,
    1436,    -1,    -1,    72,    -1,    -1,   223,    -1,    -1,   448,
      -1,    51,    -1,    -1,     8,  1436,    -1,   181,    -1,    -1,
     558,    -1,   157,    -1,    19,    -1,    -1,   515,   488,  1070,
    1060,  1073,  1065,    -1,   522,   488,  1070,    -1,   515,   560,
    1062,    -1,    -1,  1063,    -1,  1064,    -1,  1063,   634,  1064,
      -1,   610,    84,   491,    -1,   418,   368,    -1,   418,   615,
      -1,  1066,  1067,  1068,  1069,    -1,    -1,   587,   157,  1433,
      -1,    -1,   390,   157,  1433,    -1,    -1,   123,   157,  1433,
      -1,    -1,   392,   157,  1433,    -1,    -1,  1071,    -1,  1072,
      -1,  1071,   634,  1072,    -1,   511,    -1,   432,    -1,    -1,
     583,  1074,    -1,   665,    -1,  1074,   634,   665,    -1,   503,
     157,  1433,    -1,   501,   157,  1433,    -1,   502,    -1,    -1,
      61,  1472,  1076,  1282,  1077,    -1,    -1,   414,    -1,   173,
      -1,    -1,   438,  1093,  1472,  1079,  1282,  1080,    -1,    -1,
    1081,    -1,  1082,    -1,  1082,  1081,    -1,   414,    -1,   173,
      -1,   588,    -1,    -1,    15,  1093,  1472,  1084,  1282,    -1,
      35,  1433,    -1,    -1,    62,  1472,  1087,  1282,  1088,    -1,
      -1,  1089,    -1,  1090,    -1,  1090,  1089,    -1,   414,    -1,
     177,    -1,   319,    -1,   173,    -1,    58,    -1,   188,   585,
      -1,    -1,   370,  1093,  1472,  1092,  1282,    -1,    -1,   358,
      -1,   271,    -1,    -1,   436,  1472,  1095,  1097,    -1,   436,
     587,   692,  1096,    -1,  1439,   558,  1439,    -1,  1096,   634,
    1439,   558,  1439,    -1,  1098,    -1,  1097,   634,  1098,    -1,
    1428,   558,  1428,    -1,    -1,    49,   227,  1100,  1101,   240,
    1105,    -1,  1102,    -1,  1104,    -1,  1103,    -1,  1102,   634,
    1103,    -1,  1428,  1114,    -1,  1428,  1112,  1114,    -1,  1436,
      -1,   122,    -1,    -1,   270,   227,   237,    49,  1107,  1108,
      -1,  1111,    -1,  1109,    -1,  1110,    -1,  1109,   634,  1110,
      -1,  1428,  1114,  1117,    -1,  1428,  1112,  1114,  1117,    -1,
      -1,   387,   852,  1113,   632,  1035,   633,    -1,    -1,  1115,
    1116,    -1,    -1,   992,   632,  1224,   633,    -1,    -1,   223,
     258,    -1,  1119,    -1,   470,  1122,    -1,   632,  1120,   633,
    1526,    -1,   470,  1124,    -1,   632,  1120,   633,    -1,   470,
    1203,    -1,   632,  1121,   633,    -1,    -1,  1124,  1123,  1523,
      -1,    -1,    -1,  1125,  1129,  1133,  1126,  1127,  1132,    -1,
    1245,  1251,    -1,  1270,    -1,  1128,    -1,  1270,  1128,    -1,
    1128,  1270,    -1,   191,  1183,  1234,  1239,  1236,  1245,  1251,
    1262,    -1,   191,   142,  1234,  1251,    -1,    -1,  1130,    -1,
    1130,  1131,    -1,  1131,    -1,  1540,    -1,   508,    -1,   506,
      -1,    -1,   188,   584,    -1,   274,   240,   480,   330,    -1,
    1133,   634,  1134,    -1,  1134,    -1,   627,    -1,  1135,  1422,
    1136,    -1,  1135,  1139,  1136,  1137,    -1,    -1,    -1,    -1,
      19,  1436,    -1,    19,  1433,    -1,  1436,    -1,  1433,    -1,
      -1,   632,   633,    -1,  1139,  1143,  1139,    -1,  1139,   619,
    1139,    -1,  1139,  1144,  1139,    -1,   354,  1139,    -1,  1140,
     245,   564,    -1,  1140,   245,  1145,   564,    -1,  1140,   245,
     176,    -1,  1140,   245,  1145,   176,    -1,  1140,   245,   580,
      -1,  1140,   245,  1145,   580,    -1,  1140,    -1,  1140,   245,
     359,    -1,  1140,   245,  1145,   359,    -1,  1140,   158,  1141,
      -1,  1140,  1147,  1141,    -1,  1140,  1147,  1148,   632,  1535,
     633,    -1,  1141,    -1,  1142,   240,   632,  1535,   633,    -1,
    1142,  1145,   240,   632,  1535,   633,    -1,  1142,   240,   632,
    1139,   633,    -1,  1142,   240,   632,  1139,   634,  1176,   633,
      -1,  1142,  1145,   240,   632,  1139,   633,    -1,  1142,  1145,
     240,   632,  1139,   634,  1176,   633,    -1,  1142,    32,  1142,
      17,  1141,    -1,  1142,  1145,    32,  1142,    17,  1141,    -1,
    1142,   494,   264,  1142,    -1,  1142,   264,  1149,  1238,    -1,
    1142,  1145,   264,  1149,  1238,    -1,  1142,   427,  1142,    -1,
    1142,  1145,   427,  1142,    -1,  1142,    -1,  1142,   623,  1142,
      -1,  1142,   624,  1142,    -1,  1142,   481,  1142,    -1,  1142,
     482,  1142,    -1,  1142,   626,  1142,    -1,  1142,   625,  1142,
      -1,  1142,   626,   236,  1139,  1228,    -1,  1142,   625,   236,
    1139,  1228,    -1,  1142,   627,  1142,    -1,  1142,   628,  1142,
      -1,  1142,   629,  1142,    -1,  1142,   138,  1142,    -1,  1142,
     333,  1142,    -1,  1142,   630,  1142,    -1,  1149,    -1,   377,
      -1,   374,    -1,    17,    -1,    16,    -1,   354,    -1,   353,
      -1,   635,    -1,   353,    -1,   157,    -1,   195,    -1,   206,
      -1,   256,    -1,   283,    -1,   347,    -1,    12,    -1,    18,
      -1,  1424,    -1,  1150,    -1,  1151,    -1,  1154,    -1,  1152,
      -1,  1149,    69,  1438,    -1,  1418,    -1,  1416,    -1,  1166,
      -1,  1162,    -1,  1149,   376,  1149,    -1,   626,  1149,    -1,
     625,  1149,    -1,   631,  1149,    -1,  1146,  1149,    -1,   632,
    1535,   633,    -1,   632,  1139,   633,    -1,   632,  1139,   634,
    1176,   633,    -1,   461,   632,  1139,   634,  1176,   633,    -1,
     168,   632,  1535,   633,    -1,   636,  1436,  1139,   637,    -1,
     307,  1177,     9,   632,  1142,  1156,   633,    -1,    34,  1149,
      -1,    54,   632,  1139,    19,  1174,   633,    -1,    53,  1179,
    1181,  1180,   151,    -1,    93,   632,  1139,   634,  1174,   633,
      -1,    93,   632,  1139,   590,   959,   633,    -1,   122,   632,
    1424,   633,    -1,   594,   632,  1425,   633,    -1,   236,  1139,
    1228,   626,  1139,    -1,    60,   632,  1176,   633,    -1,    60,
     632,  1176,   590,   959,   633,    -1,   101,  1138,    -1,   112,
     632,  1139,   633,    -1,   117,   632,  1139,   633,    -1,   218,
     632,  1139,   633,    -1,   233,   632,  1139,   634,  1139,   634,
    1139,   634,  1139,   633,    -1,   236,   632,  1139,   634,  1139,
     633,    -1,   236,   632,  1139,   634,  1139,   634,  1176,   633,
      -1,   260,   632,  1139,   634,  1139,   633,    -1,   327,   632,
    1139,   633,    -1,   334,   632,  1139,   633,    -1,   455,   632,
    1139,   634,  1139,   633,    -1,   468,   632,  1139,   633,    -1,
     554,   632,  1139,   633,    -1,   551,   632,  1139,   633,    -1,
     551,   632,  1139,   634,  1139,   633,    -1,   563,   632,  1139,
     633,    -1,   563,   632,   257,  1139,   191,  1139,   633,    -1,
     563,   632,   559,  1139,   191,  1139,   633,    -1,   563,   632,
      45,  1139,   191,  1139,   633,    -1,   563,   632,   257,   191,
    1139,   633,    -1,   563,   632,   559,   191,  1139,   633,    -1,
     563,   632,    45,   191,  1139,   633,    -1,   563,   632,  1139,
     191,  1139,   633,    -1,   587,   632,   633,    -1,   621,   632,
    1139,   633,    -1,     7,   632,  1139,   634,  1139,   633,    -1,
       7,   632,  1139,   634,   236,  1139,  1228,   633,    -1,    99,
    1138,    -1,   104,   945,    -1,   110,   632,  1139,   634,   236,
    1139,  1228,   633,    -1,   111,   632,  1139,   634,   236,  1139,
    1228,   633,    -1,   175,   632,  1228,   191,  1139,   633,    -1,
     199,   632,  1230,   634,  1139,   633,    -1,   956,    -1,   398,
     632,  1142,   240,  1139,   633,    -1,   527,   632,  1139,   634,
    1139,   633,    -1,   527,   632,  1139,   634,   236,  1139,  1228,
     633,    -1,   531,   632,  1139,   634,  1139,   634,  1139,   633,
      -1,   531,   632,  1139,   634,  1139,   633,    -1,   531,   632,
    1139,   191,  1139,   188,  1139,   633,    -1,   531,   632,  1139,
     191,  1139,   633,    -1,   537,   945,    -1,   552,   632,  1229,
     634,  1139,   634,  1139,   633,    -1,   553,   632,  1229,   634,
    1139,   634,  1139,   633,    -1,   591,  1138,    -1,   593,   945,
      -1,   592,   945,    -1,    21,   632,  1139,   633,    -1,    59,
     632,  1139,   633,    -1,    67,   632,  1176,   633,    -1,    70,
     632,  1139,   633,    -1,   105,   632,   633,    -1,   222,   632,
    1139,   634,  1139,   634,  1139,   633,    -1,   189,   632,  1139,
     634,  1139,   633,    -1,   189,   632,  1139,   634,  1139,   634,
    1139,   633,    -1,   323,   632,  1139,   633,    -1,   333,   632,
    1139,   634,  1139,   633,    -1,   365,   632,  1139,   633,    -1,
     390,   632,  1139,   633,    -1,   412,   632,  1139,   633,    -1,
     440,   632,  1139,   634,  1139,   633,    -1,   441,   632,  1139,
     634,  1139,   634,  1139,   633,    -1,   453,   632,  1139,   633,
      -1,   462,   632,   633,    -1,   565,   632,  1139,   634,  1139,
     633,    -1,   605,   632,  1139,   633,    -1,   605,   632,  1139,
     634,  1139,   633,    -1,   606,   632,  1139,   982,   633,    -1,
     606,   632,  1139,    19,    60,   972,   982,   633,    -1,   606,
     632,  1139,    19,    34,   972,   633,    -1,   606,   632,  1139,
     634,  1256,   634,  1256,   634,  1256,   633,    -1,  1153,    -1,
      89,   632,  1139,   634,  1139,   633,    -1,   197,   632,  1176,
     633,    -1,   268,   632,  1176,   633,    -1,   335,   632,  1176,
     633,    -1,   336,   632,  1176,   633,    -1,   337,   632,  1176,
     633,    -1,   395,   632,  1139,   634,  1139,   633,    -1,   396,
     632,  1176,   633,    -1,    -1,  1431,   632,  1155,  1159,   633,
      -1,  1436,   640,  1436,   632,  1175,   633,    -1,  1157,  1158,
      -1,   240,    43,   330,    -1,    -1,   240,   343,   254,   330,
      -1,    -1,   610,   413,   170,    -1,    -1,  1160,    -1,  1161,
      -1,  1160,   634,  1161,    -1,  1135,  1139,  1136,  1137,    -1,
      28,   632,  1172,   633,    -1,    28,   632,   137,  1172,   633,
      -1,    37,   632,  1172,   633,    -1,    38,   632,  1172,   633,
      -1,    40,   632,  1172,   633,    -1,    94,   632,  1233,   627,
     633,    -1,    94,   632,  1172,   633,    -1,    -1,    -1,    94,
     632,   137,  1163,  1176,  1164,   633,    -1,   329,   632,  1172,
     633,    -1,   329,   632,   137,  1172,   633,    -1,   312,   632,
    1172,   633,    -1,   312,   632,   137,  1172,   633,    -1,   521,
     632,  1172,   633,    -1,   599,   632,  1172,   633,    -1,   520,
     632,  1172,   633,    -1,   601,   632,  1172,   633,    -1,   532,
     632,  1172,   633,    -1,   532,   632,   137,  1172,   633,    -1,
      -1,   205,   632,  1169,  1165,  1176,  1171,  1170,   633,    -1,
      -1,   639,  1167,  1168,    -1,  1438,   479,  1139,    -1,  1438,
      -1,   639,  1458,  1438,  1015,    -1,    -1,   137,    -1,    -1,
     472,  1415,    -1,    -1,  1246,    -1,    -1,  1233,  1173,  1139,
      -1,    34,   950,    -1,    60,   950,   970,    -1,   345,   950,
      -1,   486,    -1,   486,   238,    -1,   582,    -1,   582,   238,
      -1,   112,    -1,   554,   944,    -1,   109,   944,    -1,   120,
     942,    -1,    -1,  1176,    -1,  1139,    -1,  1176,   634,  1139,
      -1,  1178,    -1,   632,  1178,   633,    -1,  1424,    -1,  1178,
     634,  1424,    -1,    -1,  1139,    -1,    -1,   147,  1139,    -1,
     607,  1139,   550,  1139,    -1,  1181,   607,  1139,   550,  1139,
      -1,  1197,    -1,  1186,    -1,  1185,    -1,  1182,    -1,   636,
    1436,  1182,   637,    -1,  1184,    -1,  1185,   634,  1184,    -1,
    1182,  1194,  1182,    -1,  1182,   524,  1197,    -1,    -1,  1182,
    1194,  1182,   366,  1187,  1139,    -1,    -1,  1182,   524,  1197,
     366,  1188,  1139,    -1,    -1,  1182,  1194,  1182,   590,  1189,
     632,  1227,   633,    -1,  1182,   343,   249,  1197,    -1,    -1,
    1182,   260,  1213,   249,  1182,   366,  1190,  1139,    -1,    -1,
    1182,   260,  1213,   249,  1197,  1191,   590,   632,  1227,   633,
      -1,  1182,   343,   260,  1213,   249,  1197,    -1,    -1,  1182,
     455,  1213,   249,  1182,   366,  1192,  1139,    -1,    -1,  1182,
     455,  1213,   249,  1197,  1193,   590,   632,  1227,   633,    -1,
    1182,   343,   455,  1213,   249,  1197,    -1,   249,    -1,   230,
     249,    -1,    97,   249,    -1,    -1,  1196,    -1,   387,   632,
    1227,   633,   852,    -1,    -1,  1198,  1428,  1195,  1232,  1222,
      -1,  1212,  1211,  1208,    -1,   632,  1211,  1199,   633,  1232,
      -1,  1206,  1527,    -1,    -1,    -1,  1199,   578,  1531,  1200,
    1532,  1201,  1527,    -1,  1203,    -1,    -1,    -1,  1204,  1538,
    1133,  1205,   919,  1132,    -1,    -1,  1211,  1207,  1185,    -1,
      -1,    -1,  1209,  1129,  1133,  1210,   919,    -1,    -1,   470,
      -1,    -1,   378,    -1,    -1,   188,   249,    -1,   188,   375,
      47,    -1,   188,   204,    47,    -1,   186,    -1,   223,    -1,
      -1,  1215,   992,  1214,  1217,   632,  1226,   633,    -1,    -1,
     589,   992,  1214,  1218,   632,  1224,   633,    -1,  1216,    -1,
    1219,  1216,    -1,    -1,    -1,  1221,  1219,    -1,    -1,  1223,
    1220,    -1,    -1,  1226,    -1,  1436,    -1,   403,    -1,  1225,
      -1,  1226,   634,  1225,    -1,  1436,    -1,  1227,   634,  1436,
      -1,  1229,    -1,   113,    -1,   114,    -1,   115,    -1,   116,
      -1,   215,    -1,   216,    -1,   217,    -1,   325,    -1,   326,
      -1,   467,    -1,   620,    -1,   117,    -1,   605,    -1,   218,
      -1,   327,    -1,   334,    -1,   412,    -1,   468,    -1,   323,
      -1,   621,    -1,   112,    -1,   554,    -1,   551,    -1,   109,
      -1,    -1,    19,    -1,   157,    -1,    -1,  1231,  1436,    -1,
      -1,    12,    -1,    -1,    -1,   608,  1235,  1139,    -1,    -1,
      -1,   209,  1237,  1139,    -1,   162,  1149,    -1,    -1,    -1,
     204,    47,  1240,  1241,    -1,  1240,   634,  1423,  1249,    -1,
    1423,  1249,    -1,    -1,   611,    -1,   612,    -1,   375,    47,
    1243,    -1,  1243,   634,  1244,    -1,  1244,    -1,  1425,  1249,
      -1,    -1,  1246,    -1,    -1,   375,    47,  1247,  1248,    -1,
    1248,   634,  1423,  1249,    -1,  1423,  1249,    -1,    -1,    20,
      -1,   128,    -1,    -1,  1252,    -1,    -1,  1252,    -1,   265,
    1253,    -1,  1254,    -1,  1254,   634,  1254,    -1,  1254,   364,
    1254,    -1,  1436,    -1,  1416,    -1,   569,    -1,   279,    -1,
     360,    -1,    -1,   265,  1254,    -1,   360,    -1,   211,    -1,
     279,    -1,   569,    -1,   119,    -1,   183,    -1,   360,    -1,
     211,    -1,   279,    -1,   569,    -1,  1260,    -1,   360,    -1,
     569,    -1,   279,    -1,   119,    -1,   183,    -1,   360,    -1,
     569,    -1,   279,    -1,  1260,    -1,  1261,    -1,   119,    -1,
     183,    -1,    -1,    -1,   405,    14,  1263,   632,  1264,   633,
      -1,    -1,  1265,    -1,  1265,   634,  1265,    -1,   360,    -1,
      -1,  1267,  1268,    -1,  1268,   634,  1269,    -1,  1269,    -1,
     639,  1438,    -1,  1438,    -1,    -1,   237,  1271,  1272,    -1,
      -1,    -1,   379,  1435,  1273,   961,  1274,  1399,  1402,    -1,
     143,  1435,    -1,  1266,    -1,    -1,   140,  1276,  1176,    -1,
      -1,   141,  1288,  1472,  1287,  1278,  1282,  1056,    -1,    -1,
      -1,   141,   227,  1436,   366,  1428,  1279,  1280,  1051,    -1,
     141,   105,  1287,  1436,    -1,   141,   194,  1287,  1436,   640,
    1436,    -1,   141,   194,  1287,  1436,    -1,   141,   405,  1287,
     693,    -1,   141,   587,   692,  1502,    -1,    -1,   141,   602,
    1287,  1281,  1282,  1056,    -1,   141,   164,  1287,   693,    -1,
     141,   562,  1287,   693,    -1,   141,   539,   828,  1289,    -1,
     141,   275,   204,   829,  1289,    -1,   141,   476,  1287,  1438,
      -1,  1283,    -1,  1282,   634,  1283,    -1,  1428,    -1,  1428,
    1195,    -1,  1286,    -1,  1285,   634,  1286,    -1,  1429,    -1,
      -1,   222,   168,    -1,    -1,   544,    -1,    -1,  1290,    -1,
    1291,    -1,  1290,  1291,    -1,  1289,   634,  1291,    -1,   839,
      -1,   840,    -1,    -1,    -1,   233,  1293,  1298,  1055,  1300,
    1294,  1302,  1318,    -1,    -1,    -1,   441,  1296,  1299,  1300,
    1297,  1302,    -1,    -1,   282,    -1,   125,    -1,   212,    -1,
    1327,    -1,   125,    -1,   237,  1301,    -1,  1301,    -1,  1284,
      -1,  1305,    -1,   632,   633,  1305,    -1,   632,  1304,   633,
    1305,    -1,    -1,   478,  1303,  1309,    -1,  1304,   634,  1421,
      -1,  1421,    -1,   594,  1308,    -1,   595,  1308,    -1,    -1,
     897,  1306,  1523,    -1,    -1,   632,   897,   633,  1307,  1526,
      -1,  1308,   634,  1313,    -1,  1313,    -1,  1309,   634,  1310,
      -1,  1310,    -1,  1425,  1311,  1317,    -1,   157,    -1,   479,
      -1,    -1,  1311,    -1,    -1,   632,  1314,  1315,   633,    -1,
      -1,  1316,    -1,  1316,   634,  1317,    -1,  1317,    -1,  1139,
      -1,   122,    -1,    -1,    -1,   366,   144,  1319,   252,   584,
    1325,    -1,    -1,    -1,   584,  1321,  1327,  1055,  1183,   478,
    1323,  1322,  1234,  1245,  1255,    -1,  1323,   634,  1324,    -1,
    1324,    -1,  1425,  1311,  1317,    -1,  1325,   634,  1326,    -1,
    1326,    -1,  1425,  1311,  1317,    -1,    -1,   282,    -1,    -1,
     127,  1329,  1337,  1330,    -1,    -1,   191,  1428,  1195,  1331,
    1234,  1245,  1255,    -1,    -1,  1334,  1332,   191,  1183,  1234,
      -1,    -1,   191,  1285,  1333,   590,  1183,  1234,    -1,  1335,
      -1,  1334,   634,  1335,    -1,  1436,  1336,    -1,  1436,   640,
    1436,  1336,    -1,    -1,   640,   627,    -1,    -1,  1338,  1337,
      -1,   414,    -1,   282,    -1,   223,    -1,    -1,   565,  1341,
    1340,  1283,    -1,    -1,   541,    -1,    -1,  1343,    -1,  1344,
      -1,  1343,   634,  1344,    -1,    95,    -1,   320,    -1,    42,
     243,    -1,    90,   536,    -1,   383,   178,    -1,   244,    -1,
     535,    -1,   495,    -1,    12,    -1,    -1,   188,   413,   360,
      -1,    -1,   483,  1347,  1348,    -1,   106,  1359,    -1,  1355,
     538,  1354,  1359,    -1,  1355,   561,  1354,  1359,    -1,   163,
    1354,  1359,    -1,   541,   519,  1354,  1359,    -1,   369,   538,
    1354,  1359,    -1,   394,    -1,   155,   916,  1351,    -1,   155,
      12,  1351,    -1,  1355,    71,  1356,  1428,  1354,  1359,    -1,
    1352,   276,    -1,   488,   214,    -1,    -1,    35,   163,  1357,
    1358,  1349,  1250,    -1,    -1,   429,   163,  1357,  1358,  1350,
    1250,    -1,   994,  1356,  1428,  1354,  1234,    -1,  1353,   154,
      -1,    24,    -1,    92,    -1,   404,    -1,    94,   632,   627,
     633,   604,    -1,    94,   632,   627,   633,   160,    -1,   604,
    1250,    -1,   160,  1250,    -1,   409,    -1,   408,  1342,  1345,
    1250,    -1,  1457,   519,  1359,    -1,  1355,   407,    -1,  1457,
     598,  1359,    -1,   958,  1359,    -1,    70,  1359,    -1,   203,
      -1,   203,   188,  1439,    -1,    96,   105,   907,  1436,    -1,
      96,   541,  1428,    -1,    96,   602,  1428,    -1,   304,   519,
      -1,   488,   519,    -1,    96,   405,   693,    -1,    96,   194,
     693,    -1,    96,   562,   693,    -1,   405,   519,  1359,    -1,
     194,   519,  1359,    -1,   405,    68,   693,    -1,   194,    68,
     693,    -1,    96,   164,   693,    -1,   519,    -1,   338,    -1,
     276,    -1,   304,    -1,    34,    -1,    -1,   523,    -1,    -1,
    1356,  1436,    -1,    -1,   192,    -1,   191,    -1,   240,    -1,
      -1,   240,  1433,    -1,    -1,   191,  1258,    -1,    -1,   264,
    1433,    -1,   608,  1139,    -1,    -1,  1364,  1428,  1361,  1366,
      -1,    -1,  1364,  1365,  1362,  1363,    -1,  1118,    -1,  1292,
      -1,  1295,    -1,  1320,    -1,  1328,    -1,   128,    -1,   129,
      -1,    -1,   173,    -1,   388,    -1,   189,   157,  1438,    -1,
      -1,  1415,    -1,  1436,    -1,    -1,   185,  1093,  1368,  1369,
      -1,    -1,    -1,  1472,  1370,  1376,  1371,  1372,    -1,  1374,
      -1,    -1,   610,   418,   274,    -1,    -1,   188,  1373,   172,
      -1,  1374,   634,  1375,    -1,  1375,    -1,   159,   276,    -1,
     155,   276,    -1,   196,   276,    -1,   489,   276,    -1,    34,
     276,    -1,   428,   276,    -1,   413,    49,    -1,   214,    -1,
     404,    -1,   276,    -1,   519,    -1,   130,    -1,   446,    -1,
      -1,  1282,    -1,    -1,   444,  1378,  1379,    -1,  1379,   634,
    1380,    -1,  1380,    -1,    -1,   488,  1381,  1382,    -1,   304,
      -1,   413,    49,    -1,    -1,    12,    -1,    -1,   411,  1384,
    1385,    -1,  1352,   276,  1386,    -1,   558,  1433,    -1,    30,
    1139,    -1,   253,  1388,  1139,    -1,    -1,    83,    -1,   413,
      -1,   589,  1436,    -1,    -1,    -1,    -1,    -1,   270,  1395,
    1391,  1397,  1396,   228,  1435,  1392,  1398,   237,   541,  1428,
    1195,  1393,   961,  1394,  1405,  1399,  1402,  1406,  1408,  1411,
      -1,   108,    -1,   618,    -1,    -1,   271,    -1,    -1,    81,
      -1,   282,    -1,    -1,   441,    -1,   223,    -1,    -1,    71,
    1400,    -1,  1400,  1401,    -1,  1401,    -1,   546,    47,  1415,
      -1,   373,   150,    47,  1415,    -1,   150,    47,  1415,    -1,
     161,    47,  1415,    -1,    -1,   267,  1403,    -1,  1403,  1404,
      -1,  1404,    -1,   546,    47,  1415,    -1,   513,    47,  1415,
      -1,    -1,   459,   220,    47,  1415,    -1,    -1,   223,   360,
    1407,    -1,   267,    -1,   459,    -1,    -1,   632,  1409,   633,
      -1,   632,   633,    -1,  1409,   634,  1410,    -1,  1410,    -1,
    1425,    -1,   639,  1438,    -1,    -1,   478,  1412,    -1,  1412,
     634,  1413,    -1,  1413,    -1,  1425,  1311,  1135,  1317,  1136,
      -1,   547,    -1,   344,    -1,   572,   547,    -1,  1414,  1434,
      -1,  1434,    -1,   211,    -1,    36,    -1,   384,    -1,  1418,
      -1,   626,  1419,    -1,   625,  1419,    -1,  1414,    -1,  1419,
      -1,  1420,    -1,   359,    -1,   176,    -1,   564,    -1,   211,
      -1,    36,    -1,   572,   211,    -1,   572,    36,    -1,   360,
      -1,   279,    -1,   569,    -1,   119,    -1,   183,    -1,   112,
     547,    -1,   554,   547,    -1,   551,   547,    -1,  1425,    -1,
    1422,    -1,  1436,   640,   627,    -1,  1436,   640,  1436,   640,
     627,    -1,  1139,    -1,  1436,    -1,  1426,    -1,  1436,    -1,
    1426,    -1,  1436,   640,  1436,    -1,   640,  1436,   640,  1436,
      -1,  1436,   640,  1436,   640,  1436,    -1,  1436,    -1,  1436,
     640,  1436,   640,  1436,    -1,  1436,   640,  1436,    -1,   640,
    1436,    -1,  1436,    -1,  1436,   640,  1436,    -1,   640,  1436,
      -1,  1436,  1336,    -1,  1436,   640,  1436,  1336,    -1,  1436,
      -1,   219,    -1,   221,    -1,  1433,    -1,   547,    -1,   547,
      -1,   547,    -1,  1431,    -1,  1440,    -1,  1431,    -1,  1441,
      -1,  1436,    -1,  1433,    -1,   263,    -1,  1438,    -1,  1438,
     639,  1438,    -1,   101,  1138,    -1,  1441,    -1,    21,    -1,
      29,    -1,    31,    -1,    48,    -1,    49,    -1,    59,    -1,
      61,    -1,    66,    -1,    75,    -1,    77,    -1,    89,    -1,
     118,    -1,   140,    -1,   151,    -1,   167,    -1,   185,    -1,
     189,    -1,   207,    -1,   210,    -1,   213,    -1,   235,    -1,
     254,    -1,   356,    -1,   369,    -1,   371,    -1,   381,    -1,
     385,    -1,   397,    -1,   400,    -1,   435,    -1,   438,    -1,
     444,    -1,   447,    -1,   456,    -1,   464,    -1,   469,    -1,
     476,    -1,   486,    -1,   492,    -1,   488,    -1,   493,    -1,
     515,    -1,   522,    -1,   565,    -1,   576,    -1,   577,    -1,
     614,    -1,   617,    -1,   585,    -1,     5,    -1,     7,    -1,
       8,    -1,     9,    -1,    10,    -1,    11,    -1,    14,    -1,
      18,    -1,    23,    -1,    24,    -1,    26,    -1,    25,    -1,
      27,    -1,    28,    -1,    35,    -1,    39,    -1,    42,    -1,
      44,    -1,    43,    -1,    46,    -1,    52,    -1,    55,    -1,
      56,    -1,    58,    -1,    63,    -1,    65,    -1,    64,    -1,
      67,    -1,    68,    -1,    70,    -1,    74,    -1,    73,    -1,
      71,    -1,    76,    -1,    78,    -1,    79,    -1,    80,    -1,
      81,    -1,    83,    -1,    84,    -1,    86,    -1,    88,    -1,
      87,    -1,    90,    -1,    92,    -1,    95,    -1,    98,    -1,
     100,    -1,   103,    -1,   108,    -1,   107,    -1,   109,    -1,
     112,    -1,   117,    -1,   123,    -1,   124,    -1,   126,    -1,
     130,    -1,   132,    -1,   133,    -1,   134,    -1,   135,    -1,
     136,    -1,   143,    -1,   144,    -1,   145,    -1,   152,    -1,
     156,    -1,   155,    -1,   154,    -1,   159,    -1,   160,    -1,
     162,    -1,   164,    -1,   163,    -1,   165,    -1,   166,    -1,
     170,    -1,   171,    -1,   172,    -1,   173,    -1,   174,    -1,
     178,    -1,   177,    -1,   190,    -1,   149,    -1,   192,    -1,
     180,    -1,   181,    -1,   182,    -1,   196,    -1,   198,    -1,
     197,    -1,   199,    -1,   203,    -1,   201,    -1,   208,    -1,
     214,    -1,   218,    -1,   220,    -1,   224,    -1,   239,    -1,
     225,    -1,   226,    -1,   229,    -1,   243,    -1,   244,    -1,
     246,    -1,   247,    -1,   234,    -1,   251,    -1,   255,    -1,
     258,    -1,   261,    -1,   262,    -1,   268,    -1,   269,    -1,
     271,    -1,   273,    -1,   275,    -1,   276,    -1,   310,    -1,
     304,    -1,   306,    -1,   288,    -1,   292,    -1,   289,    -1,
     290,    -1,   305,    -1,   291,    -1,   294,    -1,   286,    -1,
     293,    -1,   287,    -1,   302,    -1,   296,    -1,   295,    -1,
     297,    -1,   298,    -1,   299,    -1,   300,    -1,   301,    -1,
     284,    -1,   308,    -1,   309,    -1,   311,    -1,   313,    -1,
     314,    -1,   319,    -1,   320,    -1,   321,    -1,   322,    -1,
     323,    -1,   324,    -1,   327,    -1,   328,    -1,   332,    -1,
     330,    -1,   334,    -1,   335,    -1,   336,    -1,   337,    -1,
     338,    -1,   339,    -1,   341,    -1,   340,    -1,   342,    -1,
     345,    -1,   346,    -1,   350,    -1,   349,    -1,   357,    -1,
     351,    -1,   352,    -1,   361,    -1,   363,    -1,   364,    -1,
     365,    -1,   367,    -1,   368,    -1,   382,    -1,   383,    -1,
     386,    -1,   389,    -1,   388,    -1,   390,    -1,   391,    -1,
     392,    -1,   393,    -1,   394,    -1,   395,    -1,   396,    -1,
     401,    -1,   402,    -1,   404,    -1,   406,    -1,   407,    -1,
     408,    -1,   409,    -1,   410,    -1,   412,    -1,   413,    -1,
     414,    -1,   417,    -1,   421,    -1,   422,    -1,   424,    -1,
     423,    -1,   425,    -1,   428,    -1,   429,    -1,   430,    -1,
     431,    -1,   432,    -1,   434,    -1,   437,    -1,   439,    -1,
     442,    -1,   446,    -1,   449,    -1,   450,    -1,   451,    -1,
     453,    -1,   457,    -1,   458,    -1,   459,    -1,   462,    -1,
     460,    -1,   461,    -1,   463,    -1,   465,    -1,   466,    -1,
     468,    -1,   474,    -1,   473,    -1,   475,    -1,   487,    -1,
     480,    -1,   484,    -1,   489,    -1,   491,    -1,   494,    -1,
     495,    -1,   501,    -1,   502,    -1,   503,    -1,   506,    -1,
     505,    -1,   508,    -1,   511,    -1,   514,    -1,   516,    -1,
     517,    -1,   518,    -1,   519,    -1,   523,    -1,   525,    -1,
     526,    -1,   527,    -1,   528,    -1,   530,    -1,   529,    -1,
     533,    -1,   534,    -1,   535,    -1,   536,    -1,   543,    -1,
     538,    -1,   542,    -1,   539,    -1,   544,    -1,   545,    -1,
     548,    -1,   549,    -1,   560,    -1,   561,    -1,   551,    -1,
     552,    -1,   553,    -1,   554,    -1,   566,    -1,   567,    -1,
     568,    -1,   194,    -1,   570,    -1,   571,    -1,   574,    -1,
     573,    -1,   580,    -1,   583,    -1,   587,    -1,   588,    -1,
     598,    -1,   602,    -1,   595,    -1,   604,    -1,   603,    -1,
     605,    -1,   613,    -1,   606,    -1,   616,    -1,   618,    -1,
     621,    -1,    -1,   478,  1443,  1444,    -1,    -1,  1460,  1445,
    1450,    -1,    -1,   560,  1446,  1463,    -1,    -1,  1456,  1447,
    1448,    -1,    -1,  1459,  1449,  1450,    -1,   560,  1463,    -1,
      -1,   634,  1451,    -1,    -1,  1452,  1454,    -1,    -1,  1451,
     634,  1453,  1454,    -1,    -1,  1456,  1455,  1459,    -1,  1460,
      -1,   201,    -1,   271,    -1,   475,    -1,    -1,   201,    -1,
     271,    -1,   475,    -1,    -1,   201,   640,    -1,   271,   640,
      -1,   475,   640,    -1,  1462,  1311,  1469,    -1,    -1,  1462,
    1311,  1461,  1469,    -1,   639,  1438,  1311,  1139,    -1,   639,
     639,  1458,  1462,  1311,  1469,    -1,   958,   963,    -1,   340,
    1311,  1139,    -1,   340,   960,   965,    -1,   390,  1311,  1468,
      -1,   390,   188,  1439,  1311,  1468,    -1,  1436,    -1,  1436,
     640,  1436,    -1,   122,   640,  1436,    -1,  1464,    -1,  1465,
      -1,  1464,   634,  1465,    -1,  1465,   634,  1464,    -1,  1466,
      -1,   246,   262,  1467,    -1,   418,   368,    -1,   418,   615,
      -1,   418,   570,    -1,   418,    76,    -1,   439,   418,    -1,
     473,    -1,   547,    -1,   390,   632,   547,   633,    -1,   365,
     632,   547,   633,    -1,  1139,    -1,   122,    -1,   366,    -1,
      12,    -1,    34,    -1,    -1,   274,  1472,  1471,  1473,    -1,
     541,    -1,   538,    -1,  1474,    -1,  1473,   634,  1474,    -1,
    1428,  1232,  1475,    -1,   418,    -1,   615,    -1,   282,   615,
      -1,   418,   271,    -1,    -1,   581,  1477,  1472,    -1,   207,
    1428,   369,  1232,    -1,   207,  1430,    66,    -1,    -1,   207,
    1430,   418,  1479,  1480,  1234,  1251,    -1,  1481,    -1,  1436,
    1482,    -1,   181,    -1,   350,    -1,   181,    -1,   350,    -1,
     402,    -1,   255,    -1,    -1,  1484,  1483,   632,  1316,   633,
      -1,   157,    -1,   195,    -1,   256,    -1,   206,    -1,   283,
      -1,   454,   692,  1486,    -1,  1490,   366,  1489,  1501,   191,
    1503,    -1,  1490,   366,   194,  1501,   191,  1503,    -1,  1490,
     366,   405,  1501,   191,  1503,    -1,    12,  1491,   634,   202,
     372,   191,  1503,    -1,   410,   366,  1439,   191,  1503,    -1,
     202,   692,  1488,    -1,  1490,   366,  1489,  1501,   558,  1503,
    1508,  1509,    -1,  1490,   366,   194,  1501,   558,  1503,  1508,
    1509,    -1,  1490,   366,   405,  1501,   558,  1503,  1508,  1509,
      -1,   410,   366,  1439,   558,  1503,  1510,    -1,    -1,   541,
      -1,  1492,    -1,    12,  1491,    -1,    -1,   404,    -1,  1493,
      -1,  1492,   634,  1493,    -1,    -1,   470,  1494,  1505,    -1,
      -1,   233,  1495,  1505,    -1,    -1,   584,  1496,  1505,    -1,
      -1,   426,  1497,  1505,    -1,   127,    -1,   586,    -1,   227,
      -1,    13,    -1,    96,    -1,   141,    -1,   167,    -1,   434,
      -1,   484,    -1,   406,    -1,   180,    -1,   202,   372,    -1,
     483,   106,    -1,   533,    -1,    96,   544,   538,    -1,   274,
     538,    -1,   442,   488,    -1,   442,    65,    -1,    96,   602,
      -1,   483,   602,    -1,    96,   458,    -1,    13,   458,    -1,
      96,   587,    -1,   164,    -1,   562,    -1,    96,   539,    -1,
      -1,    17,    -1,  1500,  1498,  1499,    -1,  1500,    -1,   528,
     547,    -1,   247,   547,    -1,    63,   547,    -1,   627,    -1,
    1436,   640,   627,    -1,   627,   640,   627,    -1,  1428,    -1,
    1439,    -1,  1502,   634,  1439,    -1,  1504,    -1,  1503,   634,
    1504,    -1,  1439,   220,    47,   547,    -1,  1439,   220,    47,
     390,   547,    -1,  1439,   220,   610,  1438,    -1,  1439,   220,
     610,  1438,    19,  1433,    -1,  1439,    -1,    -1,   632,  1506,
     633,    -1,  1506,   634,  1507,    -1,  1507,    -1,  1436,    -1,
      -1,   443,  1499,    -1,   443,   512,    -1,   443,   616,    -1,
     443,   352,    -1,    -1,   610,  1511,    -1,    -1,   610,   202,
     372,    -1,  1511,  1512,    -1,  1512,    -1,   202,   372,    -1,
     309,  1256,    -1,   313,  1256,    -1,   308,  1256,    -1,   314,
    1256,    -1,    -1,    31,  1514,  1515,    -1,    -1,   613,    -1,
      -1,    17,   356,    56,    -1,    17,    56,    -1,    -1,   433,
      -1,   356,   433,    -1,    -1,   464,    -1,    77,  1515,  1516,
    1517,    -1,   456,  1515,  1516,  1517,    -1,   456,  1515,   558,
    1518,  1436,    -1,   464,  1436,    -1,   433,   464,  1436,    -1,
      -1,  1524,    -1,    -1,   578,  1531,  1525,  1119,    -1,    -1,
    1524,    -1,  1528,    -1,    -1,  1528,    -1,    -1,  1529,  1530,
      -1,  1246,  1250,    -1,  1252,    -1,    -1,   137,    -1,    12,
      -1,   470,  1202,    -1,   632,  1121,   633,    -1,  1532,  1527,
      -1,    -1,  1533,   578,  1531,  1534,  1532,  1527,    -1,  1536,
    1533,  1537,    -1,    -1,    -1,    -1,  1539,    -1,  1539,  1540,
      -1,  1540,    -1,   524,    -1,   212,    -1,   137,    -1,   509,
      -1,   504,    -1,   505,    -1,   507,    -1,    12,    -1,  1546,
    1542,    -1,  1545,  1543,    -1,  1547,  1544,  1551,    -1,  1551,
      -1,  1563,    -1,  1574,    -1,  1568,    -1,   679,    -1,  1551,
      -1,  1563,    -1,  1574,    -1,  1568,    -1,  1567,    -1,   679,
      -1,  1545,    -1,  1546,    -1,    -1,   124,   157,  1439,    -1,
    1548,    -1,  1548,  1549,    -1,  1549,    -1,   377,   441,    -1,
      11,   157,   571,    -1,    11,   157,   321,    -1,    11,   157,
     545,    -1,    -1,   510,   469,   124,    -1,   510,   469,   239,
      -1,    -1,  1550,   602,  1428,  1552,  1553,    19,  1555,    -1,
      -1,   632,  1554,   633,    -1,  1436,    -1,  1554,   634,  1436,
      -1,    -1,  1556,  1557,  1562,    -1,    -1,  1560,  1558,  1523,
      -1,   632,  1559,   633,  1526,    -1,  1560,    -1,   632,  1559,
     633,    -1,    -1,   470,  1561,  1124,    -1,    -1,   610,    62,
     372,    -1,   610,    52,    62,   372,    -1,   610,   271,    62,
     372,    -1,    -1,    -1,    -1,   562,  1135,   693,   799,   800,
     366,  1135,  1564,  1428,   188,  1135,  1565,   146,   461,  1566,
     748,    -1,    10,  1135,   194,  1436,   451,   920,   493,  1433,
      -1,  1135,   194,  1436,   451,   920,   493,  1433,    -1,    -1,
      -1,    -1,    -1,    -1,  1135,   194,   693,   632,  1569,   704,
     633,  1570,   451,  1571,   955,  1572,   695,  1573,   748,    -1,
      -1,    -1,    -1,    -1,   405,  1135,   693,  1575,   632,  1576,
     708,   633,  1577,   695,  1578,   748,    -1,   617,  1581,  1580,
    1582,    -1,   617,   151,  1580,  1584,    -1,   617,   400,  1580,
      -1,   617,    77,  1580,  1583,    -1,   617,   456,  1580,    -1,
     617,   422,    -1,  1415,    -1,  1415,   634,  1415,    -1,  1415,
     634,  1415,   634,  1256,    -1,    31,    -1,   515,    -1,    -1,
     249,    -1,   449,    -1,    -1,   367,   391,    -1,    -1,    -1,
     534,  1585,  1586,    -1,    -1,   188,   324,    -1,   235,   393,
    1436,   493,  1433,    -1,   577,   393,  1436,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1927,  1927,  1940,  1939,  1964,  1971,  1973,  1977,  1978,
    1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,
    1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,
    2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,
    2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,
    2033,  2034,  2038,  2048,  2049,  2053,  2063,  2070,  2081,  2080,
    2091,  2093,  2097,  2098,  2102,  2115,  2114,  2134,  2133,  2151,
    2152,  2156,  2160,  2164,  2168,  2172,  2176,  2180,  2185,  2195,
    2200,  2204,  2208,  2212,  2216,  2220,  2225,  2229,  2234,  2265,
    2270,  2277,  2280,  2282,  2283,  2287,  2301,  2305,  2321,  2325,
    2338,  2337,  2382,  2387,  2381,  2394,  2399,  2392,  2406,  2411,
    2404,  2417,  2416,  2429,  2428,  2436,  2440,  2444,  2448,  2455,
    2468,  2469,  2473,  2477,  2481,  2485,  2489,  2493,  2497,  2505,
    2504,  2536,  2535,  2542,  2549,  2550,  2556,  2562,  2572,  2578,
    2584,  2586,  2593,  2594,  2598,  2604,  2613,  2614,  2622,  2622,
    2677,  2678,  2679,  2680,  2681,  2682,  2683,  2684,  2685,  2686,
    2687,  2688,  2689,  2694,  2708,  2722,  2741,  2742,  2746,  2747,
    2752,  2754,  2756,  2758,  2760,  2762,  2764,  2770,  2771,  2772,
    2776,  2780,  2788,  2787,  2800,  2802,  2805,  2807,  2811,  2815,
    2822,  2824,  2828,  2829,  2834,  2853,  2883,  2885,  2889,  2890,
    2894,  2923,  2924,  2925,  2926,  2930,  2931,  2935,  2936,  2941,
    2944,  2971,  2970,  3054,  3071,  3070,  3145,  3144,  3217,  3218,
    3223,  3225,  3230,  3253,  3264,  3268,  3290,  3291,  3295,  3299,
    3312,  3318,  3324,  3333,  3348,  3374,  3380,  3381,  3387,  3390,
    3394,  3402,  3422,  3424,  3442,  3448,  3450,  3452,  3454,  3456,
    3458,  3460,  3462,  3464,  3466,  3468,  3470,  3475,  3491,  3507,
    3508,  3513,  3519,  3528,  3534,  3543,  3551,  3580,  3589,  3591,
    3600,  3605,  3611,  3620,  3628,  3630,  3632,  3634,  3636,  3638,
    3640,  3642,  3644,  3646,  3648,  3650,  3652,  3657,  3677,  3701,
    3703,  3702,  3709,  3710,  3711,  3712,  3713,  3714,  3715,  3716,
    3717,  3718,  3719,  3720,  3721,  3726,  3725,  3736,  3736,  3793,
    3792,  3849,  3849,  3871,  3930,  3980,  4005,  4004,  4030,  4053,
    4055,  4056,  4060,  4078,  4099,  4108,  4144,  4099,  4173,  4175,
    4176,  4180,  4181,  4186,  4197,  4185,  4248,  4247,  4261,  4262,
    4266,  4267,  4272,  4281,  4271,  4330,  4339,  4329,  4383,  4396,
    4401,  4400,  4438,  4439,  4444,  4443,  4477,  4477,  4496,  4495,
    4545,  4562,  4571,  4561,  4625,  4634,  4624,  4674,  4676,  4681,
    4683,  4685,  4702,  4707,  4713,  4720,  4721,  4729,  4735,  4744,
    4750,  4756,  4757,  4761,  4761,  4766,  4767,  4768,  4772,  4773,
    4774,  4777,  4779,  4783,  4784,  4785,  4789,  4790,  4791,  4792,
    4793,  4794,  4795,  4796,  4799,  4801,  4805,  4806,  4807,  4811,
    4812,  4813,  4814,  4815,  4818,  4820,  4824,  4825,  4826,  4830,
    4831,  4832,  4833,  4834,  4835,  4836,  4839,  4841,  4845,  4846,
    4847,  4851,  4852,  4853,  4858,  4866,  4874,  4882,  4894,  4906,
    4911,  4916,  4924,  4932,  4940,  4948,  4956,  4964,  4972,  4985,
    4998,  5012,  5017,  5030,  5031,  5082,  5083,  5086,  5101,  5119,
    5124,  5122,  5129,  5131,  5130,  5134,  5133,  5139,  5176,  5177,
    5182,  5181,  5200,  5219,  5218,  5235,  5239,  5247,  5246,  5249,
    5251,  5253,  5255,  5260,  5261,  5266,  5267,  5271,  5272,  5276,
    5295,  5305,  5316,  5325,  5326,  5342,  5344,  5343,  5348,  5346,
    5357,  5358,  5362,  5380,  5396,  5397,  5413,  5428,  5450,  5451,
    5456,  5455,  5479,  5489,  5511,  5510,  5528,  5527,  5547,  5569,
    5573,  5602,  5614,  5615,  5620,  5631,  5619,  5656,  5657,  5661,
    5674,  5695,  5708,  5734,  5735,  5740,  5739,  5776,  5781,  5782,
    5786,  5787,  5791,  5793,  5799,  5801,  5803,  5805,  5807,  5809,
    5819,  5834,  5818,  5848,  5849,  5853,  5854,  5858,  5859,  5863,
    5864,  5868,  5869,  5873,  5874,  5878,  5882,  5883,  5886,  5888,
    5892,  5893,  5897,  5898,  5899,  5903,  5908,  5913,  5918,  5923,
    5928,  5933,  5938,  5953,  5959,  5974,  5979,  5994,  6000,  6018,
    6023,  6028,  6033,  6038,  6044,  6043,  6069,  6070,  6071,  6076,
    6081,  6086,  6088,  6090,  6092,  6098,  6106,  6124,  6141,  6167,
    6185,  6186,  6187,  6188,  6189,  6190,  6194,  6195,  6196,  6200,
    6201,  6205,  6206,  6207,  6208,  6213,  6220,  6221,  6225,  6226,
    6230,  6231,  6238,  6243,  6249,  6255,  6261,  6280,  6286,  6288,
    6292,  6296,  6297,  6301,  6306,  6305,  6328,  6329,  6330,  6331,
    6336,  6340,  6345,  6350,  6354,  6359,  6364,  6370,  6375,  6381,
    6385,  6390,  6395,  6413,  6415,  6417,  6433,  6435,  6440,  6445,
    6457,  6462,  6467,  6472,  6474,  6476,  6478,  6480,  6482,  6484,
    6486,  6489,  6488,  6493,  6492,  6496,  6498,  6507,  6508,  6509,
    6514,  6515,  6516,  6517,  6518,  6522,  6526,  6527,  6531,  6532,
    6536,  6537,  6538,  6539,  6540,  6544,  6545,  6546,  6547,  6548,
    6552,  6557,  6559,  6565,  6566,  6568,  6573,  6583,  6584,  6588,
    6589,  6590,  6598,  6599,  6603,  6604,  6608,  6609,  6610,  6614,
    6615,  6616,  6617,  6620,  6621,  6625,  6626,  6630,  6631,  6635,
    6636,  6640,  6641,  6642,  6643,  6644,  6645,  6651,  6657,  6663,
    6669,  6670,  6683,  6689,  6695,  6701,  6706,  6711,  6720,  6741,
    6749,  6750,  6755,  6756,  6760,  6768,  6772,  6773,  6777,  6778,
    6782,  6791,  6795,  6796,  6800,  6808,  6809,  6813,  6814,  6818,
    6819,  6824,  6825,  6829,  6836,  6845,  6850,  6858,  6859,  6860,
    6861,  6862,  6863,  6868,  6876,  6877,  6882,  6881,  6894,  6895,
    6899,  6902,  6903,  6904,  6905,  6909,  6917,  6924,  6925,  6929,
    6939,  6940,  6944,  6945,  6948,  6950,  6954,  6966,  6967,  6971,
    6978,  6991,  6992,  6994,  6996,  7002,  7007,  7013,  7019,  7026,
    7036,  7037,  7038,  7039,  7040,  7044,  7048,  7049,  7053,  7054,
    7058,  7059,  7063,  7064,  7065,  7069,  7070,  7074,  7078,  7091,
    7103,  7104,  7108,  7109,  7113,  7114,  7118,  7119,  7123,  7124,
    7128,  7129,  7133,  7134,  7138,  7139,  7143,  7145,  7149,  7150,
    7154,  7158,  7159,  7172,  7173,  7174,  7178,  7179,  7183,  7189,
    7203,  7204,  7208,  7209,  7213,  7214,  7222,  7221,  7260,  7259,
    7273,  7285,  7284,  7303,  7302,  7321,  7320,  7339,  7333,  7353,
    7352,  7385,  7390,  7395,  7400,  7405,  7412,  7419,  7424,  7432,
    7433,  7434,  7435,  7439,  7440,  7452,  7453,  7457,  7458,  7461,
    7463,  7471,  7479,  7481,  7483,  7484,  7492,  7493,  7497,  7506,
    7504,  7518,  7532,  7531,  7545,  7543,  7557,  7564,  7575,  7576,
    7604,  7611,  7615,  7620,  7619,  7635,  7637,  7642,  7650,  7649,
    7665,  7669,  7668,  7680,  7681,  7685,  7700,  7701,  7705,  7714,
    7718,  7723,  7729,  7728,  7739,  7748,  7738,  7763,  7772,  7781,
    7790,  7799,  7805,  7811,  7820,  7829,  7857,  7878,  7888,  7892,
    7897,  7898,  7901,  7903,  7904,  7905,  7906,  7909,  7914,  7925,
    7930,  7941,  7942,  7946,  7947,  7951,  7952,  7953,  7957,  7958,
    7963,  7971,  7972,  7973,  7974,  7979,  7978,  8007,  8017,  8034,
    8037,  8044,  8048,  8055,  8059,  8063,  8070,  8075,  8078,  8085,
    8088,  8094,  8097,  8104,  8107,  8115,  8118,  8125,  8129,  8136,
    8140,  8147,  8148,  8173,  8174,  8175,  8180,  8185,  8193,  8192,
    8204,  8205,  8206,  8211,  8210,  8232,  8233,  8237,  8238,  8242,
    8243,  8244,  8249,  8248,  8270,  8279,  8278,  8305,  8306,  8310,
    8311,  8315,  8316,  8317,  8318,  8319,  8320,  8325,  8324,  8346,
    8347,  8348,  8353,  8352,  8358,  8365,  8370,  8378,  8379,  8383,
    8397,  8396,  8409,  8410,  8414,  8415,  8419,  8429,  8439,  8440,
    8445,  8444,  8455,  8456,  8460,  8461,  8465,  8475,  8486,  8485,
    8493,  8493,  8504,  8505,  8510,  8511,  8520,  8529,  8530,  8534,
    8539,  8544,  8549,  8554,  8553,  8573,  8581,  8573,  8588,  8589,
    8590,  8591,  8592,  8596,  8603,  8610,  8612,  8623,  8624,  8628,
    8629,  8657,  8687,  8689,  8695,  8705,  8706,  8707,  8722,  8729,
    8754,  8760,  8766,  8767,  8768,  8769,  8770,  8774,  8775,  8780,
    8831,  8838,  8881,  8887,  8893,  8899,  8905,  8911,  8917,  8923,
    8927,  8933,  8939,  8945,  8951,  8957,  8961,  8967,  8977,  8983,
    8991,  8997,  9007,  9013,  9022,  9032,  9038,  9048,  9054,  9063,
    9067,  9073,  9079,  9085,  9091,  9097,  9103,  9109,  9115,  9121,
    9127,  9133,  9139,  9145,  9151,  9155,  9156,  9160,  9161,  9165,
    9166,  9170,  9171,  9175,  9176,  9177,  9178,  9179,  9180,  9184,
    9185,  9189,  9190,  9191,  9192,  9193,  9194,  9206,  9207,  9208,
    9209,  9210,  9216,  9220,  9226,  9232,  9238,  9244,  9246,  9253,
    9260,  9266,  9307,  9316,  9323,  9331,  9337,  9344,  9350,  9364,
    9371,  9387,  9393,  9399,  9407,  9413,  9419,  9425,  9431,  9446,
    9458,  9464,  9470,  9476,  9482,  9488,  9494,  9500,  9506,  9512,
    9518,  9524,  9530,  9536,  9542,  9548,  9554,  9562,  9583,  9590,
    9596,  9603,  9610,  9617,  9624,  9630,  9636,  9641,  9647,  9654,
    9660,  9666,  9672,  9678,  9684,  9702,  9708,  9714,  9721,  9728,
    9743,  9749,  9755,  9761,  9767,  9774,  9780,  9786,  9792,  9798,
    9804,  9810,  9822,  9828,  9834,  9840,  9846,  9854,  9860,  9872,
    9878,  9884,  9892,  9902,  9908,  9924,  9930,  9937,  9944,  9951,
    9958,  9965,  9969,  9989,  9988, 10061, 10101, 10103, 10108, 10109,
   10113, 10114, 10118, 10119, 10123, 10130, 10138, 10163, 10169, 10175,
   10181, 10187, 10193, 10202, 10209, 10211, 10208, 10218, 10229, 10235,
   10241, 10247, 10253, 10259, 10265, 10271, 10277, 10284, 10283, 10302,
   10301, 10316, 10326, 10334, 10350, 10351, 10356, 10361, 10366, 10369,
   10382, 10381, 10398, 10400, 10402, 10404, 10406, 10408, 10410, 10412,
   10414, 10416, 10418, 10423, 10424, 10428, 10435, 10443, 10444, 10448,
   10455, 10463, 10464, 10468, 10469, 10473, 10481, 10492, 10493, 10502,
   10513, 10514, 10520, 10521, 10541, 10543, 10547, 10545, 10562, 10560,
   10578, 10576, 10583, 10592, 10590, 10608, 10607, 10617, 10628, 10626,
   10645, 10644, 10655, 10666, 10667, 10668, 10676, 10677, 10681, 10696,
   10696, 10711, 10751, 10802, 10806, 10811, 10803, 10823, 10843, 10851,
   10843, 10860, 10859, 10882, 10899, 10882, 10906, 10910, 10936, 10937,
   10942, 10945, 10946, 10947, 10951, 10952, 10957, 10956, 10962, 10961,
   10969, 10970, 10973, 10975, 10975, 10979, 10979, 10984, 10985, 10989,
   10991, 10996, 10997, 11001, 11012, 11025, 11026, 11027, 11028, 11029,
   11030, 11031, 11032, 11033, 11034, 11035, 11036, 11040, 11041, 11042,
   11043, 11044, 11045, 11046, 11047, 11048, 11052, 11053, 11054, 11055,
   11058, 11060, 11061, 11065, 11066, 11074, 11076, 11080, 11082, 11081,
   11095, 11098, 11097, 11112, 11118, 11133, 11135, 11139, 11141, 11146,
   11147, 11167, 11192, 11196, 11197, 11201, 11214, 11216, 11221, 11220,
   11255, 11257, 11262, 11263, 11264, 11269, 11275, 11279, 11280, 11284,
   11291, 11298, 11305, 11315, 11342, 11346, 11352, 11358, 11368, 11372,
   11382, 11383, 11384, 11385, 11386, 11387, 11391, 11392, 11393, 11394,
   11395, 11399, 11400, 11401, 11402, 11403, 11407, 11408, 11409, 11410,
   11414, 11419, 11420, 11423, 11426, 11425, 11459, 11460, 11464, 11472,
   11485, 11485, 11495, 11496, 11500, 11519, 11559, 11558, 11571, 11579,
   11570, 11581, 11593, 11605, 11604, 11622, 11621, 11632, 11633, 11632,
   11649, 11656, 11677, 11698, 11710, 11715, 11714, 11724, 11730, 11737,
   11742, 11747, 11757, 11758, 11762, 11773, 11786, 11787, 11791, 11802,
   11803, 11807, 11808, 11811, 11813, 11816, 11817, 11818, 11822, 11823,
   11831, 11839, 11830, 11849, 11856, 11848, 11866, 11878, 11879, 11892,
   11896, 11897, 11913, 11914, 11918, 11927, 11928, 11929, 11931, 11930,
   11941, 11942, 11946, 11947, 11949, 11948, 11952, 11951, 11957, 11958,
   11962, 11963, 11967, 11977, 11978, 11982, 11983, 11988, 11987, 12001,
   12002, 12006, 12011, 12019, 12020, 12028, 12030, 12030, 12038, 12046,
   12037, 12068, 12069, 12073, 12081, 12082, 12086, 12096, 12097, 12104,
   12103, 12119, 12118, 12132, 12131, 12143, 12142, 12156, 12157, 12161,
   12174, 12190, 12191, 12195, 12196, 12200, 12201, 12202, 12207, 12206,
   12228, 12230, 12233, 12235, 12238, 12239, 12242, 12246, 12250, 12254,
   12258, 12262, 12266, 12270, 12274, 12282, 12285, 12295, 12294, 12309,
   12316, 12324, 12332, 12340, 12348, 12356, 12363, 12365, 12367, 12376,
   12380, 12385, 12384, 12390, 12389, 12394, 12403, 12410, 12415, 12420,
   12425, 12427, 12429, 12431, 12433, 12441, 12452, 12460, 12462, 12470,
   12477, 12484, 12494, 12501, 12507, 12516, 12524, 12528, 12532, 12539,
   12546, 12552, 12559, 12566, 12571, 12576, 12584, 12586, 12588, 12593,
   12594, 12597, 12599, 12603, 12604, 12608, 12609, 12613, 12614, 12618,
   12619, 12623, 12624, 12627, 12629, 12636, 12647, 12646, 12662, 12661,
   12668, 12669, 12670, 12671, 12672, 12676, 12677, 12682, 12686, 12692,
   12698, 12720, 12721, 12722, 12737, 12736, 12749, 12758, 12748, 12760,
   12764, 12765, 12777, 12776, 12798, 12799, 12804, 12806, 12808, 12810,
   12812, 12814, 12816, 12818, 12820, 12822, 12824, 12826, 12828, 12833,
   12834, 12839, 12838, 12848, 12849, 12853, 12853, 12855, 12856, 12860,
   12861, 12866, 12865, 12876, 12880, 12884, 12896, 12906, 12907, 12908,
   12914, 12926, 12938, 12948, 12958, 12925, 12966, 12967, 12971, 12972,
   12976, 12977, 12989, 12993, 12994, 12995, 12998, 13000, 13004, 13005,
   13009, 13014, 13021, 13026, 13033, 13035, 13039, 13040, 13044, 13049,
   13057, 13058, 13061, 13063, 13071, 13073, 13077, 13078, 13079, 13083,
   13085, 13090, 13091, 13100, 13101, 13105, 13106, 13110, 13123, 13147,
   13159, 13170, 13189, 13197, 13209, 13224, 13245, 13246, 13247, 13256,
   13257, 13258, 13259, 13266, 13272, 13278, 13284, 13290, 13319, 13350,
   13360, 13370, 13376, 13385, 13397, 13403, 13409, 13425, 13426, 13430,
   13439, 13455, 13459, 13510, 13514, 13532, 13536, 13616, 13641, 13672,
   13673, 13689, 13699, 13703, 13709, 13715, 13725, 13731, 13740, 13750,
   13751, 13781, 13794, 13810, 13826, 13843, 13844, 13855, 13856, 13867,
   13868, 13869, 13873, 13894, 13921, 13936, 13937, 13938, 13939, 13940,
   13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950,
   13951, 13952, 13953, 13954, 13955, 13956, 13957, 13958, 13959, 13960,
   13961, 13962, 13963, 13964, 13965, 13966, 13967, 13968, 13969, 13970,
   13971, 13972, 13973, 13974, 13975, 13976, 13977, 13978, 13979, 13980,
   13981, 13982, 13983, 13984, 13985, 13995, 13996, 13997, 13998, 13999,
   14000, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009,
   14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019,
   14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029,
   14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039,
   14040, 14041, 14046, 14047, 14048, 14049, 14050, 14051, 14052, 14053,
   14054, 14055, 14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063,
   14064, 14065, 14066, 14067, 14068, 14069, 14070, 14071, 14072, 14073,
   14074, 14075, 14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083,
   14084, 14085, 14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093,
   14094, 14095, 14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103,
   14104, 14105, 14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113,
   14114, 14115, 14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123,
   14124, 14125, 14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133,
   14134, 14135, 14136, 14137, 14138, 14139, 14140, 14141, 14142, 14143,
   14144, 14145, 14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153,
   14154, 14155, 14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163,
   14164, 14165, 14166, 14167, 14168, 14169, 14170, 14171, 14172, 14173,
   14174, 14175, 14176, 14177, 14178, 14179, 14180, 14181, 14182, 14183,
   14184, 14185, 14186, 14187, 14188, 14189, 14190, 14191, 14192, 14193,
   14194, 14195, 14196, 14197, 14198, 14199, 14200, 14201, 14202, 14203,
   14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211, 14212, 14213,
   14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221, 14222, 14223,
   14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231, 14232, 14233,
   14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241, 14242, 14243,
   14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251, 14252, 14253,
   14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262, 14263,
   14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272, 14273,
   14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282, 14283,
   14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291, 14292, 14293,
   14294, 14295, 14296, 14297, 14298, 14299, 14300, 14301, 14313, 14312,
   14332, 14331, 14338, 14337, 14347, 14346, 14357, 14356, 14362, 14370,
   14372, 14377, 14377, 14386, 14385, 14399, 14398, 14403, 14407, 14408,
   14409, 14413, 14414, 14415, 14416, 14420, 14421, 14422, 14423, 14428,
   14454, 14453, 14553, 14564, 14577, 14593, 14606, 14628, 14662, 14681,
   14709, 14755, 14769, 14770, 14771, 14772, 14776, 14794, 14812, 14813,
   14817, 14818, 14819, 14820, 14824, 14825, 14842, 14854, 14855, 14856,
   14862, 14868, 14880, 14879, 14895, 14896, 14900, 14901, 14905, 14918,
   14919, 14920, 14925, 14930, 14929, 14949, 14965, 14982, 14981, 15020,
   15021, 15025, 15026, 15030, 15031, 15032, 15033, 15035, 15034, 15048,
   15049, 15050, 15051, 15052, 15058, 15063, 15069, 15080, 15091, 15095,
   15105, 15110, 15117, 15129, 15141, 15150, 15152, 15156, 15157, 15164,
   15166, 15170, 15171, 15176, 15175, 15179, 15178, 15182, 15181, 15185,
   15184, 15187, 15188, 15189, 15190, 15191, 15192, 15193, 15194, 15195,
   15196, 15197, 15198, 15199, 15200, 15201, 15202, 15203, 15204, 15205,
   15206, 15207, 15208, 15209, 15210, 15211, 15212, 15216, 15217, 15221,
   15222, 15226, 15236, 15246, 15259, 15274, 15287, 15300, 15312, 15317,
   15325, 15330, 15338, 15352, 15363, 15372, 15382, 15391, 15395, 15399,
   15400, 15404, 15431, 15433, 15437, 15441, 15445, 15452, 15453, 15457,
   15458, 15462, 15463, 15467, 15468, 15474, 15480, 15486, 15496, 15495,
   15505, 15506, 15511, 15512, 15513, 15518, 15519, 15520, 15524, 15525,
   15529, 15541, 15550, 15560, 15569, 15583, 15584, 15589, 15588, 15604,
   15605, 15606, 15609, 15611, 15615, 15615, 15639, 15640, 15644, 15645,
   15646, 15650, 15654, 15661, 15664, 15662, 15678, 15685, 15706, 15723,
   15725, 15729, 15730, 15734, 15735, 15743, 15744, 15745, 15746, 15752,
   15758, 15768, 15770, 15772, 15777, 15778, 15779, 15780, 15781, 15785,
   15786, 15787, 15788, 15789, 15790, 15800, 15801, 15806, 15819, 15832,
   15834, 15836, 15841, 15846, 15848, 15850, 15856, 15857, 15859, 15865,
   15864, 15882, 15883, 15887, 15892, 15900, 15900, 15926, 15925, 15942,
   15946, 15951, 15956, 15955, 15967, 15968, 15970, 15972, 15990, 15996,
   16001, 15983, 16064, 16082, 16107, 16139, 16144, 16152, 16175, 16103,
   16241, 16261, 16274, 16284, 16240, 16305, 16309, 16313, 16317, 16321,
   16325, 16332, 16339, 16346, 16356, 16357, 16361, 16362, 16363, 16367,
   16368, 16373, 16375, 16374, 16380, 16381, 16385, 16395
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE",
  "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_SYM", "CURRENT_USER",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFAULT_AUTH_SYM", "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS",
  "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM",
  "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM",
  "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT",
  "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM",
  "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM",
  "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM", "MASTER_BIND_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "$@5", "$@6", "$@7",
  "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "$@20", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "$@21", "sp_proc_stmt", "sp_proc_stmt_if", "$@22",
  "sp_proc_stmt_statement", "$@23", "sp_proc_stmt_return", "$@24",
  "sp_proc_stmt_unlabeled", "$@25", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@26", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@27", "$@28", "$@29", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@30", "$@31", "searched_case_stmt", "$@32",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@33", "$@34", "searched_when_clause", "$@35",
  "$@36", "else_clause_opt", "sp_labeled_control", "$@37", "sp_opt_label",
  "sp_labeled_block", "$@38", "sp_unlabeled_block", "$@39",
  "sp_block_content", "$@40", "sp_unlabeled_control", "$@41", "$@42",
  "$@43", "$@44", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@46",
  "create3", "$@47", "$@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@49", "have_partitioning", "partition_entry", "$@50",
  "partition", "part_type_def", "$@51", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@52",
  "$@53", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@54", "part_name", "opt_part_values", "$@55", "$@56", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@57", "$@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@60", "$@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@63", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "$@73", "alter_user_list", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@74", "$@75", "$@76", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@77",
  "add_part_extra", "reorg_partition_rule", "$@78", "reorg_parts_rule",
  "$@79", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "$@80", "$@81", "$@82",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@83", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "$@84", "opt_checksum_type", "repair",
  "$@85", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@86", "binlog_base64_event", "check", "$@87",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@88", "opt_no_write_to_binlog", "rename", "$@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@92", "cache_keys_spec", "$@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@94",
  "select_part2", "$@95", "$@96", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@97", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@98", "$@99", "$@100",
  "variable", "$@101", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@102",
  "cast_type", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@103", "$@104", "$@105", "$@106", "$@107", "$@108", "$@109",
  "normal_join", "opt_use_partition", "use_partition", "table_factor",
  "$@110", "select_derived_union", "$@111", "$@112",
  "select_init2_derived", "select_part2_derived", "$@113", "$@114",
  "select_derived", "$@115", "select_derived2", "$@116", "$@117",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@118",
  "$@119", "index_hints_list", "opt_index_hints_list", "$@120",
  "opt_key_definition", "$@121", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@122", "having_clause", "$@123", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@124", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@125",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@126", "select_var_list", "select_var_ident",
  "into", "$@127", "into_destination", "$@128", "$@129", "do", "$@130",
  "drop", "$@131", "$@132", "$@133", "$@134", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@135", "$@136",
  "replace", "$@137", "$@138", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@139", "fields",
  "insert_values", "$@140", "$@141", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@142",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@143",
  "update", "$@144", "$@145", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@146", "single_multi", "$@147", "$@148", "$@149", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@150", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@151", "show_param",
  "$@152", "$@153", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@154", "$@155", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@156", "flush_options", "$@157", "$@158", "opt_flush_lock",
  "$@159", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@160", "reset_options", "reset_option", "$@161", "slave_reset_options",
  "purge", "$@162", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "$@163", "$@164", "$@165", "$@166", "data_or_xml",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_xml_rows_identified_by", "opt_ignore_lines",
  "lines_or_rows", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "load_data_set_list",
  "load_data_set_elem", "text_literal", "text_string", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys_nonewline", "TEXT_STRING_sys", "TEXT_STRING_literal",
  "TEXT_STRING_filesystem", "ident", "label_ident", "ident_or_text",
  "user", "keyword", "keyword_sp", "set", "$@167",
  "start_option_value_list", "$@168", "$@169", "$@170",
  "start_option_value_list_following_option_type", "$@171",
  "option_value_list_continued", "option_value_list", "$@172", "$@173",
  "option_value", "$@174", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@175", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@176",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@177", "handler", "$@178", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@179",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@180", "$@181", "$@182",
  "$@183", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "opt_grant_option", "grant_option_list", "grant_option",
  "begin", "$@184", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@185", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@186",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@187", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@188",
  "view_list_opt", "view_list", "view_select", "$@189", "view_select_aux",
  "$@190", "create_view_select_paren", "create_view_select", "$@191",
  "view_check_option", "trigger_tail", "$@192", "$@193", "$@194",
  "udf_tail", "sf_tail", "$@195", "$@196", "$@197", "$@198", "$@199",
  "sp_tail", "$@200", "$@201", "$@202", "$@203", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@204", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   124,    38,    45,    43,    42,    47,    37,
      94,   126,    40,    41,    44,    33,   123,   125,    59,    64,
      46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   642,   643,   644,   643,   643,   645,   645,   646,   646,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   648,   649,   649,   650,   651,   651,   653,   652,
     654,   654,   655,   655,   656,   658,   657,   660,   659,   661,
     661,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   663,   663,   663,   664,   665,   665,   665,   665,
     667,   666,   668,   669,   666,   670,   671,   666,   672,   673,
     666,   674,   666,   675,   666,   666,   666,   666,   666,   676,
     677,   677,   678,   678,   678,   678,   678,   678,   678,   680,
     679,   682,   681,   681,   683,   683,   683,   683,   684,   684,
     685,   685,   686,   686,   687,   687,   688,   688,   690,   689,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   692,   693,   693,   694,   694,   695,   695,
     696,   696,   696,   696,   696,   696,   696,   697,   697,   697,
     698,   698,   700,   699,   701,   701,   702,   702,   703,   703,
     704,   704,   705,   705,   706,   707,   708,   708,   709,   709,
     710,   711,   711,   711,   711,   712,   712,   713,   713,   714,
     714,   716,   715,   715,   717,   715,   718,   715,   719,   719,
     720,   720,   721,   722,   722,   723,   724,   724,   725,   725,
     725,   725,   725,   726,   727,   727,   728,   728,   729,   729,
     730,   730,   731,   731,   731,   732,   732,   732,   732,   732,
     732,   732,   732,   732,   732,   732,   732,   733,   734,   735,
     735,   736,   736,   737,   737,   738,   739,   739,   740,   740,
     741,   742,   742,   743,   744,   744,   744,   744,   744,   744,
     744,   744,   744,   744,   744,   744,   744,   745,   745,   746,
     747,   746,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   750,   749,   752,   751,   754,
     753,   756,   755,   757,   758,   759,   761,   760,   762,   763,
     763,   763,   764,   764,   766,   767,   768,   765,   769,   769,
     769,   770,   770,   772,   773,   771,   775,   774,   776,   776,
     777,   777,   779,   780,   778,   782,   783,   781,   784,   784,
     786,   785,   787,   787,   789,   788,   791,   790,   793,   792,
     794,   795,   796,   794,   797,   798,   794,   799,   799,   800,
     800,   800,   801,   802,   803,   804,   804,   805,   805,   806,
     807,   808,   808,   810,   809,   811,   811,   811,   812,   812,
     812,   813,   813,   814,   814,   814,   815,   815,   815,   815,
     815,   815,   815,   815,   816,   816,   817,   817,   817,   818,
     818,   818,   818,   818,   819,   819,   820,   820,   820,   821,
     821,   821,   821,   821,   821,   821,   822,   822,   823,   823,
     823,   824,   824,   824,   825,   826,   827,   828,   829,   830,
     830,   830,   831,   832,   833,   834,   835,   836,   837,   838,
     839,   840,   840,   841,   841,   842,   842,   842,   842,   843,
     844,   843,   845,   846,   845,   847,   845,   848,   849,   849,
     851,   850,   852,   854,   853,   855,   856,   857,   856,   856,
     856,   856,   856,   858,   858,   859,   859,   860,   860,   861,
     862,   863,   864,   865,   865,   866,   867,   866,   868,   866,
     869,   869,   870,   871,   872,   872,   873,   873,   874,   874,
     876,   875,   877,   878,   879,   878,   880,   878,   881,   881,
     882,   882,   883,   883,   885,   886,   884,   887,   887,   888,
     888,   889,   889,   890,   890,   892,   891,   893,   894,   894,
     895,   895,   896,   896,   896,   896,   896,   896,   896,   896,
     898,   899,   897,   900,   900,   901,   901,   902,   902,   903,
     903,   904,   904,   905,   905,   906,   907,   907,   908,   908,
     909,   909,   910,   910,   910,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   912,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   913,   914,   915,   916,
     917,   917,   917,   917,   917,   917,   918,   918,   918,   919,
     919,   920,   920,   920,   920,   921,   922,   922,   923,   923,
     924,   924,   925,   925,   925,   925,   925,   925,   926,   926,
     927,   928,   928,   929,   931,   930,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   933,   932,   934,   932,   932,   932,   935,   935,   935,
     935,   935,   935,   935,   935,   936,   937,   937,   938,   938,
     939,   939,   939,   939,   939,   940,   940,   940,   940,   940,
     941,   941,   941,   942,   942,   942,   943,   944,   944,   945,
     945,   945,   946,   946,   947,   947,   948,   948,   948,   949,
     949,   949,   949,   950,   950,   951,   951,   952,   952,   953,
     953,   954,   954,   954,   954,   954,   954,   954,   954,   954,
     954,   954,   954,   954,   954,   954,   954,   954,   955,   956,
     957,   957,   958,   958,   959,   959,   960,   960,   961,   961,
     962,   962,   963,   963,   964,   965,   965,   966,   966,   967,
     967,   968,   968,   968,   969,   969,   969,   970,   970,   970,
     970,   970,   970,   970,   971,   971,   973,   972,   974,   974,
     975,   976,   976,   976,   976,   977,   978,   979,   979,   980,
     981,   981,   982,   982,   983,   983,   984,   985,   985,   986,
     986,   987,   987,   987,   987,   988,   988,   988,   988,   988,
     989,   989,   989,   989,   989,   990,   991,   991,   992,   992,
     993,   993,   994,   994,   994,   995,   995,   996,   997,   998,
     999,   999,  1000,  1000,  1001,  1001,  1002,  1002,  1003,  1003,
    1004,  1004,  1005,  1005,  1006,  1006,  1007,  1007,  1008,  1008,
    1009,  1010,  1010,  1011,  1011,  1011,  1012,  1012,  1013,  1013,
    1014,  1014,  1015,  1015,  1016,  1016,  1018,  1017,  1019,  1017,
    1017,  1020,  1017,  1021,  1017,  1022,  1017,  1023,  1017,  1024,
    1017,  1017,  1017,  1017,  1017,  1017,  1017,  1025,  1025,  1026,
    1026,  1026,  1026,  1027,  1027,  1028,  1028,  1029,  1029,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1031,
    1030,  1030,  1032,  1030,  1033,  1030,  1030,  1030,  1030,  1030,
    1034,  1035,  1035,  1037,  1036,  1038,  1038,  1038,  1040,  1039,
    1041,  1042,  1041,  1043,  1043,  1044,  1045,  1045,  1046,  1047,
    1047,  1047,  1048,  1047,  1049,  1050,  1047,  1047,  1047,  1047,
    1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,
    1047,  1047,  1051,  1051,  1051,  1051,  1051,  1052,  1052,  1053,
    1053,  1054,  1054,  1055,  1055,  1056,  1056,  1056,  1057,  1057,
    1057,  1058,  1058,  1058,  1058,  1060,  1059,  1059,  1061,  1062,
    1062,  1063,  1063,  1064,  1064,  1064,  1065,  1066,  1066,  1067,
    1067,  1068,  1068,  1069,  1069,  1070,  1070,  1071,  1071,  1072,
    1072,  1073,  1073,  1074,  1074,  1074,  1074,  1074,  1076,  1075,
    1077,  1077,  1077,  1079,  1078,  1080,  1080,  1081,  1081,  1082,
    1082,  1082,  1084,  1083,  1085,  1087,  1086,  1088,  1088,  1089,
    1089,  1090,  1090,  1090,  1090,  1090,  1090,  1092,  1091,  1093,
    1093,  1093,  1095,  1094,  1094,  1096,  1096,  1097,  1097,  1098,
    1100,  1099,  1101,  1101,  1102,  1102,  1103,  1104,  1105,  1105,
    1107,  1106,  1108,  1108,  1109,  1109,  1110,  1111,  1113,  1112,
    1115,  1114,  1116,  1116,  1117,  1117,  1118,  1119,  1119,  1120,
    1120,  1121,  1121,  1123,  1122,  1125,  1126,  1124,  1127,  1127,
    1127,  1127,  1127,  1128,  1128,  1129,  1129,  1130,  1130,  1131,
    1131,  1131,  1132,  1132,  1132,  1133,  1133,  1133,  1134,  1134,
    1135,  1136,  1137,  1137,  1137,  1137,  1137,  1138,  1138,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1140,  1140,  1140,  1140,  1140,  1140,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1143,  1143,  1144,  1144,  1145,
    1145,  1146,  1146,  1147,  1147,  1147,  1147,  1147,  1147,  1148,
    1148,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1151,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1153,  1153,  1153,  1153,  1153,
    1153,  1153,  1153,  1155,  1154,  1154,  1156,  1156,  1157,  1157,
    1158,  1158,  1159,  1159,  1160,  1160,  1161,  1162,  1162,  1162,
    1162,  1162,  1162,  1162,  1163,  1164,  1162,  1162,  1162,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1162,  1165,  1162,  1167,
    1166,  1168,  1168,  1168,  1169,  1169,  1170,  1170,  1171,  1171,
    1173,  1172,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,
    1174,  1174,  1174,  1175,  1175,  1176,  1176,  1177,  1177,  1178,
    1178,  1179,  1179,  1180,  1180,  1181,  1181,  1182,  1182,  1183,
    1184,  1184,  1185,  1185,  1186,  1186,  1187,  1186,  1188,  1186,
    1189,  1186,  1186,  1190,  1186,  1191,  1186,  1186,  1192,  1186,
    1193,  1186,  1186,  1194,  1194,  1194,  1195,  1195,  1196,  1198,
    1197,  1197,  1197,  1199,  1200,  1201,  1199,  1202,  1204,  1205,
    1203,  1207,  1206,  1209,  1210,  1208,  1211,  1212,  1213,  1213,
    1214,  1214,  1214,  1214,  1215,  1215,  1217,  1216,  1218,  1216,
    1219,  1219,  1220,  1221,  1220,  1223,  1222,  1224,  1224,  1225,
    1225,  1226,  1226,  1227,  1227,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1229,  1229,  1229,
    1229,  1229,  1229,  1229,  1229,  1229,  1230,  1230,  1230,  1230,
    1231,  1231,  1231,  1232,  1232,  1233,  1233,  1234,  1235,  1234,
    1236,  1237,  1236,  1238,  1238,  1239,  1239,  1240,  1240,  1241,
    1241,  1241,  1242,  1243,  1243,  1244,  1245,  1245,  1247,  1246,
    1248,  1248,  1249,  1249,  1249,  1250,  1250,  1251,  1251,  1252,
    1253,  1253,  1253,  1254,  1254,  1254,  1254,  1254,  1255,  1255,
    1256,  1256,  1256,  1256,  1256,  1256,  1257,  1257,  1257,  1257,
    1257,  1258,  1258,  1258,  1258,  1258,  1259,  1259,  1259,  1259,
    1260,  1261,  1261,  1262,  1263,  1262,  1264,  1264,  1264,  1265,
    1267,  1266,  1268,  1268,  1269,  1269,  1271,  1270,  1273,  1274,
    1272,  1272,  1272,  1276,  1275,  1278,  1277,  1279,  1280,  1277,
    1277,  1277,  1277,  1277,  1277,  1281,  1277,  1277,  1277,  1277,
    1277,  1277,  1282,  1282,  1283,  1284,  1285,  1285,  1286,  1287,
    1287,  1288,  1288,  1289,  1289,  1290,  1290,  1290,  1291,  1291,
    1293,  1294,  1292,  1296,  1297,  1295,  1298,  1298,  1298,  1298,
    1299,  1299,  1300,  1300,  1301,  1302,  1302,  1302,  1303,  1302,
    1304,  1304,  1305,  1305,  1306,  1305,  1307,  1305,  1308,  1308,
    1309,  1309,  1310,  1311,  1311,  1312,  1312,  1314,  1313,  1315,
    1315,  1316,  1316,  1317,  1317,  1318,  1319,  1318,  1321,  1322,
    1320,  1323,  1323,  1324,  1325,  1325,  1326,  1327,  1327,  1329,
    1328,  1331,  1330,  1332,  1330,  1333,  1330,  1334,  1334,  1335,
    1335,  1336,  1336,  1337,  1337,  1338,  1338,  1338,  1340,  1339,
    1341,  1341,  1342,  1342,  1343,  1343,  1344,  1344,  1344,  1344,
    1344,  1344,  1344,  1344,  1344,  1345,  1345,  1347,  1346,  1348,
    1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,
    1348,  1349,  1348,  1350,  1348,  1348,  1348,  1348,  1348,  1348,
    1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,
    1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,
    1348,  1348,  1348,  1348,  1348,  1348,  1351,  1351,  1351,  1352,
    1352,  1353,  1353,  1354,  1354,  1355,  1355,  1356,  1356,  1357,
    1357,  1358,  1358,  1359,  1359,  1359,  1361,  1360,  1362,  1360,
    1363,  1363,  1363,  1363,  1363,  1364,  1364,  1365,  1365,  1365,
    1365,  1366,  1366,  1366,  1368,  1367,  1370,  1371,  1369,  1369,
    1372,  1372,  1373,  1372,  1374,  1374,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1376,
    1376,  1378,  1377,  1379,  1379,  1381,  1380,  1380,  1380,  1382,
    1382,  1384,  1383,  1385,  1386,  1386,  1387,  1388,  1388,  1388,
    1389,  1391,  1392,  1393,  1394,  1390,  1395,  1395,  1396,  1396,
    1397,  1397,  1397,  1398,  1398,  1398,  1399,  1399,  1400,  1400,
    1401,  1401,  1401,  1401,  1402,  1402,  1403,  1403,  1404,  1404,
    1405,  1405,  1406,  1406,  1407,  1407,  1408,  1408,  1408,  1409,
    1409,  1410,  1410,  1411,  1411,  1412,  1412,  1413,  1414,  1414,
    1414,  1414,  1415,  1415,  1415,  1416,  1417,  1417,  1417,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1419,
    1419,  1419,  1419,  1419,  1420,  1420,  1420,  1421,  1421,  1422,
    1422,  1423,  1424,  1424,  1425,  1425,  1426,  1426,  1426,  1427,
    1427,  1427,  1427,  1428,  1428,  1428,  1429,  1429,  1430,  1431,
    1431,  1432,  1433,  1434,  1435,  1436,  1436,  1437,  1437,  1438,
    1438,  1438,  1439,  1439,  1439,  1440,  1440,  1440,  1440,  1440,
    1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,
    1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,
    1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,
    1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,  1440,
    1440,  1440,  1440,  1440,  1440,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1443,  1442,
    1445,  1444,  1446,  1444,  1447,  1444,  1449,  1448,  1448,  1450,
    1450,  1452,  1451,  1453,  1451,  1455,  1454,  1454,  1456,  1456,
    1456,  1457,  1457,  1457,  1457,  1458,  1458,  1458,  1458,  1459,
    1461,  1460,  1460,  1460,  1460,  1460,  1460,  1460,  1460,  1462,
    1462,  1462,  1463,  1463,  1463,  1463,  1464,  1465,  1466,  1466,
    1467,  1467,  1467,  1467,  1468,  1468,  1468,  1469,  1469,  1469,
    1469,  1469,  1471,  1470,  1472,  1472,  1473,  1473,  1474,  1475,
    1475,  1475,  1475,  1477,  1476,  1478,  1478,  1479,  1478,  1480,
    1480,  1481,  1481,  1482,  1482,  1482,  1482,  1483,  1482,  1484,
    1484,  1484,  1484,  1484,  1485,  1486,  1486,  1486,  1486,  1486,
    1487,  1488,  1488,  1488,  1488,  1489,  1489,  1490,  1490,  1491,
    1491,  1492,  1492,  1494,  1493,  1495,  1493,  1496,  1493,  1497,
    1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,
    1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,
    1493,  1493,  1493,  1493,  1493,  1493,  1493,  1498,  1498,  1499,
    1499,  1500,  1500,  1500,  1501,  1501,  1501,  1501,  1502,  1502,
    1503,  1503,  1504,  1504,  1504,  1504,  1504,  1505,  1505,  1506,
    1506,  1507,  1508,  1508,  1508,  1508,  1508,  1509,  1509,  1510,
    1510,  1511,  1511,  1512,  1512,  1512,  1512,  1512,  1514,  1513,
    1515,  1515,  1516,  1516,  1516,  1517,  1517,  1517,  1518,  1518,
    1519,  1520,  1520,  1521,  1522,  1523,  1523,  1525,  1524,  1526,
    1526,  1526,  1527,  1527,  1529,  1528,  1530,  1530,  1531,  1531,
    1531,  1532,  1532,  1533,  1534,  1533,  1535,  1536,  1537,  1538,
    1538,  1539,  1539,  1540,  1540,  1540,  1540,  1540,  1540,  1540,
    1540,  1541,  1541,  1541,  1542,  1542,  1542,  1542,  1542,  1543,
    1543,  1543,  1543,  1543,  1543,  1544,  1544,  1545,  1546,  1547,
    1547,  1547,  1548,  1549,  1549,  1549,  1550,  1550,  1550,  1552,
    1551,  1553,  1553,  1554,  1554,  1556,  1555,  1558,  1557,  1557,
    1559,  1559,  1561,  1560,  1562,  1562,  1562,  1562,  1564,  1565,
    1566,  1563,  1567,  1567,  1569,  1570,  1571,  1572,  1573,  1568,
    1575,  1576,  1577,  1578,  1574,  1579,  1579,  1579,  1579,  1579,
    1579,  1580,  1580,  1580,  1581,  1581,  1582,  1582,  1582,  1583,
    1583,  1584,  1585,  1584,  1586,  1586,  1587,  1588
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     1,     0,     1,     3,     1,     3,     3,     3,     3,
       0,     7,     0,     0,    14,     0,     0,    14,     0,     0,
      14,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     0,     6,     1,     1,
       1,     3,     1,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     3,     1,     1,     0,     1,     0,     2,
       3,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       1,     1,     3,     1,     3,     3,     1,     2,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     0,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     0,     2,     0,
       3,     0,     2,     2,     2,     2,     0,     6,     2,     0,
       2,     1,     1,     3,     0,     0,     0,     7,     0,     2,
       2,     1,     1,     0,     0,     8,     0,     6,     1,     2,
       1,     2,     0,     0,     6,     0,     0,     6,     0,     2,
       0,     5,     0,     1,     0,     5,     0,     2,     0,     5,
       4,     0,     0,     8,     0,     0,     8,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     1,     1,     1,     1,     2,     3,     2,     4,     5,
       0,     5,     0,     0,     5,     0,     7,     1,     0,     1,
       0,     4,     0,     0,     3,     5,     5,     0,     4,     2,
       2,     2,     2,     0,     1,     0,     1,     1,     3,     1,
       4,     5,     5,     0,     2,     0,     0,     7,     0,     9,
       1,     3,     1,     1,     0,     2,     0,     3,     1,     3,
       0,     6,     1,     0,     0,     5,     0,     4,     1,     1,
       1,     3,     1,     3,     0,     0,     5,     1,     3,     1,
       1,     0,     3,     1,     3,     0,     4,     1,     0,     1,
       2,     1,     3,     4,     3,     3,     3,     4,     4,     3,
       0,     0,     6,     0,     1,     0,     1,     1,     2,     1,
       1,     0,     1,     1,     2,     1,     0,     3,     0,     1,
       1,     2,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     0,     6,     1,     1,     3,     4,
       4,     2,     2,     2,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       2,     2,     7,     8,     8,     8,     8,     2,     0,     1,
       4,     0,     1,     2,     0,     4,     3,     3,     3,     1,
       2,     1,     1,     3,     2,     3,     2,     2,     1,     3,
       3,     2,     3,     1,     2,     2,     2,     1,     2,     1,
       1,     1,     2,     3,     2,     3,     2,     2,     3,     3,
       3,     0,     6,     0,     6,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       2,     1,     2,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     2,     0,     1,     1,     5,     0,     3,     0,
       2,     3,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     3,     1,     3,     2,     1,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     4,     1,     1,
       1,     0,     1,     2,     1,     1,     2,     1,     3,     3,
       1,     1,     0,     2,     0,     1,     5,     0,     3,     3,
       1,     0,     2,     2,     2,     0,     3,     3,     6,     6,
       1,     1,     2,     2,     2,     1,     2,     2,     1,     1,
       0,     1,     1,     1,     1,     0,     1,     1,     1,     0,
       1,     2,     0,     1,     0,     1,     0,     1,     1,     2,
       1,     2,     1,     2,     2,     2,     3,     2,     1,     1,
       1,     1,     3,     1,     1,     1,     4,     2,     1,     4,
       0,     1,     0,     2,     1,     3,     0,     6,     0,     5,
       7,     0,     5,     0,     5,     0,     5,     0,     4,     0,
      10,     3,     4,     3,     3,     7,     4,     3,     5,     0,
       3,     1,     4,     0,     3,     0,     2,     0,     1,     0,
       2,     2,     2,     2,     1,     1,     1,     3,     4,     0,
       6,     4,     0,     5,     0,     6,     4,     3,     1,     7,
       3,     1,     1,     0,     5,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     2,     3,
       2,     4,     0,     6,     0,     0,     8,     4,     4,     3,
       3,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       1,     1,     0,     1,     1,     2,     2,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     1,     1,     0,     2,
       1,     0,     1,     1,     1,     0,     6,     3,     3,     0,
       1,     1,     3,     3,     2,     2,     4,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     1,     1,     3,     1,
       1,     0,     2,     1,     3,     3,     3,     1,     0,     5,
       0,     1,     1,     0,     6,     0,     1,     1,     2,     1,
       1,     1,     0,     5,     2,     0,     5,     0,     1,     1,
       2,     1,     1,     1,     1,     1,     2,     0,     5,     0,
       1,     1,     0,     4,     4,     3,     5,     1,     3,     3,
       0,     6,     1,     1,     1,     3,     2,     3,     1,     1,
       0,     6,     1,     1,     1,     3,     3,     4,     0,     6,
       0,     2,     0,     4,     0,     2,     1,     2,     4,     2,
       3,     2,     3,     0,     3,     0,     0,     6,     2,     1,
       1,     2,     2,     8,     4,     0,     1,     2,     1,     1,
       1,     1,     0,     2,     4,     3,     1,     1,     3,     4,
       0,     0,     0,     2,     2,     1,     1,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     1,
       3,     4,     3,     3,     6,     1,     5,     6,     5,     7,
       6,     8,     5,     6,     4,     4,     5,     3,     4,     1,
       3,     3,     3,     3,     3,     3,     5,     5,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     3,     2,     2,     2,     2,     3,     3,     5,     6,
       4,     4,     7,     2,     6,     5,     6,     6,     4,     4,
       5,     4,     6,     2,     4,     4,     4,    10,     6,     8,
       6,     4,     4,     6,     4,     4,     4,     6,     4,     7,
       7,     7,     6,     6,     6,     6,     3,     4,     6,     8,
       2,     2,     8,     8,     6,     6,     1,     6,     6,     8,
       8,     6,     8,     6,     2,     8,     8,     2,     2,     2,
       4,     4,     4,     4,     3,     8,     6,     8,     4,     6,
       4,     4,     4,     6,     8,     4,     3,     6,     4,     6,
       5,     8,     7,    10,     1,     6,     4,     4,     4,     4,
       4,     6,     4,     0,     5,     6,     2,     3,     0,     4,
       0,     3,     0,     1,     1,     3,     4,     4,     5,     4,
       4,     4,     5,     4,     0,     0,     7,     4,     5,     4,
       5,     4,     4,     4,     4,     4,     5,     0,     8,     0,
       3,     3,     1,     4,     0,     1,     0,     2,     0,     1,
       0,     3,     2,     3,     2,     1,     2,     1,     2,     1,
       2,     2,     2,     0,     1,     1,     3,     1,     3,     1,
       3,     0,     1,     0,     2,     4,     5,     1,     1,     1,
       1,     4,     1,     3,     3,     3,     0,     6,     0,     6,
       0,     8,     4,     0,     8,     0,    10,     6,     0,     8,
       0,    10,     6,     1,     2,     2,     0,     1,     5,     0,
       5,     3,     5,     2,     0,     0,     7,     1,     0,     0,
       6,     0,     3,     0,     0,     5,     0,     1,     0,     1,
       0,     2,     3,     3,     1,     1,     0,     7,     0,     7,
       1,     2,     0,     0,     2,     0,     2,     0,     1,     1,
       1,     1,     3,     1,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     0,     2,     0,     1,     0,     0,     3,
       0,     0,     3,     2,     0,     0,     4,     4,     2,     0,
       1,     1,     3,     3,     1,     2,     0,     1,     0,     4,
       4,     2,     0,     1,     1,     0,     1,     0,     1,     2,
       1,     3,     3,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     0,     6,     0,     1,     3,     1,
       0,     2,     3,     1,     2,     1,     0,     3,     0,     0,
       7,     2,     1,     0,     3,     0,     7,     0,     0,     8,
       4,     6,     4,     4,     4,     0,     6,     4,     4,     4,
       5,     4,     1,     3,     1,     2,     1,     3,     1,     0,
       2,     0,     1,     0,     1,     1,     2,     3,     1,     1,
       0,     0,     8,     0,     0,     6,     0,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     3,     4,     0,     3,
       3,     1,     2,     2,     0,     3,     0,     5,     3,     1,
       3,     1,     3,     1,     1,     0,     1,     0,     4,     0,
       1,     3,     1,     1,     1,     0,     0,     6,     0,     0,
      11,     3,     1,     3,     3,     1,     3,     0,     1,     0,
       4,     0,     7,     0,     5,     0,     6,     1,     3,     2,
       4,     0,     2,     0,     2,     1,     1,     1,     0,     4,
       0,     1,     0,     1,     1,     3,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     0,     3,     0,     3,     2,
       4,     4,     3,     4,     4,     1,     3,     3,     6,     2,
       2,     0,     6,     0,     6,     5,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     0,     1,     0,     2,     0,     1,     1,     1,     0,
       2,     0,     2,     0,     2,     2,     0,     4,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       3,     0,     1,     1,     0,     4,     0,     0,     5,     1,
       0,     3,     0,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     0,
       1,     0,     3,     3,     1,     0,     3,     1,     2,     0,
       1,     0,     3,     3,     2,     2,     3,     0,     1,     1,
       2,     0,     0,     0,     0,    22,     1,     1,     0,     1,
       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
       0,     4,     0,     3,     1,     1,     0,     3,     2,     3,
       1,     1,     2,     0,     2,     3,     1,     5,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     2,     2,     2,     1,     1,     3,
       5,     1,     1,     1,     1,     1,     3,     4,     5,     1,
       5,     3,     2,     1,     3,     2,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     2,     0,
       2,     0,     2,     0,     4,     0,     3,     1,     1,     1,
       1,     0,     1,     1,     1,     0,     2,     2,     2,     3,
       0,     4,     4,     6,     2,     3,     3,     3,     5,     1,
       3,     3,     1,     1,     3,     3,     1,     3,     2,     2,
       2,     2,     2,     1,     1,     4,     4,     1,     1,     1,
       1,     1,     0,     4,     1,     1,     1,     3,     3,     1,
       1,     2,     2,     0,     3,     4,     3,     0,     7,     1,
       2,     1,     1,     1,     1,     1,     1,     0,     5,     1,
       1,     1,     1,     1,     3,     6,     6,     6,     7,     5,
       3,     8,     8,     8,     6,     0,     1,     1,     2,     0,
       1,     1,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     3,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     2,     0,     1,     3,
       1,     2,     2,     2,     1,     3,     3,     1,     1,     3,
       1,     3,     4,     5,     4,     6,     1,     0,     3,     3,
       1,     1,     0,     2,     2,     2,     2,     0,     2,     0,
       3,     2,     1,     2,     2,     2,     2,     2,     0,     3,
       0,     1,     0,     3,     2,     0,     1,     2,     0,     1,
       4,     4,     5,     2,     3,     0,     1,     0,     4,     0,
       1,     1,     0,     1,     0,     2,     2,     1,     0,     1,
       1,     2,     3,     2,     0,     6,     3,     0,     0,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       2,     1,     2,     3,     3,     3,     0,     3,     3,     0,
       7,     0,     3,     1,     3,     0,     3,     0,     3,     4,
       1,     3,     0,     3,     0,     3,     4,     4,     0,     0,
       0,    16,     8,     7,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     0,    12,     4,     4,     3,     4,     3,
       2,     1,     3,     5,     1,     1,     0,     1,     1,     0,
       2,     0,     0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2597,  1079,  2528,     0,     0,     0,     0,     0,     0,
    2530,   123,    63,  1699,  1815,  1816,  1603,  1631,     2,     0,
    1079,   269,   173,     0,    75,  1640,     0,  1867,     0,     0,
    1079,   483,     0,  1861,     0,     0,  1079,  1643,  1851,   246,
     173,  2530,     0,  1125,  2338,  1737,     0,     0,     0,  1720,
       0,  2413,  1688,     0,     0,     0,     0,     3,     8,    19,
       0,    39,    24,    29,    14,    18,    13,    52,    46,    26,
      37,    10,    54,    55,    16,    43,    11,    12,    15,    35,
      42,    36,    38,    50,  1116,    22,    23,    30,    44,    59,
      20,    56,    53,    21,  1817,    25,    45,    40,    32,    60,
      33,    51,    34,    58,    28,    47,    27,     9,    17,    48,
      49,    41,    61,    31,    57,     0,   927,     0,     0,  1004,
       0,     0,     0,     0,   173,     0,   907,  2595,  2596,  2597,
    1081,  1080,     0,  2530,  1972,  1064,  1090,  2035,  2036,  2037,
    2038,  2039,  2040,  2041,  2042,  1986,  2043,  2044,  2046,  2045,
    2047,  2048,  1987,  1988,  2049,  2050,  2051,  2053,  2052,  2054,
    1989,  1990,  2055,  2056,  2057,  2058,  1991,  1992,  2059,  2061,
    2060,  1993,  2062,  2063,  2064,  2067,  2066,  2065,  1994,  2068,
    1995,  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2077,  2076,
    1996,  2078,  2079,  2080,  2081,  2082,  2083,  2085,  2084,  2086,
    2087,  2088,  1997,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
    2096,  2097,  1998,  2098,  2099,  2100,  2120,  1999,  2101,  2104,
    2103,  2102,  2105,  2106,  2107,  2109,  2108,  2110,  2111,  2000,
    2112,  2113,  2114,  2115,  2116,  2118,  2117,  2122,  2123,  2124,
    2001,  2002,  2119,  2121,  2318,  2125,  2127,  2126,  2128,  2130,
    2129,  2003,  2131,  2004,  2005,  2132,  2133,  1969,  2134,  1970,
    2135,  2137,  2138,  2139,  2144,  2006,  2136,  2140,  2141,  2142,
    2143,  2145,  2007,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2153,  2154,  2155,  2177,  2166,  2168,  2159,  2161,  2162,  2164,
    2160,  2167,  2165,  2171,  2170,  2172,  2173,  2174,  2175,  2176,
    2169,  2157,  2163,  2158,  2178,  2179,  2156,  2180,  2181,  2182,
    2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2192,  2191,
    2193,  2194,  2195,  2196,  2197,  2198,  2200,  2199,  2201,  2202,
    2203,  2205,  2204,  2207,  2208,  2008,  2206,  2209,  2210,  2211,
    2212,  2213,  2214,  2009,  2010,  2011,  2215,  2216,  2012,  2217,
    2219,  2218,  2220,  2221,  2222,  2223,  2224,  2225,  2226,  2013,
    2014,  2227,  2228,  2229,  2230,  2231,  2232,  2233,  2234,  2235,
    2236,  2237,  2238,  2239,  2240,  2242,  2241,  2243,  2244,  2245,
    2246,  2247,  2248,  2249,  2015,  2250,  2016,  2251,  2252,  2017,
    2253,  2018,  2254,  2255,  2256,  2257,  2019,  2258,  2259,  2260,
    2262,  2263,  2261,  2264,  2020,  2265,  2266,  2267,  2021,  2269,
    2268,  2270,  2022,  2272,  2273,  2023,  2271,  2025,  2274,  2275,
    2024,  2026,  2276,  2277,  2278,  2279,  2280,  2282,  2281,  2283,
    2284,  2285,  2027,  2286,  2287,  2288,  2289,  2028,  2290,  2291,
    2292,  2293,  2294,  2296,  2295,  2297,  2298,  2299,  2300,  2302,
    2304,  2303,  2301,  2305,  2306,  2307,  2308,  2311,  2312,  2313,
    2314,  2309,  2310,  2029,  2315,  2316,  2317,  2319,  2320,  2322,
    2321,  2030,  2031,  2323,  2324,  2034,  2325,  2326,  2329,  2327,
    2328,  2331,  2330,  2332,  2334,  2333,  2032,  2335,  2033,  2336,
    2337,   192,  1975,   175,  1976,  1985,     0,  2405,  2404,  1048,
    1065,  2531,  2532,   576,   857,     0,     0,   858,     0,   575,
     856,   173,  2597,   128,     0,   572,   573,     0,     0,     0,
    1713,     0,  1629,  1629,  1629,     0,     0,  1629,  1629,     0,
    1632,  1629,   173,  1629,     0,    68,  1824,   270,     0,     0,
       0,     0,     0,  1968,     0,  1646,     0,  1868,  1869,     0,
    1876,     0,  1877,  1871,  2402,     0,     0,     0,     0,     0,
     173,  1082,     0,  1697,     0,   236,   245,   247,   248,   244,
       0,  2532,  2543,  1117,  1123,  1135,     0,  1795,   248,  1035,
    1019,  1035,  1721,  1718,     0,     0,  1697,  1870,  2654,     0,
       0,     0,  2650,     0,  2655,     0,  1125,     0,     0,     1,
       5,     0,     0,  2115,  2002,  2219,  1808,  1806,  1963,     0,
     898,   928,     0,   903,     0,   901,  1981,  1980,  1979,     0,
     914,   913,   911,     0,   447,     0,     0,     0,  2606,   905,
    1062,  2529,     0,   194,     0,    77,     0,     0,     0,  2535,
       0,     0,     0,     0,   127,     0,     0,     0,   124,  1150,
    1150,  2597,  2599,  2601,   576,   574,     0,     0,     0,  1717,
    1716,  1715,     0,  1713,  2036,  1986,  2048,     0,  1936,     0,
       0,     0,  1401,     0,  1991,     0,  2062,  2064,  1996,     0,
       0,  1157,  1157,   729,     0,     0,     0,  2087,  2088,  1942,
       0,     0,     0,  1933,  1943,  2002,  2127,  2128,     0,  1935,
    2133,     0,     0,     0,     0,  2150,  1940,     0,     0,  2187,
    2189,     0,     0,  2193,  2194,  2195,  2196,  1919,  1212,     0,
     729,  1932,  1939,  2212,  1925,  2220,  2225,  2226,     0,  2235,
       0,     0,  2257,     0,  2263,  2261,  2267,     0,     0,  2293,
       0,     0,   729,  1918,  2311,  2312,  2313,  2314,     0,  1934,
    2029,  1941,     0,  2325,  1157,   729,   729,     0,     0,     0,
    2332,  2334,  2337,     0,     0,     0,  2567,  1211,     0,  1369,
       0,  1286,  1395,  1169,  1175,  1189,     0,  1204,  1222,  1223,
    1225,  1324,  1224,  1230,  1229,  1604,  1929,  1228,  1227,  1930,
    1931,  1221,  1953,  1975,  1952,     0,     0,     0,     0,     0,
       0,     0,     0,  1633,     0,     0,  1615,  1629,    70,     0,
       0,  2449,  2464,  2465,  2461,  2466,  2484,  2467,  2471,     0,
    2463,  2455,     0,  2470,     0,  2459,  2468,     0,  2453,     0,
    2469,  2474,  2485,  2457,  2462,  2440,     0,  2447,  2451,  1965,
    1510,  2416,  2417,     0,    76,  1648,  1649,  1647,  1003,     0,
    1866,     0,  1880,     0,  1077,   493,   484,     0,  1790,  1789,
       0,  1862,  2544,     0,     0,  1053,  1651,  1698,     0,  1650,
    1857,     0,  1855,  1852,  1854,   237,     0,     0,   267,  2449,
       0,  2434,     0,  2538,  2535,  2545,  2580,  2575,  2574,  2577,
    2578,  1141,  2579,  1140,  2576,  2573,  1150,  1136,  1138,  1139,
     773,     0,     0,  2358,  2359,  2200,  2220,  2360,  2309,     0,
       0,  2379,  2339,  2344,  2340,     0,  1757,     0,   773,  1803,
    1758,     0,     0,  1803,     0,  1545,  1793,  1796,     0,  2362,
    1771,   854,   853,   852,  2363,  1789,     0,  1745,  1759,     0,
    1722,  1764,     0,  2364,     0,  1792,     0,  1545,  1803,     0,
    1738,     0,     0,     0,     0,   243,  1040,  1039,  1015,  1036,
    1037,     0,     0,  1018,  1020,  1021,  1017,     0,  2667,  2414,
    1003,  1924,  1923,  1973,  2651,  1922,  2659,  2661,  2647,  2649,
    2656,  1119,     0,  2549,     6,    62,     0,     0,  1821,  2604,
    2605,  2603,   789,     0,  1157,  1982,  2598,   176,   912,     0,
     448,   176,     0,     0,     0,     0,     0,   449,   450,   382,
     916,     0,   896,   909,     0,     0,   908,  2606,     0,     0,
    1092,  1094,  1093,  1110,   196,   193,   174,     0,  1050,  1622,
    1624,  1067,  2534,     0,     0,  2536,  2540,  1210,  1209,     0,
     121,   126,     0,     0,     0,  2506,   125,  2500,  2602,  1150,
    1150,  1150,  2594,     0,  2582,  2589,  2590,  2593,  2592,  2591,
    2588,     0,  2581,  2584,  2585,  2587,  2586,  2606,  2600,     0,
     859,   859,   859,     0,  1700,  1703,  1707,  1711,  1714,     0,
       0,  1515,  1243,  1515,  1515,  1515,  1402,     0,     0,     0,
       0,     0,     0,     0,     0,  1515,     0,  1280,  1253,     0,
    1281,     0,     0,     0,  1944,     0,     0,     0,  2567,     0,
       0,     0,     0,  1374,     0,     0,     0,  2567,     0,     0,
       0,     0,     0,  1397,  1399,  1952,  1515,     0,     0,  1515,
       0,     0,     0,     0,     0,  1162,   769,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1515,  1515,     0,     0,  1515,  1294,  1946,     0,     0,     0,
    1945,     0,     0,     0,  1938,  1937,  1920,     0,  1297,  1299,
    1298,     0,  1515,  1515,     0,     0,     0,  1233,  1232,  1234,
       0,     0,     0,     0,     0,     0,  1208,  1207,  1206,  1205,
       0,     0,     0,  1213,     0,  1214,  1215,     0,  1216,  1217,
    1218,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1235,     0,     0,     0,  1921,  1333,     0,  1630,  1610,  1617,
    1612,     0,  1633,  1613,  1621,   462,   461,  1638,  1639,  1619,
    1634,  1635,     0,  1618,  2498,  1614,     0,  1605,     0,    69,
       0,  1847,     0,     0,     0,  1843,  1845,  1844,     0,     0,
    1848,     0,  1846,  1825,  1829,  1835,  1826,     0,     0,   268,
     271,   273,     0,   276,  2450,  2448,  2482,  2481,  2486,     0,
    2483,  2479,  2472,  2507,  2476,     0,  2507,  2478,  2477,  2507,
    2473,  2480,  2507,  2445,     0,  1511,  1512,     0,  2415,     0,
    1964,     0,     0,  1100,  1881,  1882,  1878,  1510,  2403,  2406,
       0,   494,     0,     0,   503,     0,     0,    65,    66,     0,
    1084,     0,  1083,  1087,     0,     0,     0,  1654,  1644,  1653,
    1436,  1858,  1859,     0,   235,   260,   255,   263,   257,   259,
     258,   264,   265,   266,   261,   256,   262,   249,     0,  2448,
       0,  2445,  2539,     0,  2541,  2558,  1124,  2546,  1147,  1126,
    1146,     0,  1137,   772,     0,   775,   777,  1673,  1674,   776,
     785,     0,   774,     0,     0,     0,  2365,     0,   781,   783,
     782,  2374,   780,     0,     0,  2349,  2370,  1799,     0,     0,
    1770,     0,   576,     0,     0,     0,     0,     0,     0,  1739,
       0,     0,   619,     0,  1763,  1546,  1797,  1798,  1803,     0,
       0,  1803,     0,  1776,  1793,     0,  1803,  1734,     0,     0,
    1726,  1731,  1727,     0,  1733,  1732,  1735,  1723,  1724,  1799,
    1750,  1777,  1793,  1762,  1769,     0,  1749,  1756,     0,  1767,
    1793,  1793,  1803,  1803,  1041,     0,  1024,  1025,     0,     0,
    1719,  1439,     0,     0,  2648,  2662,  2646,  2657,  2658,  2645,
    1120,  2550,  1118,  2551,     0,     7,     4,  1820,  1810,  1811,
    1812,  1813,  1814,  1809,  1807,  1822,  1823,   790,   789,   567,
     570,   569,     0,     0,  1984,     0,   904,     0,   436,   902,
       0,     0,   414,   393,   414,   451,     0,     0,   789,   919,
       0,     0,   906,  1063,     0,     0,   482,  1110,  1096,  1112,
       0,   197,   199,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    78,    79,   101,
    1052,  1051,     0,  1049,  1075,  1074,  1072,     0,  1073,  1071,
    1066,  1068,  1069,  2533,  2537,   577,   789,   424,     0,   385,
       0,     0,     0,     0,     0,   576,     0,     0,  2583,   110,
     860,     0,     0,     0,  1705,  1626,  1436,  1628,  1963,     0,
       0,     0,  1709,     0,     0,  1516,  1515,     0,  1380,     0,
       0,     0,     0,  1403,     0,     0,     0,     0,     0,     0,
       0,  1354,     0,  1380,  1158,     0,   730,  1304,     0,     0,
       0,     0,     0,     0,  1486,  1487,  1488,  1489,  1497,  1490,
    1491,  1492,  1499,  1504,  1493,  1494,  1500,  1501,  1502,  1495,
    1503,  1498,  1496,  1505,     0,  1485,     0,     0,  1509,  1506,
    1508,  1507,     0,  1375,  1367,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1515,     0,     0,     0,
    1515,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1316,     0,
       0,     0,     0,     0,  1515,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1276,     0,  1955,  1954,     0,
       0,     0,   822,     0,  1237,     0,  1236,  1448,     0,  2552,
    2568,     0,  2365,  1370,  1372,     0,  1160,  1159,  1161,  1172,
    1165,  1170,  1163,  1167,     0,  1219,  2042,  1173,     0,     0,
    1201,  2567,  1524,  1202,  1187,  1192,  1193,     0,  1190,  1191,
       0,  1195,     0,  1194,  1198,  1199,  1200,  1203,     0,     0,
       0,     0,  1226,  1231,  1396,  1150,  1956,     0,  1607,  1620,
    1791,  1636,  1675,     0,  1005,     0,     0,    71,    73,  1840,
    1837,  1836,  1838,  1842,  1841,  1839,     0,  1849,  2087,  2311,
    2314,   280,     0,   253,   252,   254,   277,     0,     0,  2475,
       0,  2456,     0,  2460,  2454,  2458,     0,     0,  2446,     0,
    2452,  1514,  2123,  2204,     0,  1517,  2419,  1641,  2666,     0,
    1879,     0,     0,     0,  1078,     0,  1150,   492,   491,   490,
     489,     0,   505,   487,     0,    67,     0,     0,  1863,     0,
       0,     0,     0,  1055,  1652,     0,     0,  1625,  1437,  1860,
    1856,  1853,     0,     0,     0,     0,     0,     0,     0,  2542,
    2560,  2559,  2547,  1150,  1536,  1151,  1151,  1952,  2381,     0,
    2376,  2375,     0,     0,     0,  2394,  2377,     0,     0,  2343,
    2382,  2383,  2386,     0,     0,     0,     0,     0,  2380,  2309,
    2345,  2346,     0,  2351,  2341,     0,     0,  1801,  1804,  1805,
       0,     0,  1785,  1779,  1778,  1774,  1780,  1775,  1788,  1787,
    1786,  1747,  1746,  1556,  1557,  1555,  1549,  1550,  1554,  1553,
    1742,  1794,  1784,  1782,  1772,  1803,  1783,  1781,  1728,  1729,
    1730,     0,  1545,     0,  1801,  1803,  1793,     0,  1803,  1803,
    1766,  1768,     0,  1027,  1038,  1023,  1022,  1457,  1456,     0,
    1410,     0,  1412,  1409,  1408,  1407,     0,  1456,  2652,  2660,
    2664,     0,  1545,  2557,  2555,   568,  1675,  1675,     0,  1983,
       0,     0,     0,     0,     0,     0,     0,   177,   186,     0,
       0,   391,   392,  1675,   390,   437,   438,   441,   442,   443,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   444,
    1675,  1675,   387,   415,   416,   419,   420,   421,   422,   423,
     383,     0,   388,     0,   917,  1001,  1675,  1001,     0,  1675,
    1675,  1001,  1675,     0,     0,  1675,  1675,     0,     0,  1675,
       0,     0,  1001,     0,  1675,     0,   988,     0,     0,  1675,
    1675,  1675,  1675,  1675,  1001,     0,     0,  1675,   482,  1675,
       0,     0,  1011,     0,     0,  1675,  1675,  1675,  1675,     0,
       0,  1675,     0,  1675,   935,   987,   580,   606,   607,   897,
     934,   936,   948,   478,     0,   966,   990,   991,   989,     0,
     921,   923,  2607,  2608,  2609,  1099,  1091,  1098,  1095,  1110,
    1108,  1097,   849,   848,     0,  1111,   195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1623,  1076,  1070,   122,   789,  1675,  1675,
    1675,  1675,   389,   425,   426,   429,   430,   431,   432,   435,
     433,   434,     0,     0,   401,     0,     0,  2501,     0,  2640,
       0,     0,     0,   175,   578,     0,     0,   861,     0,     0,
       0,     0,     0,  1701,     0,  1966,  1708,  1439,  1712,  1711,
       0,  1300,     0,  1347,     0,  1349,  1350,  1351,     0,     0,
       0,     0,     0,  1301,     0,  1251,  1302,  1303,     0,     0,
       0,     0,  1353,     0,   731,     0,     0,  1254,  1255,  1248,
    1240,     0,     0,  1326,     0,     0,  1256,     0,     0,     0,
       0,     0,  1327,  1398,     0,  1400,  1956,     0,  1359,  1308,
    1261,     0,  1357,     0,  1262,  1328,  1329,  1330,  1310,  1311,
       0,  1332,     0,  1312,     0,     0,  1315,     0,     0,  1264,
    1363,  1361,     0,     0,     0,     0,  1365,  1266,     0,     0,
       0,  1265,     0,     0,     0,     0,     0,     0,     0,  1268,
       0,  1249,  1362,  1364,  1318,     0,     0,     0,     0,     0,
    1277,     0,  2561,  1447,  2569,  1448,     0,     0,  2563,  2553,
    2558,  2566,  1241,     0,     0,  1957,  1166,  1171,  1164,  1168,
    2567,     0,     0,     0,     0,  1185,  1184,     0,     0,     0,
    2567,  1524,  1188,     0,     0,  1343,  1344,  1393,     0,  1611,
    1608,  1637,  1676,     0,  2499,  1007,  1006,  1616,  1005,    74,
       0,  1834,  1850,  1827,     0,   272,   281,   274,   278,   279,
     275,  2511,     0,  2510,     0,  2494,  2497,  1963,     0,     0,
       0,  2429,  2423,  2430,  2432,  2426,  2431,  2433,  2424,  2425,
    2420,  2427,  1518,  1547,     0,  1101,  1103,  1104,  1102,  1110,
       0,     0,  2409,  2410,  2408,  2407,   495,     0,  1581,  1582,
    1567,  1568,  1566,  1569,   504,  1570,  1580,     0,   516,     0,
     495,  1865,  1864,     0,  1085,  1088,  1089,  1060,  1059,  1061,
    1054,  1056,  1057,   560,  1658,     0,     0,     0,  1664,  1645,
    1655,     0,     0,   250,     0,     0,     0,     0,     0,     0,
    1145,  1439,  1596,  1142,  1130,  1547,  1537,  1129,  1152,  1148,
       0,   788,   787,   786,   784,     0,     0,     0,     0,  2388,
    2389,     0,     0,  2366,  2367,  2368,     0,  2372,  2348,  2349,
       0,  2350,     0,  2400,  2401,  2398,  2399,  2397,  2371,  1800,
       0,  1751,     0,  1773,     0,     0,  1744,     0,  1765,  1725,
    1753,  1743,  1517,  1793,  1740,  1741,     0,  1047,     0,  1043,
    1042,     0,  1016,  1029,  1456,  1439,     0,     0,  1433,  1458,
       0,  1458,  1439,  1439,     0,  1439,  1436,  1453,     0,     0,
    2663,  1538,  2556,     0,     0,   900,   180,   183,   181,     0,
     182,     0,     0,   446,   445,     0,  1791,   439,   134,   133,
     135,   136,  1564,  1565,  1561,  1562,  1560,  1563,   138,   137,
     132,   915,     0,     0,     0,  1791,   417,   394,   395,   398,
     399,   400,     0,  1002,   890,  1079,   970,     0,   652,   890,
     845,   850,   850,   968,     0,     0,  1079,     0,     0,     0,
       0,     0,  1079,     0,     0,     0,  1675,     0,   981,   930,
       0,     0,     0,     0,     0,   982,     0,     0,   931,  1675,
       0,     0,     0,     0,     0,     0,  1079,     0,     0,   480,
       0,  1079,   482,  1014,  1013,  1012,     0,  1079,  1079,     0,
       0,     0,     0,   612,   613,   611,     0,     0,   604,   581,
     789,   932,   479,   933,   651,     0,  1008,   648,   654,  1959,
       0,     0,     0,   144,  2611,     0,  1477,   198,   102,   100,
      82,  1971,    86,    88,    81,   106,  1574,  1575,  1573,  1571,
    1572,   107,    84,    85,    87,    91,    90,    92,    93,    96,
      97,    94,    89,    95,    83,    98,   108,   109,    80,     0,
       0,     0,     0,  1791,   427,     0,     0,  1675,   384,   402,
     403,   406,   407,   408,   409,   410,   413,   411,   412,     0,
    2502,  2504,     0,     0,   378,   377,     0,   139,  2634,     0,
       0,   651,   111,   478,   579,   582,   883,   885,   884,   875,
     874,   112,   115,   118,  1627,  1711,  1439,  1517,  1964,  1517,
       0,  1710,     0,     0,  1348,  1381,     0,  1404,     0,  1245,
     743,   743,   727,  1389,   723,   743,  1385,   727,  1387,     0,
       0,     0,     0,     0,  1355,  1352,     0,     0,     0,     0,
       0,  1378,     0,     0,     0,  1250,     0,  1338,  1360,  1358,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1366,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   811,   817,   820,   821,
     823,   815,     0,  1320,  1238,  1150,  2570,  2572,  1121,     0,
    2562,  2564,   892,  1371,     0,  1182,  1178,     0,  1176,  1523,
    1197,  1196,     0,     0,     0,  1186,  1151,  1334,  1150,     0,
    1394,  1958,   992,   460,   618,  1606,    72,  1830,     0,     0,
    2508,     0,  2519,     0,     0,     0,     0,     0,     0,     0,
    2418,  1548,  1685,     0,  1110,  1114,  1974,  1872,  2411,  2412,
       0,   496,   497,   499,  1151,   513,   493,     0,   485,   488,
       0,     0,  1058,  1135,     0,  1677,  1662,  1669,  1663,     0,
       0,     0,  1661,  1948,  1947,  1954,  2545,     0,  1483,     0,
       0,  2439,     0,     0,     0,  2548,  1517,  1517,  1590,     0,
       0,  1127,  1132,  1128,  1131,     0,  1149,  1156,  1155,  1949,
    1956,  2378,     0,     0,     0,     0,  2393,  2387,  2384,  2385,
       0,  2347,  2369,  2353,  2352,  2355,  2357,  1802,  1545,  1761,
    1760,  1552,  1551,  1736,  1545,  1755,  1803,     0,     0,     0,
       0,     0,  1031,     0,  2552,  1451,     0,  1435,  1434,  1459,
       0,  1439,  1458,  1458,     0,  1415,  1414,  1689,  1692,     0,
    1413,  1510,  1441,  1135,  2653,  2665,     0,   617,   616,   185,
     184,   190,   191,   464,   452,   463,   440,   131,   453,   454,
     418,     0,   396,   918,   653,   891,   953,     0,     0,     0,
     850,   647,   890,   859,   851,   890,   890,   997,   998,     0,
       0,   591,   588,   972,   600,   951,   942,   952,   963,   965,
       0,   590,   614,     0,     0,   602,     0,   937,   979,   980,
    1005,   585,     0,     0,   627,   628,   626,   608,   615,   999,
    1000,   586,   587,   974,     0,  1532,  1534,  1542,   593,   592,
       0,   589,     0,   950,   985,   958,     0,   625,   623,   620,
     622,   621,   624,   603,   595,   594,   597,   596,   599,   598,
     601,   947,     0,  1001,  1001,   967,     0,   635,   636,   638,
     639,  1962,     0,  1010,   969,     0,   640,   649,   641,     0,
       0,     0,   154,     0,     0,   920,     0,   147,   145,   156,
       0,     0,     0,  1480,     0,  1481,  1478,  1479,     0,   103,
     105,   459,   458,   457,   456,   428,     0,     0,     0,  1791,
     404,  2503,     0,     0,  2641,   381,   379,   380,     0,     0,
     200,   633,   634,   632,   631,     0,   467,     0,   465,     0,
     477,     0,  1883,   789,   583,     0,     0,     0,     0,  1517,
    1536,  1967,  1704,     0,  1278,  1405,     0,     0,   744,  1382,
     797,     0,  1391,     0,  1392,   725,   724,  1384,  1386,  1390,
    1388,  1244,  1252,  1325,  1247,  1246,     0,     0,     0,  1284,
    1306,     0,  1285,  1376,  1379,     0,     0,  1258,     0,  1260,
       0,     0,  1340,  1309,  1331,  1287,  1313,     0,  1263,  1239,
       0,  1288,     0,  1293,  1291,     0,  1267,     0,     0,  1274,
       0,  1272,     0,  1273,     0,  1275,  1317,  1319,     0,     0,
     822,   808,   809,   810,     0,   812,   814,   816,     0,     0,
    1449,  2571,  1122,     0,     0,  1373,  1174,     0,  1183,  1180,
       0,  1177,  1152,  1345,  1335,  1609,   994,   993,  1832,     0,
    1828,   289,   284,   292,   286,   288,   287,   293,   294,   295,
     296,   290,   285,   291,   283,   282,  2509,     0,  2444,  2496,
    2495,  2512,  2512,  2512,     0,  1519,     0,  1642,  1105,  1110,
    1114,     0,  1106,  1883,   500,     0,     0,     0,   520,     0,
     518,   486,  1086,  1150,  1659,  1671,     0,  1679,     0,     0,
    1656,  1666,     0,     0,     0,  1665,   482,     0,   251,     0,
    2436,  2437,  2435,  1547,  1525,     0,     0,  1602,     0,  1597,
    1143,     0,  1154,  1153,     0,  2396,  2395,  2391,  2390,  2392,
    2373,     0,     0,  1752,  1754,  1748,  1046,  1045,  1044,  1028,
       0,     0,  1033,  2558,  1510,  1443,  1439,  1411,  1439,  1422,
       0,     0,  1439,  1418,  1416,  1420,     0,  1517,     0,  1475,
    1150,  1951,  1539,  1542,   397,   955,     0,   890,   846,   847,
     859,     0,   859,   859,     0,     0,   941,     0,  1067,     0,
     946,   785,   609,   978,   977,     0,   610,     0,   939,     0,
    1543,  1544,  1535,   481,   938,   960,   944,  1849,   971,   651,
    1009,   827,   719,   668,   659,   743,   662,   661,   705,   727,
     673,   723,   721,   691,   723,   723,   698,   697,   715,   701,
     681,   797,   797,   680,   718,   797,   702,   700,   704,     0,
     706,   723,   711,   699,   703,   720,   696,   693,   717,   743,
     727,   727,   677,   716,   797,     0,   709,   743,   747,   679,
     797,   804,     0,     0,   743,   745,  1961,   155,   143,     0,
       0,   922,   924,     0,     0,   925,  2613,     0,  2615,     0,
    1113,     0,    99,     0,     0,   386,   455,   405,  2505,     0,
     211,  1150,     0,     0,   201,   203,   204,     0,     0,     0,
     578,  1885,  1884,   466,   563,   584,     0,     0,     0,  1711,
    1706,  1558,     0,  1406,     0,     0,     0,     0,   791,   802,
     800,   794,     0,   798,   799,  1383,     0,     0,  1356,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1242,
       0,  1336,     0,     0,     0,     0,     0,     0,  1271,  1269,
    1270,   806,  1322,     0,   819,   813,   811,   818,     0,  1547,
    2552,   893,  1179,     0,  1346,   996,   995,     0,     0,     0,
       0,  2517,  2517,  2517,  1684,  1683,     0,  1682,  1686,  1107,
    1115,     0,   498,   501,     0,     0,     0,   517,     0,   561,
       0,     0,     0,  1680,  1668,  2549,  1657,  1660,  1956,  1438,
    1484,  2438,  1134,     0,  1520,  1601,  1598,     0,  1591,  1593,
    1595,     0,  1950,  2354,  2356,  1030,     0,     0,  1026,  1444,
    1442,  1452,     0,  1407,  1439,  1439,     0,  1407,     0,     0,
       0,  1691,  1536,  1693,  1440,  1472,  1454,     0,  1541,     0,
       0,   954,     0,     0,     0,     0,     0,     0,   984,     0,
    1008,   943,   964,   986,     0,   747,  1079,  1533,   959,   961,
    1055,     0,   637,     0,   831,   667,   660,   678,   676,   732,
     722,     0,   732,   732,   687,   705,   682,     0,   797,   695,
     686,   707,   710,   712,   714,   732,     0,   797,   675,   674,
     684,   671,   732,   755,     0,     0,     0,     0,   751,     0,
     825,     0,     0,   758,   655,   748,   750,     0,     0,   708,
     797,   664,   805,   804,   666,   797,   804,   732,     0,   746,
     732,     0,   141,   146,   157,   158,   910,  2612,     0,  2610,
       0,  1109,  1482,   104,     0,     0,   214,   212,   213,     0,
     207,   209,   204,  2628,     0,  2635,     0,     0,  2633,   468,
     470,   478,   564,     0,     0,  1542,   888,     0,     0,     0,
    1702,  1279,   741,   739,   742,   740,   793,   792,   796,     0,
     795,   804,   728,     0,  1282,  1283,  1307,  1377,  1368,  1305,
       0,  1259,  1337,     0,     0,  1314,  1289,  1292,  1290,  1295,
    1296,     0,  1321,     0,  1142,  1142,   629,  2565,  1181,  1833,
    1831,  2520,     0,     0,  2516,  2514,     0,  2515,  2513,  2487,
       0,  2442,  2443,  2441,  2428,     0,     0,     0,  1150,   506,
       0,   523,   522,   519,  1547,  1670,  1672,  1678,  1667,     0,
    1521,  1536,   778,  1594,     0,  1144,  1032,     0,     0,  1423,
       0,  1427,  1432,  1428,     0,  1419,  1417,     0,  1558,  1476,
       0,  1547,  1542,   957,     0,   650,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   983,  1926,   973,   482,
     975,   940,     0,   945,   605,     0,   830,     0,   835,   736,
     737,   738,   688,   733,   735,     0,   690,   658,   683,   713,
     689,     0,   685,   672,   761,   762,   764,   763,   760,   770,
     753,   771,     0,     0,   765,   766,   767,   759,   749,   757,
     752,   663,   665,   669,   670,   656,     0,   657,  1960,   148,
     926,   317,  2614,  2622,     0,  2624,  2617,   129,  2632,  2642,
     211,     0,     0,   152,     0,   202,   785,   205,  2549,  1883,
       0,   473,   862,     0,   887,     0,   864,   866,  1559,   803,
     801,     0,     0,  1339,  1341,   807,     0,  1450,   630,  2493,
    2492,  2491,  2488,     0,     0,     0,     0,     0,     0,  2518,
    2522,  1681,     0,     0,     0,   514,     0,   510,   512,     0,
     548,   562,  1529,  1542,     0,  1547,     0,  1599,  1592,  1034,
    1445,     0,     0,     0,     0,     0,  1690,  1464,  1465,     0,
       0,  1470,  1474,  1455,  1540,   956,     0,     0,   862,     0,
       0,  1928,  1927,   949,  1008,     0,   828,     0,   832,   833,
     834,     0,   826,   734,     0,   894,     0,   754,   756,     0,
     150,   343,     0,   329,   315,     0,     0,     0,   319,   159,
     162,   160,     0,   161,   167,     0,   168,   169,   170,   171,
     172,   163,   341,   342,   166,   164,   165,     0,  1977,     0,
    1978,  1125,     0,     0,  2620,     0,  2616,  2545,   178,   208,
       0,     0,   144,   153,  2636,   768,   471,   469,     0,  2545,
       0,  1675,   113,   863,   879,   878,   868,  1542,     0,     0,
     116,   865,   881,   872,   119,   867,   880,   870,   726,  1257,
    1323,  2489,  2523,  2526,  2524,  2525,  2527,  2521,     0,  1436,
    1151,     0,   507,   508,     0,   526,     0,  1675,     0,     0,
    1675,  1675,  1675,  1675,   541,   549,   551,     0,  1530,  1531,
       0,  1526,  1528,  1522,  1583,   779,  1886,  2552,  1424,     0,
    1429,     0,  1421,  1460,  1460,  1471,     0,   862,   642,   864,
     866,   976,     0,   829,     0,     0,   797,     0,   797,   149,
       0,   142,     0,     0,   328,   331,     0,     0,   334,   324,
     323,   325,     0,   318,   317,   317,   371,   322,   368,   367,
     360,  2623,     0,  2549,     0,     0,     0,  2618,  2643,   210,
    1150,   156,     0,   475,   474,   877,     0,   992,   869,   886,
     889,     0,   992,   873,   992,   871,  1687,  1695,     0,  1873,
       0,   515,   514,   511,     0,   524,     0,  1675,  1675,     0,
       0,     0,     0,     0,   521,   550,  1675,  1542,     0,  1133,
       0,  1894,  1446,     0,     0,     0,  1468,  1466,   646,   645,
     643,   644,     0,   841,     0,   840,     0,   837,   836,   692,
     895,   694,   151,   344,   355,   358,   350,   330,     0,     0,
       0,   320,   317,     0,   304,   302,   303,   309,   310,   311,
     312,   313,   314,   305,   308,   306,   307,   317,     0,   219,
       0,     0,  2621,  2619,     0,  2625,     0,   188,   187,   179,
       0,   317,  2629,     0,  2637,  2549,   876,   114,   882,   117,
     120,     0,     0,   778,   502,   509,   534,   527,   530,     0,
     559,     0,     0,  1578,  1576,  1577,   555,  1579,   556,   554,
     552,   545,     0,   543,     0,  1527,  1584,     0,     0,     0,
       0,  1887,  1889,     0,  1600,  1426,  1431,     0,  1461,     0,
       0,     0,   962,   843,   844,   842,     0,     0,     0,     0,
     317,   351,     0,   326,     0,   335,     0,     0,   217,   374,
     372,   215,   362,   362,  2626,  2627,   189,  2644,     0,   158,
     178,   476,  1694,  1696,  1874,   534,     0,   532,     0,   528,
     525,   529,   557,   558,     0,   542,     0,   553,     0,     0,
       0,     0,     0,  1888,     0,     0,  1895,  1897,  1463,  1462,
    1477,     0,     0,     0,   352,   358,   348,   356,   317,     0,
       0,   316,     0,   370,   218,     0,     0,     0,   317,     0,
     361,   363,   365,     0,   140,  2638,  1900,   531,     0,   539,
     535,   537,   540,   548,   547,   544,  1586,  1892,  1893,     0,
    1890,     0,     0,  1896,     0,     0,   839,   838,     0,   349,
       0,     0,   347,   327,   332,   317,   375,   317,   229,   228,
       0,   221,   297,   369,     0,   220,  2630,   317,     0,  1886,
     533,     0,     0,   546,  1589,     0,  1587,  1891,  1899,  1898,
    1469,  1467,   353,     0,   317,     0,   317,     0,   317,     0,
       0,     0,     0,     0,   216,   317,  2639,     0,  1894,   538,
     536,  1585,     0,     0,   345,   317,   333,   338,     0,     0,
     224,   298,   299,     0,   226,  2631,     0,  1902,  1588,   317,
     317,   334,   337,   376,   373,     0,   300,   222,   223,   234,
     233,     0,  1901,     0,  1906,   317,   317,   339,   242,   240,
     317,   230,   238,   232,     0,   239,     0,   227,     0,     0,
    1913,     0,   225,   241,   301,  1904,  1905,  1903,  1908,     0,
       0,  1910,  1911,     0,  1875,   231,  1912,  1907,     0,  1914,
    1916,     0,  1909,     0,  1150,  1915,     0,  1151,  1917
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   601,  1466,    57,    58,    59,    60,    61,  1317,
      62,   808,  1249,  1767,  1768,    63,   544,    64,  1027,  1537,
    1538,  3058,  3059,  1539,    65,  2144,  3095,  4137,  3096,  4142,
    3097,  4144,  1556,   512,   513,  1987,  1988,  1052,  3079,  3045,
    3859,  3049,  3970,  4101,  4012,  2070,  3415,  3860,  3861,  3979,
     539,  2142,  1486,  4128,  1967,  4229,  1968,    66,   633,  1025,
    1510,  1511,  3433,  3434,  3687,  3435,  3679,  3680,  3681,  3682,
    4358,  4202,  4301,  4359,  4431,  4465,  4471,  4400,  4480,  4481,
    4482,  4469,   876,  4483,    67,   567,   568,   878,  1347,  1781,
    1348,    68,    69,   538,  1269,  1270,  1271,  1272,  2320,  1782,
    2315,  2316,  3214,  4401,  4467,  4486,  4203,  4204,  4108,  4205,
    3982,  4206,  4112,  4207,  3985,  4208,  4209,  4210,  4211,  4350,
    4212,  4107,  4393,  4199,  4200,  4352,  4447,  4462,  4213,  3992,
    4102,  4288,  3993,  4103,  4345,  4195,  4346,  4388,  4443,  4196,
    4289,  4391,  4292,  4214,  4220,  4360,  4215,  4221,  4216,  3997,
    4119,  4219,  4117,  4218,  4356,  4355,  4427,  2666,  3078,   620,
     621,   644,  2134,   622,  1041,   998,  1488,  2000,  2001,  2517,
    2518,  2648,  2649,  2650,  1992,  1993,  1994,  2122,  2123,  2124,
    1974,  1975,  1976,  1492,  1971,  1972,   623,   999,  1009,  1995,
    1996,  1997,  2654,  2126,  2127,  2128,  2129,  1237,  1238,  2934,
    2672,  3088,  3878,  3443,  4019,  4235,  3089,  3090,  2592,  3000,
    2080,    70,   556,   856,  1314,  2369,  1315,  2820,  2821,  2822,
    1817,  1818,  3759,  1822,  2368,  3915,  4152,  3916,  3917,  2824,
    4052,  2828,  3239,  3240,  3526,  3761,  3920,  4249,  4154,  4320,
    4247,  4316,  4248,  4318,  4412,  4370,  4371,  4164,  4262,  4263,
    4324,  4373,  4064,  4065,  4066,  2388,  2833,  3764,  3693,  2116,
    1478,  1479,   514,   515,   516,   641,  2673,  2055,  2674,  2675,
    3022,  2057,  2058,  2793,  1401,  3013,  2987,  3734,  3085,  3026,
    3027,  3028,  3029,  3030,  3036,  2951,  2527,  2528,  2597,  3039,
    3876,  3611,  3626,  3399,  3400,  3401,  3402,  3403,  3404,  3405,
    3114,  3115,  3112,  1100,  3822,  3823,  3824,  3108,  3109,  3660,
    3644,  3645,  3646,  3877,   771,  3840,  3462,  1369,  1370,  3927,
    1380,  1381,  2412,  1860,  2413,  1482,  3463,  3464,  3465,  3654,
    3169,  3731,  3175,  3176,  3177,  2756,  2757,  2758,  2759,  2760,
    2259,  3647,  3038,  3604,  3815,  3818,  3962,  4187,  2529,  2952,
    2530,  2955,   949,   517,  2531,  2532,  1570,  1571,  4022,  4030,
    4034,  4023,  4035,  4031,  4024,  4025,  4026,  4037,  4033,  2679,
    3694,  3695,  2944,  3185,  3964,    71,  1498,   992,  1001,   997,
    1017,   628,  1499,  1010,  2071,  2603,  3666,   610,  2059,  3596,
    3328,  3600,  2060,  2966,  2061,  3315,  3581,  2062,  3345,  3598,
    3812,  2967,  2968,  2063,  2064,  2065,  3327,  3337,  3954,  3195,
    3196,  3197,  2533,   125,  2307,  3034,  2576,    72,  1444,    73,
     963,   964,   965,  2462,  2463,  2902,  3292,  3558,   958,   959,
     960,  1933,  2460,    74,   636,  1543,    75,  1325,  2380,  2381,
    2382,    76,  1018,    77,    78,   637,  1550,  1551,  1552,    79,
    1310,   132,    80,   864,  1320,  1322,  1323,    81,   632,  1019,
    1020,  1021,  1022,  2076,    82,  1809,  2345,  2346,  2347,  2348,
    1507,  2605,  1508,  1509,  2085,  3232,    83,    84,   598,  2267,
     573,   885,   574,   575,  1854,  2403,  3735,   896,   897,   898,
    2861,  1359,  1360,  1361,  2408,  2866,  1097,   772,   773,   774,
     775,  1191,  1192,  3648,   776,  1201,  1728,   777,   778,   779,
     780,   781,   782,  1755,  3141,  3142,  3481,  2294,  2295,  2296,
     783,  2181,  3126,  2195,   784,  1184,  1713,  1644,  3473,  3133,
    1587,  2164,  2709,  2789,  2261,  1122,  1123,  1087,  2171,  1593,
    1940,  1941,  1942,  1943,  1944,  3569,  3568,  3570,  3931,  3780,
    3933,  3784,  2473,  1837,  1838,  1945,  1946,  2903,  3778,  4077,
    2262,  2263,  2264,  3499,  2904,  3296,  2922,  2923,  3791,  2464,
    1947,  2910,  4176,  3940,  3941,  4281,  4280,  3942,  3789,  3790,
    3574,  3575,  3054,  3055,  3056,  2847,  1634,  1635,  1642,  1297,
    1298,  1588,  2343,  2809,  3771,  3924,  2285,  3544,  3922,  4071,
    2068,  2995,  2996,  2405,  2406,  2926,  3312,  3342,  1404,  3736,
    2811,  1906,  1907,  3700,  4470,  2935,  2621,  4256,  2365,  2366,
    4169,  4328,  4415,  4416,  3267,  3268,  3548,  3549,  2407,  2858,
    3269,  3772,  4076,    85,   521,    86,  1765,  2300,  2792,  1246,
    2312,  1029,  1327,  1574,  1575,   796,   534,  1239,  1240,  1241,
      87,   545,  2344,    88,   563,  1835,   848,   868,  1328,  1329,
    2389,  2834,  2841,  2390,  2846,  3535,  2836,  3244,  3245,  2302,
    2303,  2837,  3247,  3532,  3516,  3517,  3227,  3756,    89,   586,
    3307,  2917,  2918,  4146,  4147,   869,    90,   520,  1074,  2687,
    1580,  2152,  1075,  1076,  2155,   662,   663,    91,   967,   583,
    1426,  1427,  1428,  1922,    92,   577,   950,  2888,  2894,  1901,
     860,  1242,  1408,   953,  1409,  1887,  2441,  1390,    93,   988,
     987,  1473,    94,   606,  1474,    95,   809,  1263,  1777,  2797,
    3200,  3507,  1264,  1265,  2313,    96,   564,   873,   874,  1332,
    1840,    97,   558,   861,  1828,    98,   549,    99,   100,   852,
    3233,  4243,  4366,   553,  1811,  1306,  3444,  4171,  4271,  4272,
    4274,  4336,  4337,  4409,  4474,  4497,  4490,  4500,  4501,  4504,
    4509,  4510,   786,   974,   787,  3806,   788,   789,   790,  2842,
    2843,  3313,   791,  2844,   792,  2945,  1030,  1577,   542,   492,
    2610,   617,   975,  2817,   794,  3999,   995,  1045,   494,   495,
     101,   576,   912,  1385,  1375,  1384,  1880,  2429,  1884,  2431,
    2432,  3281,  2884,  3282,  2885,   954,  1876,  1881,  2886,  1885,
     915,  1869,  1870,  1871,  1872,  2877,  1866,  2438,   102,   853,
     499,  1308,  1309,  2354,   103,   585,   104,  1299,  1805,  1806,
    2340,  2808,  2341,   105,   881,   106,   835,  1799,   836,  1275,
     837,   838,  1289,  1283,  1292,  1286,  3903,  3748,  3749,  2328,
    1245,  1046,  1047,  1791,  2322,  2323,  3511,  3751,  3218,  3909,
    3910,   107,   133,   502,   639,  1036,  1353,   108,   109,   110,
     111,  1356,  1461,  2399,  1462,  2268,  1463,  1464,  1954,  1852,
    1709,  1710,  3183,  1181,  1182,  2271,  2765,  2766,   899,   648,
    1062,  1054,   126,   127,   128,   651,   652,   129,  1015,  1016,
    2604,  3051,  3417,  3669,  3670,  3865,  4007,  4003,  4004,  4001,
    4006,  1056,  3872,  4308,  4435,  1057,  1058,  3080,  3874,  4132,
    4310,  4407,  1059,  2663,  3430,  4008,  4231,   112,   976,   595,
    1459,  1454,  1456,  1950,  2480,   113,   114
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3902
static const int yypact[] =
{
    4552,  1985,  1239, -3902,  -141,   208, 47787,   664,   667,   667,
     402,  2479, -3902, -3902, -3902, -3902, -3902,  3072, -3902, 47787,
    1239,   925, -3902, 23776, -3902, -3902,   783,   184,   162,   667,
    1239, -3902, 47787, -3902,   728,  1348,  1239, -3902, -3902, 41637,
   -3902,   402, 47787, -3902, -3902, -3902, 41637,  1268,   715,   694,
     946, -3902, -3902, 47787,  2687,  -153,  1532,  1323, -3902, -3902,
    1195, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, 24394, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902,  1575, 47787,  1625, 47787, -3902,
    1605, 47787, 39792, 47787, -3902,  1018,  1663, -3902, -3902,  1691,
   -3902, -3902,   667,   402, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902,  1193, -3902, -3902,  1277, -3902, -3902, -3902,
   -3902, -3902,  1832,  1649, -3902,  1658, 39792, -3902, 47787, -3902,
   -3902, -3902,   935, -3902,  1357, -3902,  1387,  1714,  1735,  1744,
    1281, 11223,  1723,  1723,  1723, 47787,  1776,  1723,  1723, 47787,
   -3902,  1723, -3902,  1723,   667, -3902, -3902, -3902,  1868,  3522,
   47787,  1636,   214,   612, 39792,  1398, 47787, -3902, -3902, 11223,
   -3902,  1796, -3902, -3902, -3902,   667,  2004,  1882,   245, 47787,
   -3902, -3902,   667,   913,  1360,  1430, -3902, -3902,  1593, -3902,
    3887,   167, -3902, -3902, -3902,  2305, 26248,  5485,  1593,   -61,
    -127,   -61, -3902, -3902, 47787,   667,  1809, -3902, -3902,   169,
     169,   169, -3902,   169, -3902,   169, -3902,  -153,  1446, -3902,
   -3902,  1478, 47787,  1027,  1957,  1274, -3902, -3902,  1484,   -15,
   -3902,  1543, 36717, -3902, 47787, -3902, -3902, -3902, -3902,  1762,
   -3902, -3902, -3902,  1389, -3902, 36717, 23776, 47787,  1626, -3902,
   -3902, -3902, 23776,  1507, 47787, -3902, 23776, 23776,   846,  1307,
    1445, 47787, 47787,  1954, -3902,  2154, 36717,  1751, -3902,   585,
     -78,  1691,  2165, -3902,  1649, -3902, 47787, 47787, 47787, -3902,
   -3902, -3902, 42252,  1281,  1553,  1572,  1582, 15675, -3902,  1598,
    1600,  1611, 11223,  1623,  1627,  1644,  1650,  1652,  1668,  1671,
    1673,  1680,  1680,  1697,  1700,  1712,  1716,  -175,  1728, -3902,
    1734,  1739,  1743, -3902, -3902,  1766,  1773,  1782,  1795, -3902,
    1811,  1819,  1827, 11859,  1831,  1835, -3902, 20677,  1842,  1853,
    1861,  1866,  1887,  1908,  1910,  1917,  1922, -3902, -3902, 11223,
    1697, -3902, -3902,  1944, -3902,  1950,  1975,  1977,  1982,  1990,
    1994,  2009,  2025,  2041,  2043,  2052,  2054,  2067,  2073,  2081,
    2094,  2103,  1697, -3902,   835,  2106,  2110,  1088,  2116, -3902,
    2119, -3902,   269,  2123,  1680,  1697,  1697,  2128,  2133,  2137,
    2138,  2139,  2148, 15675, 15675, 15675, 11223, -3902, 47787, -3902,
   47787, -3902,  1604,  3172, -3902,  2939, 15675,   965, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902,  1602,  1722, -3902, -3902, -3902,
   -3902, -3902, -3902,  2159,  1681,  2130, 47787, 47787, 47787,  1972,
   47787, 47787, 39792,   989, 47787, 36717, -3902,  1723,  1793,  3820,
   29333,  2008,  1937,  1724, -3902, -3902, -3902, -3902, -3902,  2038,
   -3902, -3902,  1963, -3902,  2042, -3902, -3902,   170, -3902,   105,
   -3902, -3902, -3902, -3902, -3902, -3902,  2080,  1931, -3902, -3902,
     121, -3902, -3902, 47787, -3902, -3902, -3902, -3902,  2413,  2299,
    1604,  2745,   904, 23776, -3902,  1462, -3902,  -185, -3902, -3902,
    2521, -3902, -3902, 36717, 23776, -3902, -3902, -3902, 21297, -3902,
   -3902,  2753, -3902,  2169, -3902, -3902,  1722,  3361, -3902,  2008,
    2440, -3902,  2449,  2352,  1307,  2239, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  2191,  2305, -3902, -3902,
      56,  2342,  2182,   408,   465, 34257,   991,   512,   740, 26865,
   34872,  2183, -3902, -3902, -3902,   435, -3902,  2667, -3902,     5,
   -3902,  2201,  1429,     5, 37332,  2570,   203, -3902,   350, -3902,
    2648, -3902, -3902, -3902, -3902,  2318,  2304, -3902, -3902,   351,
    1643, -3902,  2681, -3902,    93, -3902,  2326,  2570,     5,   203,
   -3902,  2575,  2698,   588,  -145, -3902, -3902, -3902, -3902,  2222,
   -3902,   558,  2773, -3902,  2229, -3902, -3902, 23776, -3902, -3902,
    2413, -3902, -3902, -3902,  2234, -3902,  2504,  2341, -3902, -3902,
      54, -3902,  2243,  1192,  2725, -3902, 39792,  1517, 37947, -3902,
   -3902, -3902,  2762,  2781,  1680,  2251, -3902, -3902, -3902,  2886,
   -3902, -3902,  2270,  2801,  2801,  2801,  2907, -3902, -3902, -3902,
    2283,  2531, -3902, -3902,  2451,  2316, -3902,  1626, 23776,  2682,
    2289, -3902, -3902,  2537, 11223, -3902, -3902,  4669,   240, -3902,
   -3902,   191, -3902,  2871,  2495, -3902, -3902, -3902, -3902,  2764,
   -3902, -3902,  2886,  2822,  2801,  2713,  2302, -3902, -3902, -3902,
   -3902, -3902, -3902,  1402, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902,  1522, -3902, -3902, -3902, -3902, -3902,  1626, -3902, 23776,
   -3902, -3902, -3902, 23776, -3902,  2303, -3902,  2301, -3902, 11223,
   11223,   321,  2869,  2932,  2932,  2932,  1604,  2338, 11223, 11223,
   11223, 11223, 11223, 11223, 11223,   325,  2314, -3902, -3902,   -79,
   -3902,  2319, 11223, 11223, -3902, 11223, 11223, 25012, -3902,  3695,
   11223, 11223,   302,  2814, 11223, 11223, 11223, 11223,  2896, 11223,
   11223, 25012,  2944,  2324, -3902,  2322,   340, 11223, 11223,   344,
   11223, 11223, 11223, 11223, 11223, -3902, -3902, 11223, 11223, 11223,
   11223, 15675, 11223, 11223, 11223, 11223, 11223, 11223,  2332, 11223,
    2932,  2932, 11223, 11223,  1388, -3902, -3902, 11223,  2298,  2298,
   -3902, 11223,  8043, 11223, -3902, -3902, -3902,  2335, -3902, -3902,
   -3902, 25012,  2932,  2932, 11223, 11223, 11223,  2869,  2869,  2869,
     217,  2336,  -110, 11223, 27482,  2333, -3902, -3902, -3902, -3902,
   11223, 11223, 11223, -3902, 15675, -3902, -3902,  1293, -3902, -3902,
   -3902, 12495, 15675, 15675,  2327, 15675, 15675, 15675, 15675, 15675,
    2700, 15675, 15675, 16311, 16947, 15675, 15675, 15675, 15675,   889,
    2869, 39792, 15675, 11223, -3902, -3902, 47787, -3902, -3902, -3902,
    2334, 23776,   989, -3902, -3902, -3902, -3902, -3902, -3902,  2343,
     989, -3902,  2817, -3902, -3902,  2344, 23776, -3902,  2337, -3902,
    2704, -3902,  2707,  2709,  2716, -3902, -3902, -3902,  2945,  2719,
   -3902,  2721, -3902, -3902,  2347, -3902, -3902, 17583, 39792, -3902,
    2364, -3902,  2842, -3902, -3902, -3902, -3902, -3902, -3902,  2469,
   -3902, -3902, -3902,  2376, -3902, 36717,  2376, -3902, -3902,  2376,
   -3902, -3902,  2376,   853,  2852, -3902, -3902, 47787, -3902, 48402,
   -3902, 21297,  -141, -3902, -3902, -3902,  2750,   200,  2391, -3902,
   23776, -3902,    77,    77,  2640,   190, 39792, -3902, -3902,   173,
    2393,  2472,  2399, -3902,  2477, 23776, 23776, -3902, -3902, -3902,
    2649, -3902,  3025,  1360, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,  2404,  2890,  2409,
   36717,   997, -3902, 47787, -3902,  1476, -3902, -3902, -3902,  2414,
   -3902, 11223, -3902, -3902, 47787, -3902, -3902, -3902, -3902, -3902,
    2980, 11223, -3902, 36717,   902,   936,  1097,   435, -3902, -3902,
   -3902, -3902, -3902, 47787, 42867,  2416, -3902,  2815,  -141, 11223,
   -3902,  2432,  1649, 47787, 47787, 47787, 23776, 47787, 23776, -3902,
    1162,  1162, -3902, 35487, -3902, -3902, -3902, -3902,     5, 47787,
   47787,     5, 36717, -3902,   203, 47787,     5, -3902,  2819,  2524,
   -3902, -3902, -3902,  2889, -3902, -3902,  2880,  2436, -3902,  2815,
   -3902, -3902,   203, -3902, -3902, 23776, -3902, -3902,   203, -3902,
     203,   203,     5,     5,  2489,   -61, -3902, -3902,  2584,  -127,
   -3902,   591,   169,  2685, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902,    89, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,   115, -3902,
   -3902, -3902,  1670,  2950, -3902, 39792,  2405,  -107,  1380,  2405,
    1355,  -141,   820, -3902,   820, -3902, 36717,  2913,  3091,  2722,
     229, 23776, -3902,  2455, 43482, 23776, -3902, -3902, -3902,  1674,
    2460,  2462,  1604,  2937,  2941,  2946,  2951,  2953,  2965,  2966,
    2967,  2968,  2972,  2973,  2975,  2979,  2983,  2985,  2987,  2988,
    2989,  2992,  2994,  2997,  2998,  2999,  3004,  2503, -3902, -3902,
   -3902, -3902, 23776, -3902, -3902, -3902, -3902,  2578, -3902, -3902,
   -3902, -3902,  2868, -3902, -3902, -3902,   165,  1727,  2551,  2579,
     114, 36717,  2976, 47787, 47787,  1649, 47787, 47787, -3902, -3902,
     529,  2803,  2805,  2806,  2533, -3902,  2649, -3902,   984, 47787,
    2990, 31182, -3902,   407,   384, -3902,  2932,  2543, -3902,  2549,
    2550,  2552, 11223,    99,  1583,   412,  1231,  1334,   556,   478,
     154, -3902,  2555,  2563, -3902,  2558, -3902, -3902,   491,   499,
     566,  1065,  2559,  2560, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902,  3003, -3902,   647,  1408, -3902, -3902,
   -3902, -3902,  2561, -3902, -3902,  1134,   665,   750,   315,  2571,
     806,  1423,  1434,  2564, 25012, 47787,  2932,  2565,  1217,  1255,
    2932,  2567,   832,  1257,  1477,  1530,  1567,  1291,  1313,   855,
    1612,  2271,  1315,   868,   872,  1319,   903,   908, -3902,  1336,
    2572,  2574,   912,   298,  2932,  2576,   323,  2577,  2580,  1340,
    9315,  9951, 10587,   174,   937, -3902,  2582, -3902,  2322,  2583,
    2587,   360,   293,  1455, -3902, 11223, -3902, -3902,   662,  1212,
    2626,   260,  1097, -3902,  2731, 47787,  2006,   183, -3902, -3902,
   -3902, -3902, -3902, -3902,   916, -3902,  2596, -3902,  2601,  2149,
    2604, 11223,   974,  2604,  3256,   891,   891, 15675,  3411,  2104,
   11859,  1159, 11859,  1159,  2604,  2604,  2604, -3902, 15675,  2603,
   15675, 15675, -3902,  2869,  1604,  2605,   474, 47787, -3902,  2343,
     -58, -3902,   435, 36717,    96, 23776, 39792,  2607, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  3950, 23776,  2665,  2690,
    2692, -3902, 29950, -3902, -3902, -3902, -3902, 29950,    -2, -3902,
   47787, -3902,  2691, -3902, -3902, -3902, 21915, 21915, -3902, 21915,
   -3902, -3902,   812,  1004,  3465,  2635, -3902, -3902, -3902, 23776,
   -3902,  3017,   -31, 23776,  2455,  2618, -3902, -3902, -3902, -3902,
   -3902,  1834,  2724, -3902,  2620, -3902, 11223,  -141, -3902, 36717,
   36717, 23776, 23776,   725, -3902,  1305,  2627, -3902, -3902, -3902,
   -3902, -3902,  3361, 17583,  3058,  3070, 21915, 21915, 21915, -3902,
   -3902, -3902, -3902, -3902,   113,  1604, -3902,  2624, -3902, 38562,
   -3902,  1604,   435,  2637,  2647, -3902, -3902,  3005,   702, -3902,
    2650,  2651, -3902,  2641,  2643,  2655, 44097, 11223, -3902,   936,
   -3902, -3902,   435, -3902, -3902,  8679,  -141,  3096, -3902,  1604,
    2656, 47787, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,   594, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902,     5, -3902, -3902, -3902, -3902,
   -3902,  2875,  2570,  1643,  3096,     5,   203, 23776,     5,     5,
   -3902, -3902,  1619,  2710, -3902, -3902, -3902, -3902, -3902, 47787,
    2623,  2813, -3902,  2662, -3902, -3902, 23776, -3902,  2664, -3902,
    3117,  3260,  2570, -3902, -3902, -3902,   435,   435,  2969, -3902,
    -141,  2802,  2804,  2807,  2810,  2816,  2844, -3902, -3902,  -141,
    -141, -3902, -3902,   435, -3902,  1974, -3902, -3902, -3902, -3902,
    -141,  -141,  -141,  -141,  2356,  -141,  -141,  1628, -3902, -3902,
     435,   435, -3902,   930, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902,   193, -3902,  2925, -3902,  2677,   435,  3252,  2940,   435,
     435,  3252,   435,  2947,  2957,   435,   435,  2770,  3198,   435,
    3082,  2798,  2471,  3088,   435,  2962, -3902,  2811,  3218,   435,
     435,   435,   435,   435,  3252,  2970,  3305,   435, -3902,   435,
    2974,  2971,   185,  2981,  2984,   435,   435,   435,   435,   222,
   47787,   435,  2986,   435, -3902, -3902,  5277, -3902, -3902, -3902,
   -3902, -3902, -3902,   -74, 22536, -3902, -3902, -3902, -3902,   473,
   -3902,  2923, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902,  2730, -3902, -3902, 11223,  2738,  2356,
    -141,  2356,  2356,  -141,  -141,  1036,  -141,  2356,  2356,  -141,
    -141,  -141,  -141,  -141,  -141,  -141,  2356,  2356,  -141,  1382,
    -141,  2356,  4669, -3902, -3902, -3902, -3902,   171,   435,   435,
     435,   435, -3902,  2516, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, 39792,  3097,  2530,   599, 39792, -3902, 47787, -3902,
    1669, 47787,  2743,  -143,  5023,   954,   954, -3902, 23776, 23776,
   23776, 47787,  2787, -3902, 31182, -3902, -3902,   591, -3902,  2740,
   13131, -3902,  2748, -3902, 11223, -3902, -3902, -3902,  1562, 11223,
   11223,  3231,   381, -3902, 39177, -3902, -3902, -3902, 11223, 39177,
     381, 11223, -3902,  2751, -3902,  3147,  3150, -3902, -3902, -3902,
   -3902, 11223, 11223, -3902, 11223, 11223, -3902, 11223, 11223, 11223,
   11223, 11223, -3902, -3902, 15675, -3902,  2747,  2755, -3902, -3902,
   -3902,  2758, -3902, 11223, -3902, -3902, -3902, -3902, -3902, -3902,
   11223, -3902, 11223, -3902, 11223, 11223, -3902, 11223, 11223, -3902,
   -3902, -3902, 13767, 11223, 11223,  2759, -3902, -3902, 11223, 11223,
   11223, -3902, 11223,  1587, 11223,  1763, 11223,  1993, 11223, -3902,
   11223, -3902, -3902, -3902, -3902, 11223,  1556,  1834,  2356,  2760,
   -3902,  1631, -3902, -3902,  1869, -3902,   662,  2763, -3902, -3902,
    1476, -3902, -3902, 39792, 11223, -3902, -3902, -3902, -3902, -3902,
   -3902, 15675,   368,  2765, 15675, -3902,  3256,  2896,  2896,  2158,
   11223,   974,  3256, 11223,  2766,  2768, -3902, 11223, 47787, -3902,
   -3902, -3902, -3902, 39792, -3902, -3902, -3902, -3902,    96, -3902,
    2337, -3902,  2455, -3902,  3240,  2774, -3902, -3902, -3902, -3902,
   -3902, -3902,  1640, -3902, 36717,  2782, -3902,  2784,  2846,  2855,
    2872, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902,  2570,  1305, -3902,  2792, -3902, -3902,  2537,
    2882,  2812,  3160, -3902, -3902, -3902, 47787, 15675, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,  3387,  2800,  2825,
   47787,  1604, -3902,  2893, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,   721, -3902, -3902,  2827,  2827, 19439, -3902, -3902,
   -3902, 47787,  3295, -3902,  3090, 36717,  3274,  3276,  3279,   731,
   -3902,   356, -3902,   182,  3234,  2570, -3902,  3283, 40407, -3902,
   31797, -3902, -3902, -3902, -3902,   902,  2928,  2929,  1547, -3902,
   -3902,  3236,  3065, -3902, -3902, -3902,   435,  1604, -3902,  2416,
    8679,  2850, 28099, -3902, 15675,  1734, -3902,  1604, -3902, -3902,
    1036, -3902,   271, -3902, 35487, 35487, -3902,  3125, -3902, -3902,
   -3902, -3902,  2635,   203, -3902, -3902,  3329, -3902,  3334, -3902,
    2858,  3337, -3902,  3105, -3902,   833,  3247,  3250, -3902,  3122,
      62,  3122,   833,   833, 25012,   591,  2649, -3902,  2356,  3178,
   -3902, -3902, -3902, 38562, 36102, -3902, -3902, -3902, -3902,  3395,
   -3902,  3396,   849, -3902, -3902,  2105,  1116, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,  1355,  2105,  2105,   357, -3902,   134, -3902, -3902,
   -3902, -3902,  3335, -3902, 25630,  1239, -3902,   186, -3902, 25630,
   -3902,  1674,  1674, -3902, 44712, 25630,  1239,  1036,  2356, 25630,
    2356, 45327,  1239,  -141,  -141,  2188,   435,  2356, -3902, -3902,
    3253, 47787,  3258, 25630, 25630, -3902, 39792, 47787, -3902,   435,
     155,  2356, 45942,  1036,  1036, 25630,  1239, 25012,  2068, -3902,
    -141,  1239, -3902, -3902, -3902, -3902, 23776,  1239,  1239,  2993,
    2526,  2705,  2820, -3902, -3902, -3902,  2356, 45327, -3902, -3902,
    5688, -3902, -3902, -3902, 18821, 47787,  1205,   181, -3902,  2873,
      32,   320,  2956,  1781,  2876,  2891, 46557,  1604,  2356, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  -141,
    1834,  2105,  2105,  2483, -3902,  3151,  3314,   435, -3902,  2528,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  2978,
   -3902,  3502,  3081,  2901, -3902, -3902,   102, -3902, -3902,  1001,
   23776, 18203, -3902,  3149, -3902,  3385, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902,  2897,   591,  2635,  1211,  2635,
    2915, -3902, 11859,  1498, -3902,  1604, 11223,  1604,  1685, -3902,
    2912,  2912,  2918, -3902,  2921,  2912,  3307,  2918,  3309,  2924,
    2927,  1528,  2938,  2943,  1602, -3902, 11223, 11223,  1537,   380,
    1637,   587,   950,   988,   453, -3902,  1653,  3210, -3902, -3902,
    1662,  1666,  1687,  1689,  1006,  1695,  1753, 11859,  1706,   303,
     457, -3902,  1708,  1039,  1041,  1718, 11223,  1730, 11223,  1778,
   11223,  1780,  1788,  1797,  2926,  2926,   158, -3902,  2922, -3902,
   -3902, -3902,  2936, -3902, -3902,  2191,  1869, -3902, -3902,  2948,
   -3902, -3902,  2934,  1604,  2949, -3902, -3902, 11223, -3902,   965,
   -3902, -3902, 15675,   489,  2952, -3902,  1604, -3902, -3902,  2958,
    1602, -3902,  1096, -3902, -3902, -3902, -3902,   249,  3216, 29950,
   -3902, 47787,  -183,  2959, 32412, 36717, 36717, 36717,  2961, 11223,
   -3902, -3902,  3195, 23776, -3902,  3349, -3902, -3902, -3902, -3902,
    2963,  2960, -3902, -3902, -3902,  3256,  3311,  3191, -3902, -3902,
    2991, 36717, -3902,  2305, 25012, -3902,  2995, -3902,  2995,   982,
    3002,  1758, -3902, -3902, -3902,  2955,  2239,  1767, -3902, 17583,
    3392,  2302, 36717, 36717, 36717, -3902,  2635,  2635,   864,  3000,
    3350, -3902, -3902, -3902, -3902, 47172, -3902, -3902, -3902, -3902,
     911, -3902,  3006,  3007,   106,  3181, -3902, -3902, -3902, -3902,
    8679, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  2570, -3902,
   -3902, -3902, -3902, -3902,  2570, -3902,     5,  -141,  -141,  1437,
    -141,  3443,  3478,  -187,  1212, -3902,  1816, -3902, -3902, -3902,
    3353,   833,  3122,  3122,  3355,  3251,   845,  3008, -3902,   435,
   -3902,  2272, -3902,  2305, -3902, -3902, 11223, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902,   193, -3902, -3902, -3902, -3902, -3902,  3011,  3354,  3368,
    1674, -3902, 25630, -3902, -3902, 25630, 25630, -3902, -3902,   818,
   45327, -3902, -3902, -3902, -3902, -3902, -3902,  3013, -3902, -3902,
    1834, -3902, -3902, 36102,  -141, -3902, 25630,  3013, -3902, -3902,
     445, -3902,  3015,  -141, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, 45327,  3014, -3902,  1385, -3902, -3902,
    2004, -3902, 45327, -3902, -3902, -3902, 45327, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,  3018,  2639,  1720, -3902,  3012,  3019, -3902, -3902,
   -3902, -3902, 47787, -3902, -3902, 23776, -3902, -3902, -3902,  4244,
   47787,  3212, -3902, 11223, 11223,  3255, 47787,  3257, -3902,  3552,
   47787,  3612, 45327, -3902,  3021, -3902,  3023, -3902,  1785, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  3020, 47787,  2105,  2331,
   -3902, -3902,  -141,  1001, -3902, -3902, -3902, -3902,  3266,  3285,
   47787, -3902, -3902, -3902, -3902,  3165, -3902, 23776, -3902,  3197,
   -3902,  3028,   687,  5798, -3902,  3033,  3036,  3043, 31182,  2635,
    3301, -3902, -3902,  2896, -3902,  1604, 11223,   890, -3902, -3902,
     241,  3318, -3902,  1149, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  3046,  2896,  2896, -3902,
   -3902, 11223, -3902,  3213, -3902, 11223, 11223, -3902, 11223, -3902,
     990,  3048,  3074, -3902, -3902, -3902, -3902, 11223, -3902, -3902,
    2896, -3902, 11223, -3902, -3902, 11223, -3902, 11223, 11223, -3902,
    1803, -3902,  1814, -3902,  1838, -3902, -3902, -3902,  1834,  3054,
    3426, -3902, -3902, -3902,  1834,  3237, -3902, -3902,  1834,  2356,
    2414, -3902, -3902,  -110, 47787, -3902, -3902,  1790, -3902, -3902,
   11223, -3902, 40407, -3902, -3902, -3902,  3420,  3685, -3902,  3280,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,  3495, -3902, -3902,
   -3902,  -105,  -105,  -105, 14403,  1604,  3555, -3902, -3902, -3902,
    3349,  3449, -3902,    79, -3902, 47787,  3068,   857, -3902,  1798,
   -3902, -3902, -3902,  2191,  3075, -3902,   435, 14403,  2827,  3197,
   -3902, -3902,   982, 25012, 31797, -3902, -3902, 47787, -3902, 36717,
    2302,  2302,  2302,  2570,  3504,  2882,  2882, -3902, 28716, -3902,
   -3902,  3232, -3902, -3902, 33027, -3902, -3902, -3902, -3902, -3902,
   -3902, 28099, 44097, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
    -141,  3554,  3322,  1476,  2353, -3902,   591, -3902,   833, -3902,
    3466,  3468,   833, -3902, -3902, -3902, 25012,  2635, 14403, -3902,
    2191,  1604,  3084,  1385, -3902,  -100, 11223, 25630, -3902, -3902,
   -3902,  3087, -3902, -3902,  3600,  3601, -3902, 25630,  2868, 47787,
   -3902,  2980, -3902, -3902, -3902,  3184, -3902,  4244, -3902, 25012,
   -3902, -3902, -3902, -3902, -3902, 47787, -3902, 23776, -3902, 18821,
   -3902,  3095, -3902,  2912,  2912,  2912, -3902, -3902, -3902,  2918,
   -3902,  2921,  3332, -3902,  2921,  2921, -3902, -3902, -3902, -3902,
   -3902,   241,  1242, -3902, -3902,   241, -3902, -3902, -3902,   135,
    1033,  2921, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  2912,
    2918,  2918, -3902, -3902,   241,  2912, -3902,  2912,  2240, -3902,
     307,   140,  2912,  2912,  2912,  3100,  3094, -3902,  1604,  2896,
    3649, -3902, -3902,  3248,  -141,  3595, -3902,  1801, -3902,  3106,
   -3902, 46557, -3902,  2356,  1355, -3902, -3902, -3902, -3902,  3254,
      24, -3902,  3278,  3112,  3116, -3902, -3902,  -141,  3113,  3118,
    5277, -3902, -3902, -3902,  3733, -3902, 47787, 47787, 47787,  2740,
   -3902,  3491,  1366,  1604,  3127,  3128,  3129,  3130,  3724,   206,
   -3902,  3730, 39177, -3902, -3902, -3902,  3132,  1807, -3902,  3133,
    3136,  1867,   169,  3137,  1880,  1057,  1815,  3444,  3523, -3902,
    3363, -3902,  1901,  1482,  1903,  1933,  1959,  1968, -3902, -3902,
   -3902, -3902, -3902,  3145, -3902, -3902,   195, -3902,  3146,   187,
    1212, -3902, -3902,  1822, -3902, -3902, -3902,  3607,  3509,  3412,
    1012,  3175,  3175,  3175,  1734,  1604,  1836, -3902, -3902, -3902,
   -3902,  3551, -3902, -3902,  3157,  3163, 47787, -3902,  3191,  2414,
   25012, 14403,  3164,  3166, -3902,  1192, -3902, -3902,  3159, -3902,
   -3902,  2302, -3902,  3759,  3598, -3902, -3902, 39792,  3179, -3902,
   -3902,  3486, -3902, -3902, -3902, -3902,  -141,  3660, -3902, -3902,
   -3902,  2662,  3209,  3228,   833,   833,  3249,  3229, 11223, 11223,
    3192, -3902,  3301, -3902, -3902,   785,  2414, 11223, -3902,  1834,
    3191, -3902,  1978,  3193,  3196, 47787,  3199,  3200, -3902,  3461,
    1205, -3902, -3902, -3902, 23776,  2240,  1239, -3902, -3902,  3013,
     721,  3190, -3902, 47787,  3534, -3902, -3902, -3902, -3902,  -135,
   -3902,  3211,  -135,  -135, -3902,  2342, -3902,  3230,   241, -3902,
   -3902,  3242, -3902, -3902, -3902,  -135,  3214,   241, -3902, -3902,
   -3902, -3902,  -135, -3902, 39792,  1747,  -141,  3427, -3902,  3245,
   -3902,  3722,  1263,  3596, -3902,  2240, -3902,  3597,  3488, -3902,
     241, -3902, -3902,  3816, -3902,   241,  3816,  -135,  3493, -3902,
    -135, 47787, -3902, -3902, -3902, -3902, -3902, -3902, 47787, -3902,
    1005, -3902, -3902, -3902,  1839,  -141, -3902, -3902, -3902,  3222,
    3217, -3902, -3902, -3902,   320, -3902, 47787,  4244, -3902, -3902,
   -3902,  3149, -3902,  1131,  1850,  1385,  3224,  1854,  1856, 35487,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, 39177,
   -3902,  3816, -3902,  3497, -3902, -3902, -3902, -3902, -3902, -3902,
   11223, -3902, -3902,  3528,  3689, -3902, -3902, -3902, -3902, -3902,
   -3902,  3227, -3902,  2356,   182,   182, -3902, -3902, -3902, -3902,
   -3902, -3902,  3315,  3316, -3902, -3902,  3317, -3902, -3902,   108,
    1614, -3902, -3902, -3902, -3902, 14403,  3609,  3327, -3902, -3902,
   47787,  3275, -3902, -3902,   187, -3902, -3902, -3902, -3902, 11223,
   -3902,  3301,  2188, -3902, 28716, -3902, -3902,  -141,  -110, -3902,
    3281, -3902, -3902, -3902,  3284,  1604,  1604, 47787,  3491, -3902,
     841,   187,  1385, -3902,  1870, -3902, 47787, 47787,  1874, 47787,
   47787,  2665,  2690,  2692,  1382,  1382, -3902, -3902, -3902, -3902,
   -3902, -3902,  3633, -3902, -3902,  1881, -3902,   836,  3507, -3902,
   -3902, -3902, -3902,  -135, -3902,   169, -3902, -3902, -3902, -3902,
   -3902,   169, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,  3520,  3293, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  3244, -3902, -3902,  3362,
   -3902, 53937, -3902, -3902,  1227,  3286, -3902, -3902, -3902, -3902,
    1167, 47787, 23776,  3255,  3438, -3902,  2980, -3902,  1192,   687,
    3197, -3902,   274, 47787, -3902,  3530,   137,  1109, -3902, -3902,
   -3902,  3264,  1991, -3902, -3902, -3902,  3265, -3902, -3902, -3902,
   -3902, -3902, -3902,   332,  3519,  2356,  2356,  2356,  2356,  1614,
   -3902, -3902,  3321, 23776, 15675,  3377,  1897, -3902, -3902,  1651,
    2914, -3902,  1390,  1385, 11223,  2570, 36102, -3902, -3902, -3902,
   -3902, 11223,  3277, 11223,  3282,  1930, -3902, -3902, -3902,  1674,
    1674, -3902,   841, -3902, -3902, -3902,  1941,  1962,   274,  1983,
    1986, -3902, -3902, -3902,  1205,  3289, -3902, 47787, -3902, -3902,
   -3902,   104, -3902, -3902,  1995, -3902,  2016, -3902, -3902, 11223,
    3763,  3310, 47787,   787, -3902, 55167, 55167, 47787, -3902, -3902,
   -3902, -3902,  5046, -3902, -3902,   -10, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,  3885, -3902,  3288,
   -3902, -3902,  1227,  3290, -3902,  1108, -3902,  2239, -3902, -3902,
    4244,  3734,  1781, -3902, -3902, -3902, -3902, -3902,  3292,  2239,
    -141,   435, -3902,   274, -3902, -3902, -3902,  1385,  3302,  3533,
   -3902,   137, -3902, -3902, -3902,  1109, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, 25012,  2649,
   -3902,  1834, -3902, -3902, 47787, -3902,  3394,   435,  3793,  3801,
     435,   435,   435,   435,  3312,  2914, -3902,  3791, -3902, -3902,
   11223, -3902, -3902,  1604,  3544, -3902,  3881,  1212,  1604, 47787,
    1604, 47787, -3902,  3765,  3765, -3902,  3529,   274, -3902,   137,
    1109, -3902,  3191, -3902,   840,   840,   241,   169,   241,  1604,
   11223, -3902, 11223,  3347, -3902, -3902,  3766, 47787, -3902, -3902,
   -3902, -3902, 11223, -3902, 53937, 53937, -3902, -3902, -3902, -3902,
    3927, -3902,  3326,  1192,  3899,  3590,  3903, -3902,  3641, -3902,
   -3902,  3552,  4244, -3902, -3902, -3902,  2356,  1096, -3902, -3902,
   -3902,  1642,  1096, -3902,  1096, -3902,  3333, -3902,   435, -3902,
    3336, -3902,  3377, -3902,  3338, -3902,  -141,   435,   435,  1733,
    1733,  1834, 39792,  3446, -3902, -3902,   435,  1385,  3954, -3902,
     910,  3706, -3902,  2029,  2034,  1051, -3902, -3902, -3902, -3902,
   -3902, -3902,  2036, -3902,  3972, -3902,   848,  3614,  3616, -3902,
   -3902, -3902,  1604,  1604, -3902,   228, -3902, -3902,  3748,  3835,
   11223,  1604, 50862,  3351, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, 54552, 11223, -3902,
     -10,  3885, -3902, -3902,  3615, -3902,  3618, -3902, -3902, -3902,
    3857, 53937, -3902,  3853, -3902,  1192, -3902, -3902, -3902, -3902,
   -3902, 25012, 14403,  2188, -3902, -3902,  3366, -3902, -3902,   -42,
   -3902,  -141,  -141, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,  2045, -3902, 39792, -3902, -3902,  3953,  3955,  3851,
    3956,   910, -3902,  1161, -3902, -3902, -3902,  3957, -3902,  3960,
    3378,  3379, -3902, -3902, -3902, -3902,  3425,  3886,  3410, 11223,
   53937, -3902,  3872, -3902,  3802,  1604,  3745,  3389, -3902,  3390,
    1604,  3911, 55167, 55167, -3902, -3902, -3902, -3902,  3897, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  2047, -3902, 15039, -3902,
   -3902, -3902, -3902, -3902, 39792, -3902,  3446, -3902,  3413,   169,
     169,  3997,   169, -3902,  3999,  4000,  1161, -3902, -3902, -3902,
   46557, 46557,   840,   840, -3902,   236, -3902,  1604, 51477,  3996,
   47787, -3902,  3500, -3902, -3902, 11223,  3916, 41022, 52092,  3421,
   -3902, -3902, -3902,  3599, -3902,  3641,  3602, -3902,  3366, -3902,
    3429, -3902,  3256,  2914, -3902, -3902,  3704, -3902, -3902,   169,
   -3902,   169,   169, -3902,  3432,  2056, -3902, -3902, 11223, -3902,
    3915,  3518, -3902,  3435, -3902, 53937,  1604, 53937, -3902, -3902,
    3863,  3437,  1895, -3902,  3434, -3902, -3902, 53937,  3854,  3881,
   -3902, 15039,  3445, -3902, -3902,  3448,  3442, -3902, -3902, -3902,
   -3902, -3902,  1604,  4024, 53937, 47787, 49017,  3928, 52707,  3894,
   47787,  4244,  3895,  3900, -3902, 53937, -3902,  4038,  3706, -3902,
   -3902, -3902,  3704,  3540, -3902, 49632, -3902,  2206,  3651,  3483,
   -3902, -3902,  3971,  2841, -3902, -3902,   169,  3871, -3902, 53937,
   53937, -3902, -3902, -3902, -3902, 33642, -3902, -3902, -3902, -3902,
   -3902,   731, -3902,  3735,  3467, 50247, 53322, -3902, -3902, -3902,
   30567, -3902, -3902, -3902,  3907, -3902, 11223, -3902,    67, 20057,
    3620, 33642, -3902, -3902,  1604, -3902, -3902, -3902, -3902, 39792,
    2058, -3902, -3902, 25012, -3902, -3902, -3902, -3902, 23156,  3469,
   -3902,   435, -3902, 25012, -3902, -3902, 14403, -3902, -3902
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3902, -3902, -3902, -3902, -3902,   118, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902,  1792, -3902, -3902, -3902, -3902, -3902,
    1992, -3902,   688, -1821, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902,   686,  1601,  3462, -3902,   431,
   -3902,   107, -3902, -3902, -3902, -2932,    -9,  -193, -3902, -3902,
     519,    17,  3120,  -186, -3844, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902,   441,   439, -3902, -3902,   263, -3902,
   -3902, -1826, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  -357,
    -318,  2088, -3902, -3902, -3902,  4090, -3902,  3560, -3902, -1756,
    2297, -3902, -3902, -3902, -3902, -3902,  2355, -1688, -3902, -3902,
   -3902,  1346, -3902, -3902, -3902, -3902,    63,   286, -3902,   289,
   -3902,   306, -3902,   312, -3902,   313,   327,   328,   331, -3902,
     333, -3902, -3902,  -302, -3902, -3902, -3902, -3902,   335, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  -159, -3902, -3902,     3,
   -3902, -3902,  -152,   336, -3902,  -101,   342, -3902,   343, -3902,
     -16, -3902,   -14, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  3167, -3902, -3902, -3902,
   -2270, -3902, -3902, -2408,  2714, -3902, -1776, -3902, -3902, -1883,
   -3902, -3902, -1755,   985, -3902, -3902,  1396,   782, -3902, -1413,
   -1875, -1852, -3902, -3902, -3902, -2051, -2034, -1412, -1315, -2316,
   -3902, -3902, -3902,   337, -3902, -3902, -2592,  2144,  2712, -3902,
   -1992, -3902, -3902,  1215, -3902, -3902,  1391,  1841, -3902,   983,
    2906, -1239, -3902, -3902, -3902, -3902, -3902, -3902,   168,   309,
      73, -3902, -3317,   699, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3901, -3902, -3902, -3902,  -180, -3902, -3902,   -92,
   -3902, -3902,  -137, -3902,   172, -2318, -3902, -3902, -3902, -3902,
    2686, -1332, -3902,  3741, -3902,  -559,   798,  2203, -2212, -1427,
   -3902,  -907,  -901, -2506, -3902, -3902, -3902, -3365,  1189,  1592,
   -3902,   915,  2204, -1921, -3902,  1672, -3902, -3902,   940, -3902,
   -2089, -3902, -3902, -3902,   898, -3902,   899, -3902, -3902, -3902,
   -1346,   867, -2580,  -339, -1507, -3902,   451, -1917, -2543, -3902,
     680, -3902,   631, -2990, -3343, -3902,  -566, -2120, -2423,    36,
   -3902, -3902,   648, -3156,  1806, -3902, -3902, -3902, -3206, -3263,
    1526, -3902, -3902,  1111, -3902, -2740,  1106, -3902, -3902, -3902,
    1120, -3902,   205, -3902, -3902, -3902, -3902, -2881, -3902, -3902,
   -1495, -2054, -3902, -3902,  4281,  4284, -1029, -2697, -3601,   207,
     209, -3902, -3902, -3902,  2728,  -930,   278,   267,   272,  2161,
    -795,   422, -2409, -3902,   477, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,  2247,  -540, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -2432, -2434, -3902, -3902,  1721, -3902, -3902, -3902, -2048,
   -1449, -1447, -1879,   615, -2152, -2689, -3902, -3902, -3902, -3902,
   -3902, -3902,  2863, -3902, -3902, -3902, -3902, -3902,  3736, -3902,
    2874, -3902, -3902, -3902, -3902, -3902, -3902, -3902,   714,  1938,
   -3902, -3902, -3902, -3902, -3902, -3902,   994,  2771, -3902, -3902,
   -3902,     2, -3902, -3902, -3902, -3902,  2493, -3902, -3902, -3902,
   -3902,  2821, -3902, -3902, -3902, -3902, -3902, -3902,  1512, -3902,
    1979, -3902, -1463, -3902, -3902,  1100,  -984,  1928,  3739,  2065,
   -3902, -3902,  -592, -3902, -3902, -3902, -1669, -2464, -3902,  3436,
   -1482, -2626,  2484,  -642, -1841,  1140,  -425,  3757, -3902, -1141,
   -1110, -3902, -3902,  -639, -3902, -3902, -3902,  -612, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  1550,
   -3902, -3902, -3902, -3902, -1204, -3902, -3902, -3902, -3902, -3902,
    1571, -3902,  2160, -3902,  -487, -3902,  3220, -3902, -3902, -3902,
   -2351, -1981,  1871,  1046, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -1570, -3902, -2393, -3902, -3902, -3902, -3902,
   -3902,  2078, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -1695,
   -3902, -2035,   261, -3902,   405, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902,     8,   928,     9, -3515, -1090,  1199, -3902, -3902,
   -1278,  3267, -2343, -3902, -3902, -3902,  2061, -3902, -3902, -3902,
   -3902, -3902,  1016, -2958, -1400, -3902, -3902, -3183,  -906, -2287,
    -890, -3902, -2377,   571, -1853, -1802,  -752,   212, -1452, -3902,
   -3902, -3902, -3902,   -82, -3902, -3902, -3902,   592,  1961, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
    -547,  -807, -3902, -3902,  2216,  1241, -3902,  3141, -3902,  -990,
    3388, -3902, -3902,  3393, -3902, -3902, -3902, -3902,  3073,  3050,
    2033, -3902, -3902, -2300, -3902, -3902,  1996, -3902,   851,  -885,
   -1823,  1136, -3902, -3902,  1132, -3246, -3902, -3902,  3398, -3902,
   -3902, -3902,  1080, -3902,   146,  3803,  3401, -3902, -3902, -3902,
   -3902, -3902, -3902,  2818, -1061,  3727, -3902, -3902, -3902, -3902,
   -3902, -3902,  2468, -3902, -3902, -3902, -3902, -3902, -3902,  3001,
    3815,  -575, -1260, -3902,  -747,  2964,  2470,  -875, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902,  2622,  1054, -3902, -3902, -3902,  3071, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902,  1170,    -4, -3902,   136,
     -32, -3902,    72, -3902, -3902, -3902, -3902, -3902,   -98, -3902,
   -3902,   -99, -3902,  -976, -1376,   775, -1243, -2043, -3902,  1160,
    3055, -3294,  -682, -1113, -1134, -1978,    47, -3902, -3902,  3038,
    1837,   117,   258,  -525,    -6, -2965,  -104,  -573, -3902, -2809,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902, -3902,  1988, -3902,
   -3902, -3902,  1137, -3902,  3839, -3902,  2711,  1143,  3846, -3902,
   -1339,  2553,  2011,  2010, -3902, -3902,  2015, -2038, -3902, -3902,
     128, -3902,  2621, -3902, -3902, -3902, -3902, -3902, -3902, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,  3085,  3865,  3558,
   -3902,  3144, -3902, -3902, -3902, -3902, -3902,   537, -3902,   847,
   -3902, -2103,  2883,   897, -3902,  1645,  -476,  -745, -3902, -3902,
     534, -3902, -3902,  1417,  3874,  3563, -3902, -3902, -3902, -3902,
   -3902, -2781,  -880, -3902, -3406, -2826, -1700, -3902, -3902, -2193,
   -3059, -3902, -3902, -1036, -3902, -3902, -3902, -3902, -1934, -3902,
   -3902, -3902,    97,  3936,  3938, -3902, -3902,  -191, -3902,   -48,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902,   449,   784, -3902,
   -3902,  3805, -3902, -3902, -3902, -3902,  3806, -3902, -3902, -3902,
   -3902, -3902,  3807, -3902, -3902, -3902, -3902, -3902,  1638, -3902,
   -3902, -3902, -3902, -3902, -3902, -3902, -3902
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2607
static const yytype_int16 yytable[] =
{
     493,  1039,   952,  1468,   981,  1357,  2153,  1053,  1061,  2269,
     910,   948,  1475,   535,  2084,  2409,  1582,   543,   619,  2364,
    1371,  1374,   536,   491,  1784,  1124,   557,  1908,  1649,  1812,
    1386,  1671,   555,   569,   785,  1405,   572,  1697,   562,   996,
     569,  1433,  1572,  1573,  2081,  1882,  2569,   587,  1399,  2066,
    2981,  2067,  1011,  1719,  2710,  1082,  2810,  1405,  1696,  2712,
    1727,  2928,  3573,  1783,  1952,  3255,  2635,  2891,  2892,  2840,
     541,  2056,  1613,  1434,  1820,  1977,  1978,  2771,  3295,  2915,
    1998,  3092,  1998,  2655,  2526,  1480,  2598,  2393,   608,  1028,
    1031,  1481,  1729,  1730,  2314,  1069,  1733,  1734,  1735,  1736,
    2656,  1738,  1739,  1741,  1743,  1744,  1745,  1746,  1747,  2895,
     611,  2459,   493,  3411,  2906,   493,   618,   624,  2863,  2977,
    2953,   135,  2916,  2982,  3500,  3902,  2520,  3119,  2535,  3768,
    3578,  2508,  2539,  2483,  2484,   613,  1219,   500,   615,  3180,
    1295,   607,  3451,  2554,  2125,  2130,  1955,  2305,  1815,  2521,
    2495,  1177,  1178,  1179,  1915,  2565,  2795,   554,  3110,  1990,
    1450,  2135,  3117,   561,  1220,  3614,  3619,  2513,  2514,  3620,
    1186,  1187,  1925,  1979,  3652,  3593,  2689,  1999,  3171,  1999,
    1928,  1929,  3277,  2534,   638,  2404,  2537,  2538,  3630,  2540,
    1186,  1187,  2543,  2544,  3651,  3621,  2547,  2938,  2939,  1186,
    1187,  2556,  1435,  1826,  2573,   971,  2560,  2561,  2562,  2563,
    2564,  1290,  4020, -1991,  2568,  3171,  2570,  2516,  1990,  1295,
    2497,  2802,  2579,  2580,  2581,  2582,   629,  3707,  2586,  3075,
    2588,  4094,  1244,  1186,  1187,  1287,  2609,  1477,  2612,  2613,
    2644,  3070,  2131,  2947,  2623,  2624,  2169,  2942,  2947,  1544,
    1761,  2351,  2477,  2632,  2633,  3676,  3321,  1098,  2637,  2652,
     630, -2490,  3458,  3794,  3677,   918,   901,   547,  -899,  1388,
     550,  4114,  3935,  4319, -1513,  3459,  1186,  1187,  1296,   858,
     841,  1605,  2653,  3792,  4228,  3766,  3172,  1477,  3579,  3460,
    1321,   961,  2851,  1477,  3839,  2639,  2640,  2641,  2642,  1235,
     918,   901,  3441,  1457,  2401,  1164,   989,  1430,  2669,  1186,
    1187,  2911,  2256,  2038,  1186,  1187,  1969,   596,  -565,  1186,
    1187,   653,  2912,  3172,  -566,  3063,  3064,  1050,  3458,  1168,
    2767,  1186,  1187,  1585,  4495,  3076,  2984,  1585,  3510,  1186,
    1187,  3459,  2574,  3043,  3100,  4317,  3102,  4088,  4321,  4020,
    2402,  3819,  1585,  2072,  1403,  3460,  1585,  1296,  2583,  2318,
    1707,  2041,   134,  1973,  1545,  2248,   918,   901,  1546,  3243,
    2859,   956,  1104,  2948,  1442,  4290,  1186,  1187,  2401,  1547,
     972,  1136,  1990,  4290,  1186,  1187,  3041,  2352,  4021,   551,
    3852,  3293,  2882,  3854,  1406,  3742,  1186,  1187,  1823,  3921,
    1186,  1187,   643,  1155,  3678,  2762,   134,  1562,  1563,  1564,
    2985,  1638,  3828,  1540,  1639,  2700,  1169,  1170,  1410,  1415,
    2857,  3832,  1973,  1186,  1187,  1612,  3943,  3217,  1186,  1187,
    4115,  2889,  1014,  3042,  3494,   136,  2914,  3198,  3496,  1124,
     844,  2701,  1824,  1407,  3851,  1991,  3294,  3820,  3890,  3853,
     957,  1561,  1403,  1443,  1316,  2761,  2860,  1105,  1586,  3310,
    2319,  1068,  1601,  3094,  1951,   945,  1970,  4410,  2073,  1186,
    1187,  1503,  4016,  1186,  1187,  3923,  1948,  1656,  2956,   597,
    1165,  1660, -1513,   962,  1051,  3044,  4179,  3821,  1951,  2233,
    2702,  3152,  1877,  2703,  1186,  1187,  2305,   634,  2856,  3967,
     618,  2704,   624,  1458,  1991,  1186,  1187,  1186,  1187,  3911,
    1548,  2986,  3884,  3263,  3264,  1186,  1187,  2913,  3299,   799,
    3442,  4228,  1708,   624, -2606,  4021,  4496,  2553,  1188,  1561,
     990,  1189,  3580,  1910,   839, -1991,  1913,  2426,   618,  3250,
     849,  1917,  2584,  3320,  2306,  1236,  3322,  3323,  1188,   859,
    3331,  1189,  2600,   862,  1606,  2257,   991,  2959,  1724,   570,
    2590,  2963,  1977,  1978,  4173, -2130,  4174,  1930,  1931,  1484,
     911,  1480,  1186,  1187,  1953,  2979,  2980,  1481,   968,  3743,
    3003,  1998,  1186,  1187,  2353,  1785,  1973,  2993,  2519,  2949,
    4315,  1188,  1367,  1732,  1189,  1049,   985,   548,  2655,  4116,
    1784,  1055,  1063,  1596,  1597,  1549,   618,  3035,  1000,  3944,
    1753,  3173,  1431,  1389,  3788,  2656,  2598,  3529, -1513,   618,
     608,   493, -2152,  3584,  1637,  2924,   608,  2286,  1026,  2056,
     608,   608,   842,  1651,  1188,  1040,  1000,  1189,  2289,  1783,
     618,  2292,  2520,   625,  1013,  1664,  1665,  1666,  3173,  1480,
    1070,  1071,  1072,  1670,  1541,  1481,  1077,  -206,  1288,  1438,
    1979,  3427,   807,  1186,  1187,  2521,  2452,  1188,  1991, -2270,
    1189,  3314,  1188,  1012,  3737,  1189,  3278,  1188,  1999,  1023,
    1189,  1186,  1187,   854,  3576,  2962,  3077,  2964,  4095,  1188,
     865,  1927,  1189,  2598,  2975,  2283, -1991,  1188,  1234,  1764,
    1189,  1125,  3221,  3222,  3223,  3099,  2170,  1291,  2988,  1816,
    2125,  2130,  1792,   969,  1235,  2999,   973,  4223, -2490,  3930,
    4015,  2651,  2657,  2974,  2136,   883,  2705,  3015,  3017,  3019,
    1542,  1827,  3622,  3020,  1188,  2113,  2983,  1189,  2864,  2940,
    4072,  2936,  1188,  2575,  2179,  1189, -2490,  4029,  1067,  3260,
    3261,  3262,  3426,  -899,  1188,  3060,  3450,  1189,  1188, -1513,
    3065,  1189,  1183,  1814,  1185,  2950,  1186,  1187,  2941,  2905,
    2301,  3439,  3107,  1190,  2652,  4182,  4167,  1845,  1833,  3608,
     552,  1188,  3708,  3174,  1189,  1955,  1188,  3116,  2180,  1189,
    1228,   493,  1230,  1190,  1000,   493,   618,  2653,   493,   618,
    1862,  1372,  1190,  -565,  1273,  1377,  1382,  2249,  2131,  -566,
    3628,  3629,  3607,  3925,  1229, -1513,  1166,  3461,  1233,  2658,
    1402,  1243,  1186,  1187,  3068,  1542,  1937,  1188,  3334,  4311,
    1189,  1188,  3181,  1891,  1189,  4194,  1190,  1300,  3062,  1914,
    -472,  2145,  3280,  4344,  4139,  1990,  3627,   608,  1186,  1187,
    1704,  1705,  1188,  1640,  3632,  1189,  1641,   618,   608,  3199,
    3746,  3657,   608,  1188,  2146,  1188,  1189,  2706,  1189,  1411,
    1416,  1186,  1187,  1188,  1542,  2890,  1189,  3300,  3301,  1190,
     945,  3445,  1467,  3461,  1186,  1187,  2815, -2130,  1186,  1187,
    4189,  4183,  4191,  2306,  2377,  3592,  3319,  2272,  2377,   618,
    1307,  3808,  1032,   618,   618,  3563,  2921,  3649,  3583,  3567,
    3441,  1324,  1190,  3599,  1368,  1330,  1957,  1190,   618,  1186,
    1187,  1748,  1190,  2003,  1186,  1187,  1446,  2258,  1186,  1187,
    1188,  2840,  2234,  1189,  1190,  2707,  3153,  1266,  2601,  3107,
    1188,  4013,  1190,  1189, -2152,  3192,   115,  3562,  1704,  2199,
    3398,  3566,  3536,  1186,  1187,  1990,  2237,  2238,  2444,  3324,
    1236,   608,  1951,  2708,  3572, -2421,  1186,  1187,   496,  1502,
    4284, -1473,  2205,  2931,  1318, -1791,  3542,  2415,  4105,  1190,
     618, -1963,  1476,  3236,  4265,  1304, -2342,  1190,  1938,  2659,
    1050, -2270,  1939,  2254,  2255,  1439,  4313,  2430,  3333,  1190,
    2676,  2776,  2777,  1190,  1186,  1187,  2141,  3265, -1473,  3454,
    4109,  4110,   608,  3130,  3131,   501,  2448,  2161,  2655,  1568,
    4129,  1188,  1186,  1187,  1189,   537,  1190,  3937,  3958,  1203,
     646,  1190,  1405,  3477,  1221,  2656,  2954,  2954,   866,  1188,
    2446,  2160,  1189,  1221,  1224,  2173,  2482,  1796, -2130,  1973,
    2451,   805,  4000,  2454,  2455,  1186,  1187,  1186,  1187,   117,
    4267,  1937,  1405,   608,  3938,  3524,  2520,  1578,  1908,  1908,
    2419,  4268,  1190,  1186,  1187,  3742,  1190, -2421,  3288,   863,
    1714,  1186,  1187,  1977,  1978, -1791,  3137,  3138,  2932,  2521,
    3154,  3155,  2276,  3258,  2727,  1014,  2145,  1190,  2691,  3879,
    3559,  1125,  2526,  1998,  2519, -2152,  2297,  2006,  1190,  3525,
    1190,  2314,  2178,  2293,  2298,  1125,  1569,  1752,  1190,  2146,
    1576,  3081,  3189,  3190,  1188,  2185,  1440,  1189,  3442,  1749,
    2829,  1991,  2265,  2186,  1334,  2378,  2284,  4106,  2291,  2378,
    2775,  2066,  4234,  2067, -1791,  2554,  2660,  1051,  1367,  1441,
    1186,  1187, -2270,  1750, -1818,  2616,  3541, -2422, -2342,  1973,
    4124,  1785,  2677,  2056,  1786,  1698,  4000,  4000,  3330,  3455,
    4125,  3781,  3782,  1447,  2357,  1190,   546,  1235,   618,  1373,
    1188,  1979,  1867,  1189,  4020,  1190,  1305, -2606,  2470,  2177,
    2304,  1846,   559,  2896,  2652,   867,  4184,  2780,  2781,  2187,
    1999,    43,  1033,   581,  2269,   497,  1188,  4285,   498,  1189,
    1480,  3304,  1825,  3032,  4188,   618,  1481,  2653,  2308,  2617,
    1756,  1223,  3959,  1938,  1206,   608,  4127,  1939,  2445,  1188,
    2125,  2130,  1189,  1186,  1187,   582,  2651,  2657,  4134,  3082,
     608,  1991,  1188,  3266,  2774,  1189,  1188,  2825,  3595,  1189,
    3456,  4172,   843,  1697,  2784,  4277,  2373,  2374,  1797,  3743,
   -1818,  1125,   618,  3458,  3539,  4091,  1190,  1863,  3454, -2422,
    4517,  1186,  1187,  1186,  1187,  2277,  3459,  1188,  1758,   618,
    1189,  2192,  1188,  4269,  1190,  1189,  1188,  1235,  4185,  1189,
    3460,  1801,  1864,  1804,  2266,   608,  3325,  1203,  1873,  2197,
    4278,   918,  3615,  1937,   608,  4000,  4000,  1186,  1187,  2379,
     618,  1188,   647,  2379,  1189,  2618,  1751,  2420,  4186,   608,
     608,  3134,  3888,  3960,  1188,  -472,  3498,  1189,  2131,  1186,
    1187,  1186,  1187,  3478,  2658,  1186,  1187,  4361,  4361,   584,
    1697,  1222,  3711,   945,   618,  1973,  1235,  1849,  1330,  2598,
    1222,  3230,  1186,  1187,  1868,  1857,  1186,  1187,  1858,  1542,
    4021,  2919,  1188,    55,  3744,  1189,  3491,   618,  1874,  1190,
    2031,  2598,  2761,  1330, -1473,  3881,  2761,  1878,   911,  4126,
    1188,  1959,  1156,  1189,  2198,  3844,  3033,   493,   493,   493,
     608,   493,   608,  4000,  1798,  1003,  2619,  1909,  3676,  3845,
    1585, -1819,  1847,  1911,   493,  3340,   618,  3677,  4000,   493,
    1892,  1893,  1894,  1188,  1896,  1188,  1189,  2678,  1189,  1808,
   -2421,  3083,  4000,  1236,  1042,  1190,  4279,  1912,  3455,   608,
    3939,  1188,  1916,  1697,  1189,  3305,  3605,  3606,  1898,  1188,
    2201,  4452,  1189,  1895,  3116,  1897,  1004,  3116,  3116,  1865,
   -2421,  1190,  2383,   945,  2997,  2954,  4270, -2554,   571,  3457,
    1980,  4386,  4387,  1301,  3116,  1938,  2213,  1157, -1818,  1720,
    1368,  1186,  1187,  1235,  1190,  3863,   600, -2554,  3631,   618,
    2278,  4000,  1926,  3650,  3653,  3655,  3656,  1190,  1850,  2220,
     618,  1190,  1206,  4000,  4000,   608,  2279, -1818,  2077,   608,
    1899,   689,  2224,  4075,   659,  1888,  2225, -1819,  1188,  3467,
     130,  1189,   945,  3341,  1186,  1187,  1213,  1214,  1215,  1216,
    1217,  1218,  1190,   845,  3745,  1684,  3084,  1190,  2519,  2553,
    1005,  1190,   599,  1236,  1392, -1791,   608,  2227,  1798,  4000,
    3746,  2880,  2228,  2297,  1186,  1187,  2232,  3678,  2074,  4000,
     631,  3274,  2079,  1186,  1187,   618,  1190,   493,   493,   626,
    2143,   493,  4018,   660,  2515,   694,  1565, -2554,  1981,  1190,
    3060,  2250,  1875,  1077, -1711,  2159,  2385,  2386,  1186,  1187,
    2139,  2140,  1232,  3846,  3135,  1451,  4000, -2554,  4000,  3889,
    2754,  1188,  1236,  1393,  1189,   602,  1566,   131,  4000,  1186,
    1187,  2383,  2172,  1186,  1187,  2620,  1784,  1190,  1989,  1973,
     846, -1818, -2422,  1851,  3249,  4000,  2755,  4000, -1711,  4000,
    1186,  1187,  3136,  1394,  2154,  1190,  4000,  3101,  3747,  1188,
    3623,  1188,  1189,  3624,  1189,  1160,  4000,  3864,  4074,   945,
    3147,  3188, -2422,  3309,    13,  1783,  1037,  1038,  1125,  2206,
    4000,  4000,  1721,  1186,  1187,  1417,  2651,  2657,  1190, -1818,
    1190,   706,  2309,  1034,   870,  1188,  4000,  4000,  1189,  1186,
    1187,  4000,  2779,  3157,  4334,  3158,  1190,  2664,  1186,  1187,
     847,  1900,  1186,  1187,  1190,  1418,  1565,  1188,  2887,  1188,
    1189,  3720,  1189,  1188,  2714,   661,  1189,  3863,  2188,  2665,
    1697,  1186,  1187,  1186,  1187,  1186,  1187,  4335,  2721,  2275,
    1188,  1186,  1187,  1189,  1188, -1819,  1567,  1189,  3457,  1236,
    1161,  3246,  1186,  1187,  1186,  1187,  1519,  1520,  1311,   918,
     901,  1312,   609,  1419,  1186,  1187,  1982,  1235,  1420,  1956,
    1035,  2736,   722,  1006, -1819,  1983,  1186,  1187,  3506,  3505,
      25,  2299,  1984,  1190,  2658,  2414,   579,   618,  4327,   608,
     618,  3951,  3952,  3880,   797,   798,  2815,  2196,   801,   802,
    1355,   608,   804,   871,   806,  2383,  1273,  3793,  2746,  1186,
    1187,  1273,   612,  2384,  2321,  2961,  1215,  1216,  1217,  1218,
    2327,  2327,  2523,  2327,  1186,  1187,  1186,  1187,  1037,  1038,
    2269, -1711,  2118,   608,  1186,  1187,  1007,   608,  1008,   614,
    2790,  2991,  2992,  1186,  1187,   117,  3904,  3953,  3461,  1186,
    1187,  2174,  1082,   618,   618,   608,   608,   627,   580,  1188,
    1186,  1187,  1189,   634,  1395,   635,  1190,  1125,  3616,  3396,
    2327,  2327,  2327,  2326,  2326, -1711,  2326,  1985,   872,   638,
    2209,  2690,  2358,   618,  1186,  1187,  2349,  1722, -1819,  4002,
    1307,   257,   642,   259,  2175,  1223,   910,  1535,  1536,  3835,
     911,   640,  1188,  1723,  1190,  1189,  1190,  1313,  1324,  2376,
    3896,   886, -1791,  1186,  1187,  2443,   497,  1421,  2210,   498,
    2214,  4055,  3836,  2326,  2326,  2326,  1186,  1187,   654,  2385,
    2386,  2082,  1188,   945,   645,  1189, -1819,  2550,  1519,  1520,
    1190,  1188,  4056,  2466,  1189,  3047,  2359,  1186,  1187,  1186,
    1187,   608,  3905,  3906,  2218,   803,  2083,  3907,  3908,  3837,
    3048,   509,  1190,  2465,  1190,   560,  1188,  2387,  1190,  1189,
     608,   656,  1986,  1882,  2372,   795,  2219,  2082,  2223,  1186,
    1187,   751,  2226,  2358,  2748,  1190,  1973,  1188,    37,  1190,
    1189,  1188,   657,  1422,  1189,  2874,  1357,  2176,  1223,  2229,
    1396,   658,  2083,  2241,  2453,  1186,  1187,  4432,  1188,  2973,
     800,  1189,  3283,  1236,  1186,  1187,  2875,    43,  3284,  1493,
    1494,  1397,  2200,  2476,  1186,  1187,   115,  4433,  1405,  3701,
     810,  4068,  4069,  2439,  1405,   840,   887,  1186,  1187,  1186,
    1187,  1188,  4253,  3452,  1189,  3609,  3560,  2359,  3612,  3613,
    2876,  3285,  1186,  1187,  4070,   875,  1423,  1188,  2645,  1559,
    1189,  1398,  2661,   851,  3308,  3625,  1188,  3469,  3470,  1189,
    1188,  2193,  1223,  1189,  2585,  2360,  2467,  3021,  1247,  1535,
    1536,   855,  4043,  4044,  4045,  4046,  2202,  1223,  2599,  1188,
    3483,  1188,  1189,  1188,  1189,  2468,  1189,  2203,  1654,  1188,
    1372,   877,  1189,   857,  1190,  1372,  2469,  2486,  2119,   983,
    1188,   888,  1188,  1189,  1235,  1189,  2493,  2494,  2260,  4237,
     116,   867,  1188,  4254,  4239,  1189,  4240,  2498,  2499,  2500,
    2501,    52,  2509,  2510,  1188,  3826,  3827,  1189,  2200,   117,
    2215,  1223,  2696,  2361,   986,  3726,   984,  1190,  3830,  1697,
    2456,  2457,  2458,  2552,   843,  3833,   618,   566,   993, -1791,
     618,  3104,  2662,  1002,   566,   493,  1014,  1188,  1424,  1024,
    1189,  1043,   608,   608,   608,  2685,  2293,  1190,  2688,    55,
    3855,  2120,  1188,  3857,  1188,  1189,  1190,  1189,  2667,  2470,
    1044,  3123,  1188,  2216,  1223,  1189,  2281,  1785,   618,  2772,
    3129,  1188,  1697,   618,  1189,  2782,   115,  1188,  1425,   118,
    1189,  1190,  1277,  1793,  2750,  1079,  1794,  2502,  1188,  1795,
    2998,  1189,  1048,  2919,  2362,  2681,  2682,  2683,  4136,  2794,
    2217,  1223,  1190,  1973,  1080,  1697,  1190,  2611,   119,  4150,
    2611,  2611,  1188,  2611,  1081,  1189,  2611,  2611,  2611,  2611,
    2611,  2611,  2611,  1190,  2358,  2611,  2997,  2611,   977,   978,
    1083,   979,  1084,   980,  4156,  3106,  1223,  4159,  4160,  4161,
    4162,  1188,  1203,  1085,  1189,  2221,  1223,   918,   901,  4151,
     945,  2503,  3897,  3898,  1188,  1088,  1190,  1189,  3242,  1089,
     120,  2511,  2512,  1278,  2764,  1223,  3633,   618,  1279,   973,
    3132,  2471,  1190,  2800,  2801,  1188,  1090,  1188,  1189,  2504,
    1189,  1190,  1091,  4236,  1092,  1190,  3139,  1203,  2359,  4217,
    3187,  1295,  2791,  3586,  3587,  3143,  1203,   618,  1227,  3144,
    1093,  2121,  4255,  1094,  1190,  1095,  1190,  1188,  1190,  3634,
    1189,  1280,  1096,  3635,  1190,  3636,  2360,   886,   618,  3662,
    3145,  1226,  3146,  1908,  2933,  1190,  1281,  1190,  3148,  1099,
    1236,  1235,  1101,  1188,  4251,  4252,  1189,  1190,  1231,  3151,
    2472,  3156,  1188,  4264,  1102,  1189,  3807,  2505,  1103,  1190,
    2823,  3159,  1188,  4460,  4461,  1189,  1990,  1687,  1688,  4259,
    1106,  3531,  3637,  3161,  2823,  1188,  1107,  1188,  1189, -1513,
    1189,  1108,  1295,   889,   890,  1109,   892,  2269,   894,  2414,
    1372,  2845,  1190,  1248,  2361,  2848,  3149,  1223,  3101,   618,
     121,  3252,  3253,   895,  3807,  1276,  1697,  1190,  1110,  1190,
    3256,  3257,  2868,  2363,  2870,  1111,  2118,  1190,  1285,  1203,
    1282,  3163,  1274,  3165,  1112,  1618,  1190,  3246,  3422,  3423,
    3326,  3166,  1190,  3502,  1223, -1513,   911,  1113,  2506,  1296,
    3167,  3527,  3528,  1190,  3667,  3668,  3488,  1206,  1909,  1909,
    3704,  3713,   887,  1114,  4083,  4084,  1293,  3489,  3721,  1223,
   -1513,  1115,  2794,  3297,  3338,  3738,  1223,  1190, -1513,  1116,
   -1513,   122,  3344,  1119,  4348,  2362,  3346,  1120,  1698,  3754,
    3755,  3490,  3867,  2512,  1126,  2502, -1513,   618,   618,  4149,
    1960, -1513,  1206,  3882,  3883,  1127,  1190,  3886,  3883,  3887,
    3883,  1206,  -824,  1128,  1961, -1513,  3717,   945,  1129,  1190,
    3716,  1284, -1513,  3945,  3528,  2647, -1513,  3948,  3883, -1513,
    1296,  2222,  3419,  3719,  3956,  3957,  1622,   888,  2599,  1130,
    1190, -1513,  1190,  2599,   123,  2867, -1003,  2946,  2958,  2599,
    4053,  4054, -1513,  2599,  3725,  2969,  3727, -1513,  2960,  2503,
    1131, -1513,  1132,  2523,  2970,  2969, -1513,  2599,  2599,  1133,
     618,  2969,  1190,  1990,  1134,  1990,  2990, -1513,  2118,  2599,
    1973,  1698, -1513,  4082,  3257,  1294,  3728,  2504,  2994,  4426,
     608,  4428,   124,  3002,  4086,  3883,  1137,  1236,  1190,  3005,
    3006,  2969,  1138, -1513,   503,  1208,  1209,  1190,  2599,  3031,
   -1513,  2118,  3729,  1037,  1038,  4087,  3883,  1190,  4445,  3638,
    3057,  3730, -1513,  2118,  1206,  2118,  3639,  1139,  2496,  1140,
    1190,  3795,  1190, -1513,  1141, -1513,  4089,  3883, -1513,  4090,
    3883,  1623,  1142,  3004,  4039,  1626,  1143, -1513,  4096,  4097,
    1208,  1209,  1627,  4475,  4476,  2505,   119,  2507, -1513,  1208,
    1209,  1144,  1991,  3640,  2329,  2502,  2330, -1513,  3014,  4098,
    4097,  3476,  3697,  3698,  1589,  1590,  1591,  1145,  2550,  1962,
    2971,  2972,  4275,  3257,   608,  2599,  1602,  4276,  3257,  4282,
    3528, -1791,   504,  1146,  2363,  1147,  4518, -1513,  4325,  4326,
    4367,  4368,  2119, -1791,  1148, -1791,  1149,  3001,  1235,  4421,
    3421,  4507,  4508,  2396,  2397,  2398, -1513,  1657,  2082,  1150,
    1661,  -651,  2647,  3503,  2647,  1151,  -855,  4257,  4257,  2503,
    1628,  2523,  1973,  1152,  3641,   910,  2506,  3086,   588, -1513,
    2466,  1680,  1681,  2083,  2524,  1685,  1153, -1513, -1513,  1213,
    1214,  1215,  1216,  1217,  1218,  1154,  1963,  2504,  1158,  -651,
    3545,  3546,  1159,  1699,  1700,  1973,  3512,  3513,  1162,  2523,
   -1513,  1163,  1208,  1209,   505,  1167,  3061,  1973, -1513,  1973,
    1171,  1964,  2524,  3642,   589,  1172,  1630,  3752,  3753,  1173,
    1174,  1175,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,
    1176,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,  3683,
    3798,  1225,  1302,  1273,  1303,  2321, -1513,  1319,  1300,   618,
     618,   618,  1331,  1333,  2825,  2505,  1350,   608, -1513,   889,
     890,   891,   892,   893,   894,  1351,  1352,  1355,  1358,  3643,
    1363,  1965,  1364,  1383,  2502,   618,  -651,  3016,  1698,   895,
    1387, -1513,   504,  1391,  2119,  1403,  1412,  1413,   590,  1991,
    1235,  1991,  1414,  1125,  1429,  1432,   618,   618,   618,  3965,
   -1513,  1436,  1437,  2467,   945,  3965,  1445,  1448,  2551,  3273,
    3229, -1513, -1513,  1449,  -651,   812,  2082,  2119,  1452,  1372,
     504,  1453,  2468,  1235,  2552,  1455,  1460, -1513,  1465,  2119,
   -1513,  2119, -1513,  2469,  1477,  1235,  2506,  1235,  2503,  1483,
    1485,  2083,  1487,  3709,  1211,  1212,  1213,  1214,  1215,  1216,
    1217,  1218,  1490,  1631,  2082, -1513, -1513,  2120,  1491, -1513,
   -1513,  1495,  1186,  1187,  1697,  1966,  2504,  1496,  1501,  1633,
    1500,  1497,  1504,  1505,  1506,  2507,  1544,  1553,  1554,  2083,
    1558, -1513,  1555,  1560,  1236,  4148,  1561,  1579,  1221,  2502,
    2120,  1581,  3018, -1513,  1585,  1592,  2599,  1604,   813,  2599,
    2599,  1643,  1607,  1653,  2969,   506,  4032,  4036,  1654,  1731,
    2502, -1513,  1655, -1513,  1737,  1678,  2470,   618,  1695,  1706,
    2599,  1202,  1762,  1715,  1757,   507,  1766,  1760,  1763,   814,
    1769,  1776,  3272,  1770,  2505,  1771, -1513, -1513,  2969,  4057,
   -1513, -1513,  1772,   815,  1773,  1774,  2969,  1775,  1787,  1788,
    2969,  3946,  3947,  2503,  3949,  3950,   945,  1789,  1790,  1614,
    1615,  1616,  1617,  1618,  3286,  3287,   816,  3289,   508,   817,
    -571,  1810,  4058,   509,  2503,  1813,  3350,  1829,  1821,   608,
    1830,  2504,   818,  1831,  3406,  1832,  1836,  1839,  1842,   945,
     493,  1545,  -651,  1844,  3416,  1546,  2969,  1843,  1853,  1859,
    1883,   945,  2504,   945,   819,  1886,  1547,  2121,   510,  1890,
    1919,  3425,  1918,  3412,  2525,  2506,   511,  1920,  1921, -1791,
    1923,  3007,  1932,  3008,  3436,  1935,  1949,  1203,  2471,   820,
    -651,   608,  3351,  1958,  2004,   821,  1236,   591,  2069,  1542,
    2121,  3332,  3449,  2086,  2088,  2507,  2087,  2005,  2089,  2505,
    3336,  4032,  2006,  2090,  2007,  4036,  2008,  1697,  2091,   592,
    2092,  1619,  1620,  1621,  1622,  3009,  3914,  2009,  2010,  1236,
    2505,  4190,  2093,  2094,  2095,  2096,   822,  1357,  4148,  2097,
    2098,  1236,  2099,  1236,  3438,   507,  2100,  2112,  3010,  1357,
    2101,  4059,  2102,   593,  2103,  2104,  2105,  2472,  2011,  2106,
    2643,  2107,  2012,  2013,  2108,  2109,  2110,  2162,  2014,  4032,
    4036,  2111,  3069,  2114,  3550,  2132,  2015,  2151,  2133,  2148,
    2138,  2149,  2150,   507,  2016,  3011,  2163,   522,  3501,  1204,
    2506,  2157,  2165,  2166,  2017,  2167,  2868,  1548,  2182,  3428,
    2183,  2184,  2189,  2190,  2191,  2194,  2204,  2200,  2208,  2018,
    2212,  2506,   594,  1205,  2270,  2230,  3926,  2231,  4372,  2236,
    2274,  2239,  1104,  1477,  2240,  2251,  2252,  2019,  -651,  1623,
    2253,  1624,  1625,  1626,  4060,  2020,  2021,  2207, -1220,  2823,
    1627,  2211,  2022,  2280,  1218,  2290,   523,  1156, -1342,  1160,
    2023,  2310,  4061,  2342,  -929,  2350,  2024,  2845,  3538,  2324,
    2356,  3540,  2370,   618,  2367,  2235,  -651,  2025,   823,  2391,
    2394,  2395,   618,  4242,  2410,  4062,   524,  2418,  2791,  2416,
    1188,  3201,  1206,  1189,  2507,   911,   911,  2026,   825,  2417,
    3202,  2423,  1549,  2424,  2421,  2422,   826,  2440,  2447,  2442,
    3203,  2474,  1037,  1038,   827,  2425,  2475,  2461,  2478,   525,
    1698,  4372,  3204,  3205,  3206,  2479,  2466,  2481,  1628,  2867,
    2485,  2599,  2487,  2492,  2488,  2522,  2027,  2489,  2028,  3207,
    2490,  2599,   828,  2969,  2523,  2029,  2491,  2536,  2545,  1193,
    1194,  2546,  2548,  1698,  2541,   829,   830,  2549,  2555,  2969,
     565,   608,  2030,  2599,  2542,  4067,  2466,   526,  1203,  2557,
    2558,  2559,  2567,  4377,  4378,  1697,  4380,  2566,  1372,  2602,
    2572,  2571,  2606,  1629,  1630,  2031,  1207,  1195,  2577,  1697,
    2608,  2578,  2646,  2587,  1697,  2668,  4502,  2686,  1196,  1697,
    2690,  2694,  2699,  2716,  2715,   831,  2717,  2298,  2728,  2507,
    4511,  2729,  2741,  2763,  1203,  4502,  2770,  2798,  2778,  2787,
    4511,  2032,  2788,  4417,  2805,  4418,  4419,  3555,  2799,  4121,
    2507,  2009,  2010,  2806,   832,  3057,  1335,  1197,  3012,  2033,
    1208,  1209,  2803,  2034,  2804,  1336,  2813,  2818,  1198,  2816,
    2807,  2819,  2827,  1210,  2826,  1337,   833,   945,   834,  2467,
    3696,  3696,  3696,  3773,  -789,  -789,  2012,  1338,  1339,  1340,
    3140,  2831,  2849,  4063,  -789,  1199,   618,  1816,  2468,  2835,
    2015,  2035,  2850,   668,  1341,  2852,  2036,  2853,  2016,  2469,
    2854,  2402,   -64,  2037,  2401,  2872,  2873,   527,  2038,  2467,
    4472,  2039,  1867,  1868,  2883,  2893,  2897,  4487,  4232,  4230,
    4067,  2898,  2899,  2018,  2900,  2901,  2907,   668,  2468,  2908,
    2909,  1631,  2925,  2929,  2930,  2976,  2943,  1477,  3050,  2469,
    2978,  2019,  2040,  3040,  3046,  1190,  1632,  1633,  3067,  1200,
    3762,  3072,  3066,  3052,  1698,  3071,  2041,  2042,  2043,  2044,
    2414,  3664,  3073,  3074,   811,   812,  2038,  3098,  3208,  3801,
    2024,   618,  2158,  1206,  3107,  3118,   689,  3120,   528,  1203,
    3111,  2045,  2470,  3113,  3688,  3209,  3178,  3121,  3168,   793,
    3122,  3226,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,
    3179,  3124,  3231,  3801,  3184,  3779,  3125,  1311,  3238,  3696,
     689,  3182,  3186,  3259,  3270,  3191,  3219,   793,   608,  1206,
    3271,  3194,  2470,  3224,  3235,  3254,  3234,  3816,  3811,  3279,
    3290,  3291,  3298,   693,  3302,  1372,  3317,  2046,  2047,  2048,
     694,   529,  2028,  3407,  2049,  3783,   530,  3303,   813,  2029,
    3318,  3410,  2331,  3413,  3241,  3335,  4514,  3414,   618,  3248,
    2050,  3418,  3431,  2051,   531,  3251,  2030,   693,   699,  3275,
    3276,  3809,  3306,  3316,   694,  3348,  2332,  3329,  3339,   814,
    3347,  3432,  3424,  3349,  3420,  3858,  2052,  3421,  3437,   532,
    2333,  3440,  3862,   815,  2471,  3446,  3210,  2383,  3447,  2053,
    3550,  2334,   699,  3776,   533,  3448,  1951,  3926,  3466,  3468,
    3436,  3479,  3211,  1342,  3480,  3472,   816,  3492,  2257,   817,
    3173,  1208,  1209,  1909,  2031,  2032,  2006,  3509,  3508,  3518,
    1343,  3523,   818,   618,  2471,   793,   706,  3520,  3543,  3530,
     793,  3556,  3551,  2033,  3557,  3564,  1960,  3565,  3577,  3585,
    2335,  2336,  3588,  3589,   819,  3594,  4230,  3603,  2600,  -929,
    1961,  3610,  3658,  2472,  3661,  3665,  3663,  1208,  1209,  3671,
     706,   793,  3212,  3684,  1206,  3685,  3689,  3675,  2337,   820,
    3686,  3690,  3692,  3838,  3918,   821,  3699,   793,  3706,  3213,
    3702,  3703,  3704,  3705,  3710,  3712,  3714,  2037,   618,  3715,
    3718,   717,  4227,  2472,  3722,  2039,  3724,  3723,  3732,  3739,
    3733,  2848,   720,  3740,  3741,  3750,   721,   722,  3757,  3758,
    3696,  3696,  3868,  3696,  3696,  3760,   822,  3767,  4067,  3274,
    3755,   793,   793,   793,   793,   717,  3769,  3770,  1614,  1615,
    1616,  1617,  1618,  3774,   793,  2338,  3775,  3777, -1425, -1430,
     721,   722,  1372,  3814,  3787,  3796,  4484,  1344,  3797,  3842,
    3649,  3799,  3800,  1211,  1212,  1213,  1214,  1215,  1216,  1217,
    1218,  3817,  3829,  3825,  3843,  2045,  3831,  3850,  3847,  3849,
    3652,  3870,  4484,  3856,  1250,  3869,  3885,  3891,  3893,  3894,
    3895,  3912,  3899,  3900,  3901,  4010,   608,  2339,  3913,  3919,
    3955,  3932,  4516,  3961,  3934,   720,  3969,  3696,  3713,  1211,
    1212,  1213,  1214,  1215,  1216,  1217,  1218,  1345,  3968,  4014,
    4028,  4042,  1208,  1209,  3929,  1962,  4005,  4038,  4040,   879,
     812,  2046,  2047,  2048,  1346,  4048,  4051,   608,  2049,  4079,
    1619,  1620,  1621,  1622,  4081,  4100,  4118,  -346,  4141,  4011,
     618,  4092,  4130,  4123,  2050,  4133,  4157,  2051,   823,  4120,
    2614,  2615,   824,  2622,  4158,  4140,  2625,  2626,  2627,  2628,
    2629,  2630,  2631,  4155,  4163,  2634,  4166,  2636,   825,  4168,
    1251,  4093,  4170,  4175,  4194,  3035,   826,  4197,  -364,  4222,
    4049,  4224,  4225,  2053,   827,  4226,  4104,  4241,  4266,  4244,
    4246,  4111,  1963,  4273,   743,  1252,  4261,  4283,  3802,  1253,
    4286,  3803,  4287,   813,  1250,  4293,  4294,  4304,  4306,  4298,
    4305,   749,   828,  4309,  1037,  1038,   751,  1964,  4315,   752,
    4329,  4331,  4330,  4332,  4338,   829,   830,  4339,   743,  4342,
    4340,  4341,  3802,  4343,   814,  3803,  1254,  4344,  1623,  3093,
    1624,  1625,  1626,  4349,  4351,   749,  4353,  4354,   815,  1627,
     751, -2324,  4357,   752,  1255,  1212,  1213,  1214,  1215,  1216,
    1217,  1218,  1698,  4363,  4379,  4376,  4381,  4382,  3918,  4392,
    4395,   816,  3804,  3805,   817,   831,  4397,  1965,  4260,  4405,
    4406,  4408,   793,  4411,  4414,  4420,  4423,   818,  4424,  4425,
    4429,  4430,  4434,  2848,  4437,  2848,  4442,  4444,  4440,  4448,
    1251,  4441,  4450,  4453,   832,  4456,  3804,  3805,  4454,   819,
    4459,  4463,  4464,  4466,  4473,  4488,  1256,  4493,  4503,  4489,
    4113,  4198,  2796,  4513,  2638,  1252,   833,  1628,   834,  1253,
    3674,  3673,  1060,  2937,   820,  3873,  4364,   793,   793,  4131,
     821,  1489,  4233,  3871,  4365,  3875,   793,   793,   793,   793,
     793,   793,   793,  4009,  4505,  4468,   578,  4135,   955,  2392,
     793,   793,  2317,   793,   793,  3215,  1254,  3980,   793,   793,
    3981,  1966,   793,   793,   793,   793,   618,   793,   793,  4477,
    2794,   822,  1629,  1630,  1255,   793,   793,  3983,   793,   793,
     793,   793,   793,  3984,  3986,   793,   793,   793,   793,   793,
     793,   793,   793,   793,   793,   793,  4389,   793,  3987,  3988,
     793,   793,  3989,  4390,  3990,   793,  3991,  3994,  4291,   793,
     793,   793,  4362,  3995,  3996,  4303,  4302,  2591,  2002,  1557,
    2054,  2830,   793,   793,   793,  3343,  4017,  3237,  3522,  1819,
    4374,   793,  4153,  4050,  1257,  4245,  1256,  3763,   793,   793,
     793,  4439,   793,  1258,  4375,  1698,  4413,  4165,  3691,   793,
     793,   793,  2117,   793,   793,   793,   793,   793,  1259,   793,
     793,   793,   793,   793,   793,   793,   793,   655,   618,  2589,
     793,   793,  3429,  3091,  3602,  4297,  1260,  3590,  2596,  3037,
    3617,  3618,  3659,  4250,  3963,  3810,  3848,  3352,  3353,  4314,
    4297,  3170,  3834,  3354,  3497,  3355,  3495,  3356,  3357,  2927,
    3493,  4178,   518,   823,  4307,   519,  4180,   880,  2147,  4181,
    1631,  4138,  4145,  4143,  3358,  4027,   850,  2680,  3966,  1261,
    2593,  3025,  1936,   825,  3813,  1632,  1633,   966,   618,  1934,
    2832,   826,  3591,  2115,  2375,  3228,  2078,  2855,  2814,   827,
    3519,  2769,  3504,  1362,  3057,  3057,   982,  2400,  3193,  1262,
    2713,  1652,  3561,  2768,  4394,  4177,  2920,  4085,  4384,  3672,
    4385,  4402,  2785,  3359,  1257,  3597,  3360,   828,   497,  3936,
    4458,   498,  1603,  1258,  3361,  2862,  3928,  2684,  4322,  4323,
     829,   830,  4258,  1759,  1807,  1469,  1834,  2812,  1259,  3533,
    1470,  3765,  2838,  3362,  3534,  1471,  3571,  4312,  1472,   970,
    1078,  2449,   951,  1924,  2450,  4506,  1260,  2156,  2311,   793,
    3363,  3601,  1902,  3521,  1841,  4438,  4457,  4333,  4383,   793,
    4512,  4297,  3841,  3537,  4515,   913,  1856,  2881,  3553,  4446,
     831,  4404,   914,  2273,  4451,  3554,  3364,   793,  3365,  1086,
    2871,  2878,  2428,  2879,  2355,   882,  1848,  1349,  1800,  1261,
    4041,  3366,  3367,  4047,  2137,   884,  3216,  1354,   649,   832,
     650,  4122,     0,     0,  3866,  1064,  1065,  1066,     0,  4485,
    1118,     0,     0,     0,     0,     0,     0,     0,     0,  1262,
    4436,   833,     0,   834,     0,     0,  1135,     0,     0,     0,
       0,     0,  3368,  1698,     0,  4485,     0,     0,     0,  4297,
       0,  4297,     0,   618,     0,     0,     0,  1698,  4455,     0,
       0,     0,  1698,     0,     0,     0,     0,  1698,  4297,     0,
       0,     0,  3369,     0,     0,     0,     0,     0,     0,     0,
       0,  3370,  3371,  1180,  3372,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4297,  4297,
       0,     0,     0,  4492,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3373,  3374,  3375,     0,     0,     1,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3376,
    3377,  3378,     0,     3,     0,     0,  3379,     4,     0,  3380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     0,  3381,  3382,     0,     7,
       0,     0,     0,     8,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
     793,     0,     0,     0,     0,     0,     0,     0,     0,  3383,
    3384,     0,     0,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3385,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    16,    17,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3386,    19,
       0,     0,  3387,     0,     0,     0,     0,     0,   793,   793,
     793,     0,     0,     0,  3388,     0,     0,    20,     0,     0,
       0,     0,     0,   793,     0,     0,     0,     0,     0,     0,
       0,     0,    21,     0,    22,     0,     0,     0,     0,    23,
       0,     0,    24,     0,     0,     0,     0,     0,     0,   793,
       0,     0,     0,     0,     0,   793,     0,     0,   793,     0,
     793,  1512,     0,     0,     0,    25,   793,    26,   793,   793,
       0,     0,  3389,     0,     0,  3390,     0,     0,  3391,  3392,
    3393,  3394,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1583,  1584,     0,     0,
    3395,  3396,     0,     0,     0,  1594,  1595,     0,     0,  1598,
    1599,  1600,     0,     0,     0,     0,     0,     0,     0,  1608,
    1609,     0,  1610,  1611,   793,  3397,     0,  1636,     0,     0,
       0,  1645,  1646,  1647,  1648,     0,  1650,     0,     0,     0,
       0,     0,     0,     0,  1658,  1659,     0,  1662,  1663,     0,
       0,     0,     0,  1513,  1667,  1668,  1669,     0,     0,  1672,
    1673,  1674,  1675,  1676,  1677,     0,  1679,     0,     0,  1682,
    1683,     0,     0,     0,  1686,   793,     0,     0,  1689,  1693,
    1694,     0,    30,   793,     0,     0,     0,     0,     0,     0,
       0,  1701,  1702,  1703,     0,     0,     0,     0,     0,    31,
    1711,     0,     0,     0,     0,     0,     0,  1716,  1717,  1718,
       0,     0,    32,  1514,  1515,  1516,  1517,  1518,  1519,  1520,
    1521,  1522,  1523,    33,  1524,  1525,  1526,  1527,  1528,  1529,
    1530,  1531,  1532,     0,  1533,  1534,     0,     0,     0,     0,
    1754,     0,     0,     0,     0,    34,     0,     0,    35,     0,
      36,     0,     0,    37,     0,     0,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,    41,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,    45,     0,    46,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2009,
    2010,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     2,     0,     0,     0,     0,     0,    47,     0,     0,
       0,     0,     0,     0,    48,     0,     0,     0,     0,     0,
       0,     4,  -789,  -789,  2012,     0,     0,     0,     0,     0,
       0,     0,  -789,     0,     0,     5,     6,     0,  2015,  1535,
    1536,     0,     0,     7,     0,     0,  2016,     8,     9,     0,
       0,     0,     0,     0,     0,     0,     0,    49,  1855,     0,
       0,     0,     0,    10,     0,   793,     0,     0,  1861,    50,
       0,  2018,     0,    51,     0,     0,    52,     0,     0,     0,
       0,    53,    11,     0,     0,  1477,  1889,     0,     0,  2019,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,    54,
       0,     0,     0,    13,    14,    15,     0,     0,  2024,     0,
       0,     0,     0,     0,    55,     0,    16,    17,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   793,     0,
       0,     0,   793,     0,     0,     0,     0,   793,   793,     0,
       0,     0,     0,    19,     0,     0,   793,     0,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   793,
     793,    20,   793,   793,     0,   793,   793,   793,   793,   793,
       0,     0,   793,     0,     0,     0,    21,     0,    22,     0,
    2028,   793,     0,    23,     0,     0,    24,  2029,   793,     0,
     793,     0,   793,   793,     0,   793,   793,     0,     0,     0,
     793,   793,   793,     0,  2030,     0,   793,   793,   793,    25,
     793,    26,   793,     0,   793,     0,   793,  2670,   793,     0,
       0,     0,     0,   793,     0,     0,     0,     0,     0,    27,
       0,     0,     0,  2009,  2010,     0,     0,     0,     0,     0,
       0,     0,   793,     0,     0,     0,    28,     0,     0,   793,
      29,     0,   793,     0,     0,     0,     0,     0,   793,     0,
       0,   793,     0,  2032,     0,   793,  -789,  -789,  2012,     0,
       0,     0,     0,     0,     0,     0,  -789,     0,     0,  2168,
       0,  2033,  2015,     0,     0,     0,     0,     0,     0,     0,
    2016,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2018,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   793,     0,     0,     0,  1477,
       0,     0,     0,  2019,     0,  2037,     0,     0,     0,     0,
       0,     0,     0,  2039,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2024,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    32,  2243,  2245,  2247,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   793,     0,
       0,     0,   793,     0,     0,     0,     0,     0,     0,    34,
       0,     0,    35,  2045,    36,     0,     0,    37,  2282,     0,
      38,    39,     0,     0,     0,     0,     0,  2287,     0,  2288,
      40,     0,    41,     0,  2028,     0,     0,     0,     0,   916,
      42,  2029,     0,     0,     0,     0,    43,     0,     0,   858,
     917,     0,     0,     0,    44,     0,     0,     0,  2030,    45,
       0,    46,     0,     0,     0,     0,     0,     0,     0,  2046,
    2047,  2048,     0,     0,   918,   901,  2049,     0,     0,     0,
       0,     0,     0,     0,     0,   919,     0,     0,     0,     0,
       0,    47,  2050,     0,     0,  2051,     0,     0,    48,     0,
       0,     0,     0,     0,     0,     0,     0,   920,     0,   921,
       0,   922,     0,  2371,     0,     0,     0,  2032,     0,     0,
       0,   923,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2053,     0,     0,     0,  2033,     0,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    50,     0,     0,     0,    51,     0,     0,
      52,     0,     0,     0,  2427,    53,     0,     0,     0, -1791,
     924,     0,  2437,     0,     0,   925,     0,     0,   926,     0,
       0,     0,     0,     0,     0,  2671,     0,     0,     0,  2037,
       0,     0,     0,    54,     0,     0,     0,  2039,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   927,    55,   928,
       0,     0,     0,     0,     0,     0,   929,     0,   930,     0,
       0,     0,     0,     0,  3023,     0,     0,     0,     0,  2006,
       0,  2007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   931,   932,     0,  2009,  2010,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     793,     0,     0,     0,   793,   933,     0,  2045,     0,     0,
       0,     0,     0,     0,     0,  2011,     0,     0,     0,  2012,
       0,     0,     0,     0,   793,   793,   934,     0,     0,     0,
       0,     0,     0,  2015,     0,     0,     0,     0,     0,     0,
       0,  2016,     0,     0,     0,   793,     0,     0,     0,     0,
       0,  2017,     0,     0,   793,     0,   793,     0,   793,   935,
       0,     0,     0,  2046,  2047,  2048,  2018,     0,     0,     0,
    2049,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1477,     0,     0,     0,  2019,   793,  2050,     0,     0,  2051,
     793,     0,  2020,     0,  2009,  2010,     0,     0,     0,  3024,
       0,     0,     0,     0,     0,     0,     0,  2023,     0,     0,
       0,     0,     0,  2024,  2607,     0,     0,   793,     0,     0,
       0,     0,     0,     0,   936,  2053,     0,     0,     0,  2012,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2015,  2026,     0,     0,     0,     0,   937,
       0,  2016,     0,     0,     0,     0,     0,     0,     0,   938,
     939,     0,     0,   940,   941,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2018,     0,     0,     0,
       0,     0,     0,     0,   942,  2028,     0,  2693,   793,     0,
    1477,  2695,  2029,     0,  2019,     0,  2697,  2698,     0,     0,
       0,     0,     0,     0,     0,  2711,     0,     0,     0,  2030,
       0,     0,     0,     0,     0,     0,     0,     0,  2718,  2719,
       0,  2720,     0,  2024,  2722,  2723,  2724,  2725,  2726,     0,
     943,     0,  2031,     0,   793,     0,     0,     0,     0,     0,
    2730,     0,     0,   944,     0,     0,     0,  2731,     0,  2732,
       0,  2733,  2734,     0,  2735,     0,     0,     0,     0,  2738,
    2739,  2740,     0,     0,     0,  2742,  2743,  2744,  2032,  2745,
       0,  2747,     0,  2749, -2361,  2751,     0,  2752,   945,     0,
       0,     0,  2753,     0,     0,     0,  2033,     0,     0,     0,
    2034,     0,     0,     0,     0,  2028,   946,     0,     0,     0,
       0,  2773,  2029,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2783,     0,  2030,
    2786,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2036,     0,     0,     0,     0,     0,     0,
    2037,     0,     0,     0,     0,     0,     0,     0,  2039,     0,
       0,   793,   793, -2361,     0,     0,     0,     0,     0,   947,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2032,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2042,     0,  2033,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   793,     0,     0,     0,  2045,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   793,
       0,     0,     0,   793,   793,     0,   793,     0,     0,     0,
    2037,     0,     0,     0,     0,   793,     0,  2437,  2039,     0,
     793,     0,     0,   793,     0,   793,   793,     0,     0,     0,
       0,     0,     0,     0,  2046,  2047,  2048,     0,     0,     0,
       0,  2049,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2050,   793,     0,
    2051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2045,     0,
       0,     0,   793,     0,     0,     0,  2053,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   793,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2046,  2047,  2048,     0,     0,     0,
       0,  2049,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2050,     0,     0,
    2051,     0,     0,     0,     0,     0,   793,     0,     0,     0,
       0,     0,     0,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2053,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3103,
       0,     0,     0,  3105,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3127,  3128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3150,     0,     0,     0,     0,     0,
       0,     0,     0,  3160,     0,  3162,     0,  3164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3225,     0,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   793,   793,     0,     0,
       0,     0,     0,     0,     0,   793,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2437,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3311,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   793,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   793,     0,     0,     0,     0,     0,     0,
    3408,  3409,     0,     0,     0,     0,     0,   793,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3453,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3471,     0,
       0,     0,  3474,  3475,     0,     0,     0,     0,     0,  3998,
       0,     0,     0,     0,  3482,     0,     0,     0,     0,  3484,
       0,     0,  3485,     0,  3486,  3487,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   793,     0,     0,     0,     0,     0,     0,   793,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3515,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3515,     0,     0,   793,     0,     0,
       0,     0,     0,  3998,  3998,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3515,     0,     0,     0,     0,
       0,     0,     0,  3582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   793,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   793,     0,
     793,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     793,     0,  3998,  3998,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4238,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   793,     0,
    3998,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3998,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3998,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     793,     0,     0,     0,     0,     0,     0,     0,  3515,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3785,  3786,   793,  3998,     0,
       0,     0,     0,     0,  3311,     0,     0,     0,     0,     0,
    3998,  3998,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3998,     0,     0,     0,
       0,     0,     0,   793,     0,     0,  3998,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   793,     0,     0,     0,
       0,     0,     0,  3998,     0,  3998,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3998,     0,     0,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3998,     0,  3998,     0,  3998,     0,     0,     0,
       0,     0,     0,  3998,     0,     0,     0,  3892,     0,     0,
       0,     0,     0,  3998,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3998,  3998,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3515,  3998,  3998,     0,     0,     0,  3998,     0,
       0,     0,     0,     0,   793,     0,  3311,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4073,     0,     0,     0,     0,     0,     0,  4078,     0,
    4080,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4099,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3311,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4192,     0,  4193,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4201,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4295,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3515,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4347,     0,   137,     0,
     664,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   665,     0,   146,   147,   148,   149,
     150,   666,   152,     0,   153,     0,     0,   667,   154,   668,
     669,   670,   155,   671,     0,   156,   157,   158,  1690,   159,
       0,   160,   161,     0,     0,   162,   672,   673,   163,   164,
       0,   165,   674,   675,   167,     0,   168,   169,   170,   171,
     676,   173,  4396,   677,   175,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,     0,   187,
     188,   189,   678,   191,     0,   192,   679,   680,   193,     0,
       0,   194,   681,   195,   682,  4422,   196,   683,   684,     0,
     197,   198,   199,   685,   686,   687,     0,     0,     0,     0,
     688,   202,   689,     0,     0,   690,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   691,     0,   230,   231,   232,   233,   234,   692,   693,
     235,   236,     0,   237,   238,   239,   694,     0,   240,     0,
       0,     0,   695,   242,     0,   243,     0,   244,     0,   245,
     696,   247,   697,  4494,   249,     0,   250,     0,   698,     0,
     251,   252,     0,   253,   699,     0,   254,   255,     0,     0,
       0,   700,   257,   258,   259,   701,     0,   260,   261,   262,
       0,     0,   263,  3515,     0,     0,   702,   264,   265,   703,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
    1691,   274,     0,   704,   275,   276,     0,     0,     0,     0,
       0,   705,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,   706,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     707,   304,   305,   306,   307,   708,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   709,   315,     0,     0,
     710,   317,   711,   318,     0,   319,   712,   713,   714,   715,
     716,   324,   325,   326,   327,   328,     0,   717,   329,   330,
       0,     0,   331,   332,   333,   334,   718,   719,   720,   335,
     336,     0,   721,   722,   337,     0,   338,   339,   723,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,   724,   348,   349,
       0,   350,   351,   725,   353,   354,   355,   356,   726,   727,
     359,   728,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   729,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,   730,   731,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   732,     0,   733,   396,
     397,   398,   399,   400,   734,   735,   403,   404,   405,   406,
       0,   736,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   737,   738,   437,   438,     0,   439,   440,
     739,   442,   443,   444,   740,   741,   445,   446,   447,   448,
     742,   449,   450,     0,     0,   451,   452,   453,   454,     0,
     743,   455,   456,     0,   744,   745,   746,   747,     0,     0,
       0,     0,  1692,   461,   462,     0,   748,   749,   750,   464,
     465,   466,   751,   467,   468,   752,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     753,   477,     0,     0,   754,   755,   756,   757,   478,     0,
       0,   479,   758,     0,   759,   480,   481,   482,   760,   761,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   762,     0,     0,     0,   763,   764,
       0,     0,     0,     0,   765,   766,     0,     0,   767,   768,
       0,     0,   769,   770,   137,     0,   664,   139,   140,   141,
     142,  2433,     0,   143,     0,     0,     0,   144,     0,     0,
     665,     0,   146,   147,   148,   149,   150,   666,   152,     0,
     153,     0,     0,  2434,   154,   668,   669,   670,   155,   671,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   672,   673,   163,   164,     0,   165,   674,   675,
     167,     0,   168,   169,   170,   171,   676,   173,     0,   677,
     175,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,     0,   187,   188,   189,   678,   191,
       0,   192,   679,   680,   193,     0,     0,   194,   681,   195,
     682,     0,   196,   683,   684,     0,   197,   198,   199,   685,
     686,   687,     0,     0,     0,     0,   688,   202,   689,     0,
       0,  2435,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   691,     0,   230,
     231,   232,   233,   234,   692,   693,   235,   236,     0,   237,
     238,   239,   694,     0,   240,     0,     0,     0,   695,   242,
       0,   243,     0,   244,     0,   245,   696,   247,   697,     0,
     249,     0,   250,     0,   698,     0,   251,   252,     0,   253,
     699,     0,   254,   255,     0,     0,     0,   700,   257,   258,
     259,   701,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,   702,   264,   265,   703,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,   704,
     275,   276,     0,     0,     0,     0,     0,   705,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,   706,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,   707,   304,   305,   306,
     307,   708,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   709,   315,     0,     0,   710,   317,   711,   318,
       0,   319,   712,   713,   714,   715,   716,   324,   325,   326,
     327,   328,     0,   717,   329,   330,     0,     0,   331,   332,
     333,   334,   718,   719,   720,   335,   336,     0,   721,   722,
     337,     0,   338,   339,   723,  2436,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,   724,   348,   349,     0,   350,   351,   725,
     353,   354,   355,   356,   726,   727,   359,   728,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   729,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,   730,
     731,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   732,     0,   733,   396,   397,   398,   399,   400,
     734,   735,   403,   404,   405,   406,     0,   736,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   737,
     738,   437,   438,     0,   439,   440,   739,   442,   443,   444,
     740,   741,   445,   446,   447,   448,   742,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   743,   455,   456,     0,
     744,   745,   746,   747,     0,     0,     0,     0,     0,   461,
     462,     0,   748,   749,   750,   464,   465,   466,   751,   467,
     468,   752,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   753,   477,     0,     0,
     754,   755,   756,   757,   478,     0,     0,   479,   758,     0,
     759,   480,   481,   482,   760,   761,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     762,     0,     0,     0,   763,   764,     0,     0,     0,     0,
     765,   766,     0,     0,   767,   768,     0,     0,   769,   770,
     137,     0,   664,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   665,     0,   146,   147,
     148,   149,   150,   666,   152,     0,   153,     0,     0,   667,
     154,   668,   669,   670,   155,   671,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   672,   673,
     163,   164,     0,   165,   674,   675,   167,     0,   168,   169,
     170,   171,   676,   173,     0,   677,   175,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
       0,   187,   188,   189,   678,   191,     0,   192,   679,   680,
     193,     0,     0,   194,   681,   195,   682,     0,   196,   683,
     684,     0,   197,   198,   199,   685,   686,   687,     0,     0,
       0,     0,   688,   202,   689,     0,     0,   690,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   691,     0,   230,   231,   232,   233,   234,
     692,   693,   235,   236,     0,   237,   238,   239,   694,     0,
     240,     0,     0,     0,   695,   242,  2242,   243,     0,   244,
       0,   245,   696,   247,   697,     0,   249,     0,   250,     0,
     698,     0,   251,   252,     0,   253,   699,     0,   254,   255,
       0,     0,     0,   700,   257,   258,   259,   701,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,   702,   264,
     265,   703,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,   704,   275,   276,     0,     0,
       0,     0,     0,   705,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,   706,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   707,   304,   305,   306,   307,   708,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   709,   315,
       0,     0,   710,   317,   711,   318,     0,   319,   712,   713,
     714,   715,   716,   324,   325,   326,   327,   328,     0,   717,
     329,   330,     0,     0,   331,   332,   333,   334,   718,   719,
     720,   335,   336,     0,   721,   722,   337,     0,   338,   339,
     723,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,   724,
     348,   349,     0,   350,   351,   725,   353,   354,   355,   356,
     726,   727,   359,   728,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   729,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,   730,   731,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   732,     0,
     733,   396,   397,   398,   399,   400,   734,   735,   403,   404,
     405,   406,     0,   736,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   737,   738,   437,   438,     0,
     439,   440,   739,   442,   443,   444,   740,   741,   445,   446,
     447,   448,   742,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   743,   455,   456,     0,   744,   745,   746,   747,
       0,     0,     0,     0,     0,   461,   462,     0,   748,   749,
     750,   464,   465,   466,   751,   467,   468,   752,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   753,   477,     0,     0,   754,   755,   756,   757,
     478,     0,     0,   479,   758,     0,   759,   480,   481,   482,
     760,   761,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   762,     0,     0,     0,
     763,   764,     0,     0,     0,     0,   765,   766,     0,     0,
     767,   768,     0,     0,   769,   770,   137,     0,   664,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   665,     0,   146,   147,   148,   149,   150,   666,
     152,     0,   153,     0,     0,   667,   154,   668,   669,   670,
     155,   671,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,   672,   673,   163,   164,     0,   165,
     674,   675,   167,     0,   168,   169,   170,   171,   676,   173,
       0,   677,   175,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     678,   191,     0,   192,   679,   680,   193,     0,     0,   194,
     681,   195,   682,     0,   196,   683,   684,     0,   197,   198,
     199,   685,   686,   687,     0,     0,     0,     0,   688,   202,
     689,     0,     0,   690,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   691,
       0,   230,   231,   232,   233,   234,   692,   693,   235,   236,
       0,   237,   238,   239,   694,     0,   240,     0,     0,     0,
     695,   242,  2244,   243,     0,   244,     0,   245,   696,   247,
     697,     0,   249,     0,   250,     0,   698,     0,   251,   252,
       0,   253,   699,     0,   254,   255,     0,     0,     0,   700,
     257,   258,   259,   701,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,   702,   264,   265,   703,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,   704,   275,   276,     0,     0,     0,     0,     0,   705,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
     706,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,   707,   304,
     305,   306,   307,   708,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   709,   315,     0,     0,   710,   317,
     711,   318,     0,   319,   712,   713,   714,   715,   716,   324,
     325,   326,   327,   328,     0,   717,   329,   330,     0,     0,
     331,   332,   333,   334,   718,   719,   720,   335,   336,     0,
     721,   722,   337,     0,   338,   339,   723,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,   724,   348,   349,     0,   350,
     351,   725,   353,   354,   355,   356,   726,   727,   359,   728,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   729,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,   730,   731,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   732,     0,   733,   396,   397,   398,
     399,   400,   734,   735,   403,   404,   405,   406,     0,   736,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   737,   738,   437,   438,     0,   439,   440,   739,   442,
     443,   444,   740,   741,   445,   446,   447,   448,   742,   449,
     450,     0,     0,   451,   452,   453,   454,     0,   743,   455,
     456,     0,   744,   745,   746,   747,     0,     0,     0,     0,
       0,   461,   462,     0,   748,   749,   750,   464,   465,   466,
     751,   467,   468,   752,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   753,   477,
       0,     0,   754,   755,   756,   757,   478,     0,     0,   479,
     758,     0,   759,   480,   481,   482,   760,   761,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   762,     0,     0,     0,   763,   764,     0,     0,
       0,     0,   765,   766,     0,     0,   767,   768,     0,     0,
     769,   770,   137,     0,   664,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   665,     0,
     146,   147,   148,   149,   150,   666,   152,     0,   153,     0,
       0,   667,   154,   668,   669,   670,   155,   671,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     672,   673,   163,   164,     0,   165,   674,   675,   167,     0,
     168,   169,   170,   171,   676,   173,     0,   677,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   678,   191,     0,   192,
     679,   680,   193,     0,     0,   194,   681,   195,   682,     0,
     196,   683,   684,     0,   197,   198,   199,   685,   686,   687,
       0,     0,     0,     0,   688,   202,   689,     0,     0,   690,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   691,     0,   230,   231,   232,
     233,   234,   692,   693,   235,   236,     0,   237,   238,   239,
     694,     0,   240,     0,     0,     0,   695,   242,  2246,   243,
       0,   244,     0,   245,   696,   247,   697,     0,   249,     0,
     250,     0,   698,     0,   251,   252,     0,   253,   699,     0,
     254,   255,     0,     0,     0,   700,   257,   258,   259,   701,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     702,   264,   265,   703,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   704,   275,   276,
       0,     0,     0,     0,     0,   705,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   706,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   707,   304,   305,   306,   307,   708,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     709,   315,     0,     0,   710,   317,   711,   318,     0,   319,
     712,   713,   714,   715,   716,   324,   325,   326,   327,   328,
       0,   717,   329,   330,     0,     0,   331,   332,   333,   334,
     718,   719,   720,   335,   336,     0,   721,   722,   337,     0,
     338,   339,   723,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   724,   348,   349,     0,   350,   351,   725,   353,   354,
     355,   356,   726,   727,   359,   728,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   729,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   730,   731,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     732,     0,   733,   396,   397,   398,   399,   400,   734,   735,
     403,   404,   405,   406,     0,   736,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   737,   738,   437,
     438,     0,   439,   440,   739,   442,   443,   444,   740,   741,
     445,   446,   447,   448,   742,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   743,   455,   456,     0,   744,   745,
     746,   747,     0,     0,     0,     0,     0,   461,   462,     0,
     748,   749,   750,   464,   465,   466,   751,   467,   468,   752,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   753,   477,     0,     0,   754,   755,
     756,   757,   478,     0,     0,   479,   758,     0,   759,   480,
     481,   482,   760,   761,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   762,     0,
       0,     0,   763,   764,     0,     0,     0,     0,   765,   766,
       0,     0,   767,   768,     0,     0,   769,   770,   137,     0,
     664,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   665,     0,   146,   147,   148,   149,
     150,   666,   152,     0,   153,     0,     0,   667,   154,   668,
     669,   670,   155,   671,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   672,   673,   163,   164,
       0,   165,   674,   675,   167,     0,   168,   169,   170,   171,
     676,   173,     0,   677,   175,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,     0,   187,
     188,   189,   678,   191,     0,   192,   679,   680,   193,     0,
       0,   194,   681,   195,   682,     0,   196,   683,   684,     0,
     197,   198,   199,   685,   686,   687,     0,     0,     0,     0,
     688,   202,   689,     0,     0,   690,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   691,     0,   230,   231,   232,   233,   234,   692,   693,
     235,   236,     0,   237,   238,   239,   694,     0,   240,     0,
       0,     0,   695,   242,     0,   243,     0,   244,     0,   245,
     696,   247,   697,     0,   249,     0,   250,     0,   698,     0,
     251,   252,     0,   253,   699,     0,   254,   255,     0,     0,
       0,   700,   257,   258,   259,   701,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,   702,   264,   265,   703,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,   704,   275,   276,     0,     0,     0,     0,
       0,   705,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,   706,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     707,   304,   305,   306,   307,   708,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   709,   315,     0,     0,
     710,   317,   711,   318,     0,   319,   712,   713,   714,   715,
     716,   324,   325,   326,   327,   328,     0,   717,   329,   330,
       0,     0,   331,   332,   333,   334,   718,   719,   720,   335,
     336,     0,   721,   722,   337,     0,   338,   339,   723,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,   724,   348,   349,
       0,   350,   351,   725,   353,   354,   355,   356,   726,   727,
     359,   728,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   729,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,   730,   731,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   732,     0,   733,   396,
     397,   398,   399,   400,   734,   735,   403,   404,   405,   406,
       0,   736,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   737,   738,   437,   438,     0,   439,   440,
     739,   442,   443,   444,   740,   741,   445,   446,   447,   448,
     742,   449,   450,     0,     0,   451,   452,   453,   454,     0,
     743,   455,   456,     0,   744,   745,   746,   747,     0,     0,
       0,     0,     0,   461,   462,     0,   748,   749,   750,   464,
     465,   466,   751,   467,   468,   752,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     753,   477,     0,     0,   754,   755,   756,   757,   478,     0,
       0,   479,   758,     0,   759,   480,   481,   482,   760,   761,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   762,     0,     0,     0,   763,   764,
       0,     0,     0,     0,   765,   766,     0,     0,   767,   768,
       0,     0,   769,   770,   137,     0,   664,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     665,     0,   146,   147,   148,   149,   150,   666,   152,     0,
     153,     0,     0,   667,   154,   668,   669,   670,   155,   671,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   672,   673,   163,   164,     0,   165,   674,   675,
     167,     0,   168,   169,   170,   171,   676,   173,     0,   677,
     175,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,     0,   187,   188,   189,   678,   191,
       0,   192,   679,   680,   193,     0,     0,   194,   681,   195,
     682,     0,   196,   683,   684,     0,   197,   198,   199,   685,
     686,   687,     0,     0,     0,     0,   688,   202,   689,     0,
       0,   690,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   691,     0,   230,
     231,   232,   233,   234,   692,   693,   235,   236,     0,   237,
     238,   239,   694,     0,   240,     0,     0,     0,   695,   242,
       0,   243,     0,   244,     0,   245,   696,   247,   697,     0,
     249,     0,   250,     0,   698,     0,   251,   252,     0,   253,
     699,     0,   254,   255,     0,     0,     0,   700,   257,   258,
     259,   701,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,   702,   264,   265,   703,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,   704,
     275,   276,     0,     0,     0,     0,     0,   705,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,   706,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,   707,   304,   305,   306,
     307,   708,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   709,   315,     0,     0,   710,   317,   711,   318,
       0,   319,   712,   713,   714,   715,   716,   324,   325,   326,
     327,   328,     0,   717,   329,   330,     0,     0,   331,   332,
     333,   334,   718,   719,   720,   335,   336,     0,   721,   722,
     337,     0,   338,   339,   723,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,   724,   348,   349,     0,   350,   351,   725,
     353,   354,   355,   356,   726,   727,   359,   728,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   729,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,   730,
     731,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   732,     0,   733,   396,   397,   398,   399,   400,
     734,   735,   403,   404,   405,   406,     0,   736,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   737,
     738,   437,   438,     0,   439,   440,   739,   442,   443,   444,
     740,   741,   445,   446,   447,   448,   742,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   743,   455,   456,     0,
     744,   745,   746,   747,     0,     0,     0,     0,     0,   461,
     462,     0,   748,   749,   750,   464,   465,   466,   751,   467,
     468,   752,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   753,   477,     0,     0,
     754,   755,   756,   757,   478,     0,     0,   479,   758,     0,
     759,   480,   481,   482,   760,   761,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     762,     0,     0,     0,   763,   764,     0,     0,     0,     0,
     765,  1117,     0,     0,   767,   768,     0,     0,   769,   770,
     137,     0,   664,   139,   140,   141,   142,  1725,     0,   143,
       0,     0,     0,  1726,     0,     0,   665,     0,   146,   147,
     148,   149,   150,   666,   152,     0,   153,     0,     0,   667,
     154,   668,   669,   670,   155,   671,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   672,   673,
     163,   164,     0,   165,   674,   675,   167,     0,   168,   169,
     170,   171,   676,   173,     0,   677,   175,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
       0,   187,   188,   189,   678,   191,     0,   192,   679,   680,
     193,     0,     0,   194,   681,   195,   682,     0,   196,   683,
     684,     0,   197,   198,   199,   685,   686,   687,     0,     0,
       0,     0,   688,   202,   689,     0,     0,   690,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   691,     0,   230,   231,   232,   233,   234,
     692,   693,   235,   236,     0,   237,   238,   239,   694,     0,
     240,     0,     0,     0,   695,   242,     0,   243,     0,   244,
       0,   245,   696,   247,   697,     0,   249,     0,   250,     0,
     698,     0,   251,   252,     0,   253,   699,     0,   254,   255,
       0,     0,     0,   700,   257,   258,   259,   701,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,   702,   264,
     265,   703,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,   704,   275,   276,     0,     0,
       0,     0,     0,   705,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,   706,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   707,   304,   305,   306,   307,   708,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   709,   315,
       0,     0,   710,   317,   711,   318,     0,   319,   712,   713,
     714,   715,   716,   324,   325,   326,   327,   328,     0,   717,
     329,   330,     0,     0,   331,   332,   333,   334,   718,     0,
     720,   335,   336,     0,   721,   722,   337,     0,   338,   339,
     723,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,   724,
     348,   349,     0,   350,   351,   725,   353,   354,   355,   356,
     726,   727,   359,   728,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   729,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,   730,   731,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   732,     0,
     733,   396,   397,   398,   399,   400,   734,   735,   403,   404,
     405,   406,     0,   736,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   737,   738,   437,   438,     0,
     439,   440,   739,   442,   443,   444,   740,   741,   445,   446,
     447,   448,   742,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   743,   455,   456,     0,   744,   745,   746,   747,
       0,     0,     0,     0,     0,   461,   462,     0,   748,   749,
     750,   464,   465,   466,   751,   467,   468,   752,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   753,   477,     0,     0,   754,   755,   756,   757,
     478,     0,     0,   479,   758,     0,   759,   480,   481,   482,
     760,   761,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   762,     0,     0,     0,
     763,   764,     0,     0,     0,     0,   765,   766,     0,     0,
     767,   768,     0,     0,   769,   770,   137,     0,   664,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   665,     0,   146,   147,   148,   149,   150,   666,
     152,     0,   153,     0,     0,   667,   154,   668,   669,   670,
     155,   671,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,   672,   673,   163,   164,     0,   165,
     674,   675,   167,     0,   168,   169,   170,   171,   676,   173,
       0,   677,   175,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     678,   191,     0,   192,   679,   680,   193,     0,     0,   194,
     681,   195,   682,     0,   196,   683,   684,     0,   197,   198,
     199,   685,   686,   687,     0,     0,     0,     0,   688,   202,
     689,     0,     0,   690,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   691,
       0,   230,   231,   232,   233,   234,   692,   693,   235,   236,
       0,   237,   238,   239,   694,     0,   240,     0,     0,     0,
     695,   242,     0,   243,     0,   244,     0,   245,   696,   247,
     697,     0,   249,     0,   250,     0,   698,     0,   251,   252,
       0,   253,   699,     0,   254,   255,     0,     0,     0,   700,
     257,   258,   259,   701,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,   702,   264,   265,  2692,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,   704,   275,   276,     0,     0,     0,     0,     0,   705,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
     706,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,   707,   304,
     305,   306,   307,   708,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   709,   315,     0,     0,   710,   317,
     711,   318,     0,   319,   712,   713,   714,   715,   716,   324,
     325,   326,   327,   328,     0,   717,   329,   330,     0,     0,
     331,   332,   333,   334,   718,   719,   720,   335,   336,     0,
     721,   722,   337,     0,   338,   339,   723,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,   724,   348,   349,     0,   350,
     351,   725,   353,   354,   355,   356,   726,   727,   359,   728,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   729,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,   730,   731,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   732,     0,   733,   396,   397,   398,
     399,   400,   734,   735,   403,   404,   405,   406,     0,   736,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   737,   738,   437,   438,     0,   439,   440,   739,   442,
     443,   444,   740,   741,   445,   446,   447,   448,   742,   449,
     450,     0,     0,   451,   452,   453,   454,     0,   743,   455,
     456,     0,   744,   745,   746,   747,     0,     0,     0,     0,
       0,   461,   462,     0,   748,   749,   750,   464,   465,   466,
     751,   467,   468,   752,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   753,   477,
       0,     0,   754,   755,   756,   757,   478,     0,     0,   479,
     758,     0,   759,   480,   481,   482,   760,   761,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   762,     0,     0,     0,   763,   764,     0,     0,
       0,     0,   765,   766,     0,     0,   767,   768,     0,     0,
     769,   770,   137,     0,   664,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   665,     0,
     146,   147,   148,   149,   150,   666,   152,     0,   153,     0,
       0,   667,   154,   668,   669,   670,   155,   671,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     672,   673,   163,   164,     0,   165,   674,   675,   167,     0,
     168,   169,   170,   171,   676,   173,     0,   677,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   678,   191,     0,   192,
     679,   680,   193,     0,     0,   194,   681,   195,   682,     0,
     196,   683,   684,     0,   197,   198,   199,   685,   686,   687,
       0,     0,     0,     0,   688,   202,   689,     0,     0,   690,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   691,     0,   230,   231,   232,
     233,   234,   692,   693,   235,   236,     0,   237,   238,   239,
     694,     0,   240,     0,     0,     0,   695,   242,     0,   243,
       0,   244,     0,   245,   696,   247,   697,     0,   249,     0,
     250,     0,   698,     0,   251,   252,     0,   253,   699,     0,
     254,   255,     0,     0,     0,   700,   257,   258,   259,   701,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     702,   264,   265,  2737,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   704,   275,   276,
       0,     0,     0,     0,     0,   705,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   706,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   707,   304,   305,   306,   307,   708,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     709,   315,     0,     0,   710,   317,   711,   318,     0,   319,
     712,   713,   714,   715,   716,   324,   325,   326,   327,   328,
       0,   717,   329,   330,     0,     0,   331,   332,   333,   334,
     718,   719,   720,   335,   336,     0,   721,   722,   337,     0,
     338,   339,   723,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   724,   348,   349,     0,   350,   351,   725,   353,   354,
     355,   356,   726,   727,   359,   728,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   729,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   730,   731,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     732,     0,   733,   396,   397,   398,   399,   400,   734,   735,
     403,   404,   405,   406,     0,   736,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   737,   738,   437,
     438,     0,   439,   440,   739,   442,   443,   444,   740,   741,
     445,   446,   447,   448,   742,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   743,   455,   456,     0,   744,   745,
     746,   747,     0,     0,     0,     0,     0,   461,   462,     0,
     748,   749,   750,   464,   465,   466,   751,   467,   468,   752,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   753,   477,     0,     0,   754,   755,
     756,   757,   478,     0,     0,   479,   758,     0,   759,   480,
     481,   482,   760,   761,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   762,     0,
       0,     0,   763,   764,     0,     0,     0,     0,   765,   766,
       0,     0,   767,   768,     0,     0,   769,   770,   137,     0,
     664,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   665,     0,   146,   147,   148,   149,
     150,   666,   152,     0,   153,     0,     0,   667,   154,   668,
     669,   670,   155,   671,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   672,   673,   163,   164,
       0,   165,   674,   675,   167,     0,   168,   169,   170,   171,
     676,   173,     0,   677,   175,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,     0,   187,
     188,   189,   678,   191,     0,   192,   679,   680,   193,     0,
       0,   194,   681,   195,   682,     0,   196,   683,   684,     0,
     197,   198,   199,   685,   686,   687,     0,     0,     0,     0,
     688,   202,   689,     0,     0,  3514,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   691,     0,   230,   231,   232,   233,   234,   692,   693,
     235,   236,     0,   237,   238,   239,   694,     0,   240,     0,
       0,     0,   695,   242,     0,   243,     0,   244,     0,   245,
     696,   247,   697,     0,   249,     0,   250,     0,   698,     0,
     251,   252,     0,   253,   699,     0,   254,   255,     0,     0,
       0,   700,   257,   258,   259,   701,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,   702,   264,   265,   703,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,   704,   275,   276,     0,     0,     0,     0,
       0,   705,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,   706,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     707,   304,   305,   306,   307,   708,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   709,   315,     0,     0,
     710,   317,   711,   318,     0,   319,   712,   713,   714,   715,
     716,   324,   325,   326,   327,   328,     0,   717,   329,   330,
       0,     0,   331,   332,   333,   334,   718,   719,   720,   335,
     336,     0,   721,   722,   337,     0,   338,   339,   723,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,   724,   348,   349,
       0,   350,   351,   725,   353,   354,   355,   356,   726,   727,
     359,   728,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   729,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,   730,   731,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   732,     0,   733,   396,
     397,   398,   399,   400,   734,   735,   403,   404,   405,   406,
       0,   736,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   737,   738,   437,   438,     0,   439,   440,
     739,   442,   443,   444,   740,   741,   445,   446,   447,   448,
     742,   449,   450,     0,     0,   451,   452,   453,   454,     0,
     743,   455,   456,     0,   744,   745,   746,   747,     0,     0,
       0,     0,     0,   461,   462,     0,   748,   749,   750,   464,
     465,   466,   751,   467,   468,   752,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     753,   477,     0,     0,   754,   755,   756,   757,   478,     0,
       0,   479,   758,     0,   759,   480,   481,   482,   760,   761,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   762,     0,     0,     0,   763,   764,
       0,     0,     0,     0,   765,   766,     0,     0,   767,   768,
       0,     0,   769,   770,   137,     0,   664,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     665,     0,   146,   147,   148,   149,   150,   666,   152,     0,
     153,     0,     0,   667,   154,   668,   669,   670,   155,   671,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   672,   673,   163,   164,     0,   165,   674,   675,
     167,     0,   168,   169,   170,   171,   676,   173,     0,   677,
     175,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,     0,   187,   188,   189,   678,   191,
       0,   192,   679,   680,   193,     0,     0,   194,   681,   195,
     682,     0,   196,   683,   684,     0,   197,   198,   199,   685,
     686,   687,     0,     0,     0,     0,   688,   202,   689,     0,
       0,   690,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   691,     0,   230,
     231,   232,   233,   234,   692,   693,   235,   236,     0,   237,
     238,   239,   694,     0,   240,     0,     0,     0,   695,   242,
       0,   243,     0,   244,     0,   245,   696,   247,   697,     0,
     249,     0,   250,     0,   698,     0,   251,   252,     0,   253,
     699,     0,   254,   255,     0,     0,     0,   700,   257,   258,
     259,   701,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,   702,   264,   265,   703,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,   704,
     275,   276,     0,     0,     0,     0,     0,   705,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,   706,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,   707,   304,   305,   306,
     307,   708,   308,   309,  4369,     0,     0,     0,   310,   311,
     312,   313,   709,   315,     0,     0,   710,   317,   711,   318,
       0,   319,   712,   713,   714,   715,   716,   324,   325,   326,
     327,   328,     0,   717,   329,   330,     0,     0,   331,   332,
     333,   334,   718,     0,   720,   335,   336,     0,   721,   722,
     337,     0,   338,   339,   723,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,   724,   348,   349,     0,   350,   351,   725,
     353,   354,   355,   356,   726,   727,   359,   728,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   729,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,   730,
     731,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   732,     0,   733,   396,   397,   398,   399,   400,
     734,   735,   403,   404,   405,   406,     0,   736,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   737,
     738,   437,   438,     0,   439,   440,   739,   442,   443,   444,
     740,   741,   445,   446,   447,   448,   742,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   743,   455,   456,     0,
     744,   745,   746,   747,     0,     0,     0,     0,     0,   461,
     462,     0,   748,   749,   750,   464,   465,   466,   751,   467,
     468,   752,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   753,   477,     0,     0,
     754,   755,   756,   757,   478,     0,     0,   479,   758,     0,
     759,   480,   481,   482,   760,   761,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     762,     0,     0,     0,   763,   764,     0,     0,     0,     0,
     765,   766,     0,     0,   767,   768,     0,     0,   769,   770,
     137,     0,   664,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   665,     0,   146,   147,
     148,   149,   150,   666,   152,     0,   153,     0,     0,   667,
     154,   668,   669,   670,   155,   671,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   672,   673,
     163,   164,     0,   165,   674,   675,   167,     0,   168,   169,
     170,   171,   676,   173,     0,   677,   175,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
       0,   187,   188,   189,   678,   191,     0,   192,   679,   680,
     193,     0,     0,   194,   681,   195,   682,     0,   196,   683,
     684,     0,   197,   198,   199,   685,   686,   687,     0,     0,
       0,     0,   688,   202,   689,     0,     0,   690,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   691,     0,   230,   231,   232,   233,   234,
     692,   693,   235,   236,     0,   237,   238,   239,   694,     0,
     240,     0,     0,     0,   695,   242,     0,   243,     0,   244,
       0,   245,   696,   247,   697,     0,   249,     0,   250,     0,
     698,     0,   251,   252,     0,   253,   699,     0,   254,   255,
       0,     0,     0,   700,   257,   258,   259,   701,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,   702,   264,
     265,   703,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,   704,   275,   276,     0,     0,
       0,     0,     0,   705,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,   706,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   707,   304,   305,   306,   307,   708,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   709,   315,
       0,     0,   710,   317,   711,   318,     0,   319,   712,   713,
     714,   715,   716,   324,   325,   326,   327,   328,     0,   717,
     329,   330,     0,     0,   331,   332,   333,   334,   718,     0,
     720,   335,   336,     0,   721,   722,   337,     0,   338,   339,
     723,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,   724,
     348,   349,     0,   350,   351,   725,   353,   354,   355,   356,
     726,   727,   359,   728,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   729,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,   730,   731,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   732,     0,
     733,   396,   397,   398,   399,   400,   734,   735,   403,   404,
     405,   406,     0,   736,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   737,   738,   437,   438,     0,
     439,   440,   739,   442,   443,   444,   740,   741,   445,   446,
     447,   448,   742,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   743,   455,   456,     0,   744,   745,   746,   747,
       0,     0,     0,     0,     0,   461,   462,     0,   748,   749,
     750,   464,   465,   466,   751,   467,   468,   752,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   753,   477,     0,     0,   754,   755,   756,   757,
     478,     0,     0,   479,   758,     0,   759,   480,   481,   482,
     760,   761,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   762,     0,     0,     0,
     763,   764,     0,     0,     0,     0,   765,   766,     0,     0,
     767,   768,     0,     0,   769,   770,   137,     0,   664,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   665,     0,   146,   147,   148,   149,   150,   666,
     152,     0,   153,     0,     0,   667,   154,   668,   669,   670,
     155,   671,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,   672,   673,   163,   164,     0,   165,
     674,   675,   167,     0,   168,   169,   170,   171,   676,   173,
       0,   677,   175,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     678,   191,     0,   192,   679,   680,   193,     0,     0,   194,
     681,   195,   682,     0,   196,   683,   684,     0,   197,   198,
     199,   685,   686,   687,     0,     0,     0,     0,   688,   202,
     689,     0,     0,   690,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   691,
       0,   230,   231,   232,   233,   234,   692,   693,   235,   236,
       0,   237,   238,   239,   694,     0,   240,     0,     0,     0,
     695,   242,     0,   243,     0,   244,     0,   245,   696,   247,
     697,     0,   249,     0,   250,     0,   698,     0,   251,   252,
       0,   253,   699,     0,   254,   255,     0,     0,     0,   700,
     257,   258,   259,   701,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,   702,   264,   265,  1740,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,   704,   275,   276,     0,     0,     0,     0,     0,   705,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
     706,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,   707,   304,
     305,   306,   307,   708,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   709,   315,     0,     0,   710,   317,
     711,   318,     0,   319,   712,   713,   714,   715,   716,   324,
     325,   326,   327,   328,     0,   717,   329,   330,     0,     0,
     331,   332,   333,   334,   718,     0,   720,   335,   336,     0,
     721,   722,   337,     0,   338,   339,   723,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,   724,   348,   349,     0,   350,
     351,   725,   353,   354,   355,   356,   726,   727,   359,   728,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   729,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,   730,   731,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   732,     0,   733,   396,   397,   398,
     399,   400,   734,   735,   403,   404,   405,   406,     0,   736,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   737,   738,   437,   438,     0,   439,   440,   739,   442,
     443,   444,   740,   741,   445,   446,   447,   448,   742,   449,
     450,     0,     0,   451,   452,   453,   454,     0,   743,   455,
     456,     0,   744,   745,   746,   747,     0,     0,     0,     0,
       0,   461,   462,     0,   748,   749,   750,   464,   465,   466,
     751,   467,   468,   752,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   753,   477,
       0,     0,   754,   755,   756,   757,   478,     0,     0,   479,
     758,     0,   759,   480,   481,   482,   760,   761,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   762,     0,     0,     0,   763,   764,     0,     0,
       0,     0,   765,   766,     0,     0,   767,   768,     0,     0,
     769,   770,   137,     0,   664,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   665,     0,
     146,   147,   148,   149,   150,   666,   152,     0,   153,     0,
       0,   667,   154,   668,   669,   670,   155,   671,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     672,   673,   163,   164,     0,   165,   674,   675,   167,     0,
     168,   169,   170,   171,   676,   173,     0,   677,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   678,   191,     0,   192,
     679,   680,   193,     0,     0,   194,   681,   195,   682,     0,
     196,   683,   684,     0,   197,   198,   199,   685,   686,   687,
       0,     0,     0,     0,   688,   202,   689,     0,     0,   690,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   691,     0,   230,   231,   232,
     233,   234,   692,   693,   235,   236,     0,   237,   238,   239,
     694,     0,   240,     0,     0,     0,   695,   242,     0,   243,
       0,   244,     0,   245,   696,   247,   697,     0,   249,     0,
     250,     0,   698,     0,   251,   252,     0,   253,   699,     0,
     254,   255,     0,     0,     0,   700,   257,   258,   259,   701,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     702,   264,   265,  1742,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   704,   275,   276,
       0,     0,     0,     0,     0,   705,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   706,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   707,   304,   305,   306,   307,   708,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     709,   315,     0,     0,   710,   317,   711,   318,     0,   319,
     712,   713,   714,   715,   716,   324,   325,   326,   327,   328,
       0,   717,   329,   330,     0,     0,   331,   332,   333,   334,
     718,     0,   720,   335,   336,     0,   721,   722,   337,     0,
     338,   339,   723,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   724,   348,   349,     0,   350,   351,   725,   353,   354,
     355,   356,   726,   727,   359,   728,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   729,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   730,   731,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     732,     0,   733,   396,   397,   398,   399,   400,   734,   735,
     403,   404,   405,   406,     0,   736,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   737,   738,   437,
     438,     0,   439,   440,   739,   442,   443,   444,   740,   741,
     445,   446,   447,   448,   742,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   743,   455,   456,     0,   744,   745,
     746,   747,     0,     0,     0,     0,     0,   461,   462,     0,
     748,   749,   750,   464,   465,   466,   751,   467,   468,   752,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   753,   477,     0,     0,   754,   755,
     756,   757,   478,     0,     0,   479,   758,     0,   759,   480,
     481,   482,   760,   761,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   762,     0,
       0,     0,   763,   764,     0,     0,     0,     0,   765,   766,
       0,     0,   767,   768,     0,     0,   769,   770,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,   668,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,     0,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,     0,   187,
     188,   189,   190,   191,     0,   192,     0,     0,   193,     0,
       0,   194,     0,   195,     0,     0,   196,     0,     0,     0,
     197,   198,   199,     0,     0,  1778,     0,     0,     0,     0,
     201,   202,   689,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,   693,
     235,   236,     0,   237,   238,   239,   694,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,   699,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,   706,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,   717,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,   721,   722,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
     743,   455,   456,     0,  1779,   458,   459,  1780,     0,     0,
       0,     0,     0,   461,   462,     0,     0,   749,   463,   464,
     465,   466,   751,   467,   468,   752,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,     0,     0,     0,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   769,   770,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,     0,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,  2524,   187,
     188,   189,   190,   191,     0,   192,     0,     0,   193,     0,
       0,   194,     0,   195,     0,     0,   196,     0,     0,     0,
     197,   198,   199,     0,     0,   200,     0,     0,     0,     0,
     201,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,   504,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
    2082,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,  2083,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,  3087,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
    2038,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,  -478,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   507,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,     0,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,  2595,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,     0,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,  2524,   187,   188,   189,
     190,   191,     0,   192,     0,     0,   193,     0,     0,   194,
       0,   195,     0,     0,   196,     0,     0,     0,   197,   198,
     199,     0,     0,   200,     0,     0,     0,     0,   201,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,   504,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,  2082,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,  2083,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   507,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   490,     0,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,  2595,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,     0,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,     0,   187,   188,   189,   190,   191,
       0,   192,     0,     0,   193,     0,     0,   194,     0,   195,
       0,     0,   196,     0,     0,     0,   197,   198,   199,     0,
       0,   200,     0,     0,     0,     0,   201,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,  2383,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     490,     0,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,  2839,     0,     0,   144,     0,     0,   145,   770,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   490,     0,
       0,     0,   137,     0,   138,   139,   140,   141,   142,     0,
    4498,   143,     0,     0,     0,   144,  4499,   770,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   490,     0,
       0,     0,   137,     0,   138,   139,   140,   141,   142,  1121,
       0,   143,     0,     0,     0,   144,     0,   770,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,  1326,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   490,     0,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,   540,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,     0,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
       0,   187,   188,   189,   190,   191,     0,   192,     0,     0,
     193,     0,     0,   194,     0,   195,     0,     0,   196,     0,
       0,     0,   197,   198,   199,     0,     0,   200,     0,     0,
       0,     0,   201,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   490,     0,     0,     0,
       0,   137,  2325,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   540,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,   192,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,   202,     0,     0,     0,     0,   203,
     204,     0,   205,     0,     0,     0,   206,     0,   207,   208,
     209,   210,   211,     0,     0,     0,   212,     0,     0,   213,
     214,   215,     0,     0,     0,   216,     0,   217,   218,     0,
     219,   220,   221,     0,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,     0,   230,   231,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,     0,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
     244,     0,   245,   246,   247,   248,     0,   249,     0,   250,
       0,     0,     0,   251,   252,     0,   253,     0,     0,   254,
     255,     0,     0,     0,   256,   257,   258,   259,     0,     0,
     260,   261,   262,     0,     0,   263,     0,     0,     0,     0,
     264,   265,     0,     0,     0,   266,     0,     0,     0,   267,
     268,     0,   269,   270,     0,     0,     0,   271,     0,     0,
     272,   273,     0,     0,   274,     0,     0,   275,   276,     0,
       0,     0,     0,     0,   277,   278,     0,   279,     0,   280,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,     0,   304,   305,   306,   307,     0,   308,
     309,     0,     0,     0,     0,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,   318,     0,   319,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
       0,   329,   330,     0,     0,   331,   332,   333,   334,     0,
       0,     0,   335,   336,     0,     0,     0,   337,     0,   338,
     339,   340,     0,   341,   342,   343,     0,   344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   345,   346,   347,
       0,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,     0,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,     0,   372,     0,     0,     0,   373,   374,   375,
     376,   377,     0,     0,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
     389,     0,   390,   391,     0,   392,   393,   394,     0,   395,
       0,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,     0,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,     0,   451,   452,
     453,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,     0,     0,     0,     0,     0,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
     486,     0,   487,   488,   489,     0,     0,   490,     0,     0,
       0,   137,     0,   138,   139,   140,   141,   142,  2594,     0,
     143,     0,     0,     0,   144,     0,  2595,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,   192,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,   202,     0,     0,     0,     0,   203,
     204,     0,   205,     0,     0,     0,   206,     0,   207,   208,
     209,   210,   211,     0,     0,     0,   212,     0,     0,   213,
     214,   215,     0,     0,     0,   216,     0,   217,   218,     0,
     219,   220,   221,     0,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,     0,   230,   231,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,     0,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
     244,     0,   245,   246,   247,   248,     0,   249,     0,   250,
       0,     0,     0,   251,   252,     0,   253,     0,     0,   254,
     255,     0,     0,     0,   256,   257,   258,   259,     0,     0,
     260,   261,   262,     0,     0,   263,     0,     0,     0,     0,
     264,   265,     0,     0,     0,   266,     0,     0,     0,   267,
     268,     0,   269,   270,     0,     0,     0,   271,     0,     0,
     272,   273,     0,     0,   274,     0,     0,   275,   276,     0,
       0,     0,     0,     0,   277,   278,     0,   279,     0,   280,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,     0,   304,   305,   306,   307,     0,   308,
     309,     0,     0,     0,     0,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,   318,     0,   319,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
       0,   329,   330,     0,     0,   331,   332,   333,   334,     0,
       0,     0,   335,   336,     0,     0,     0,   337,     0,   338,
     339,   340,     0,   341,   342,   343,     0,   344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   345,   346,   347,
       0,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,     0,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,     0,   372,     0,     0,     0,   373,   374,   375,
     376,   377,     0,     0,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
     389,     0,   390,   391,     0,   392,   393,   394,     0,   395,
       0,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,     0,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,     0,   451,   452,
     453,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,     0,     0,     0,     0,     0,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
     486,     0,   487,   488,   489,     0,     0,   490,     0,     0,
       0,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,  4499,   770,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,   192,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,   202,     0,     0,     0,     0,   203,
     204,     0,   205,     0,     0,     0,   206,     0,   207,   208,
     209,   210,   211,     0,     0,     0,   212,     0,     0,   213,
     214,   215,     0,     0,     0,   216,     0,   217,   218,     0,
     219,   220,   221,     0,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,     0,   230,   231,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,     0,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
     244,     0,   245,   246,   247,   248,     0,   249,     0,   250,
       0,     0,     0,   251,   252,     0,   253,     0,     0,   254,
     255,     0,     0,     0,   256,   257,   258,   259,     0,     0,
     260,   261,   262,     0,     0,   263,     0,     0,     0,     0,
     264,   265,     0,     0,     0,   266,     0,     0,     0,   267,
     268,     0,   269,   270,     0,     0,     0,   271,     0,     0,
     272,   273,     0,     0,   274,     0,     0,   275,   276,     0,
       0,     0,     0,     0,   277,   278,     0,   279,     0,   280,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,     0,   304,   305,   306,   307,     0,   308,
     309,     0,     0,     0,     0,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,   318,     0,   319,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
       0,   329,   330,     0,     0,   331,   332,   333,   334,     0,
       0,     0,   335,   336,     0,     0,     0,   337,     0,   338,
     339,   340,     0,   341,   342,   343,     0,   344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   345,   346,   347,
       0,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,     0,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,     0,   372,     0,     0,     0,   373,   374,   375,
     376,   377,     0,     0,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
     389,     0,   390,   391,     0,   392,   393,   394,     0,   395,
       0,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,     0,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,     0,   451,   452,
     453,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,     0,     0,     0,     0,     0,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
     486,     0,   487,   488,   489,     0,     0,   490,     0,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,   540,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,     0,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   190,   191,     0,   192,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,   202,     0,     0,     0,     0,   203,   204,     0,
     205,     0,     0,     0,   206,     0,   207,   208,   209,   210,
     211,     0,     0,     0,   212,     0,     0,   213,   214,   215,
       0,     0,     0,   216,     0,   217,   218,     0,   219,   220,
     221,     0,     0,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,     0,   230,   231,   232,   603,   234,     0,
       0,   235,   236,     0,   237,   238,   239,     0,     0,   240,
       0,     0,     0,   604,   242,     0,   243,     0,   244,     0,
     245,   246,   247,   248,     0,   249,     0,   250,     0,     0,
       0,   251,   252,     0,   253,     0,     0,   254,   255,     0,
       0,     0,   256,   257,   258,   259,     0,     0,   260,   261,
     262,     0,     0,   263,     0,     0,     0,     0,   264,   265,
       0,     0,     0,   266,     0,     0,     0,   267,   268,     0,
     269,   270,     0,     0,     0,   271,     0,     0,   272,   273,
       0,     0,   274,     0,     0,   275,   276,     0,     0,     0,
       0,     0,   277,   278,     0,   279,     0,   280,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,   283,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,     0,   301,   302,
     303,     0,   304,   305,   306,   307,     0,   308,   309,     0,
       0,     0,     0,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,   318,     0,   319,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,     0,   329,
     330,     0,     0,   331,   332,   333,   334,     0,     0,     0,
     335,   336,     0,     0,     0,   337,     0,   338,   339,   340,
       0,   341,   342,   343,     0,   344,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   345,   346,   347,     0,   348,
     349,     0,   605,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,   360,   361,   362,     0,   363,     0,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,     0,     0,   373,   374,   375,   376,   377,
       0,     0,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,   389,     0,
     390,   391,     0,   392,   393,   394,     0,   395,     0,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
       0,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,     0,   451,   452,   453,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,     0,
       0,     0,     0,     0,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,   486,     0,
     487,   488,   489,     0,     0,   490,     0,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,   540,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   490,     0,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   145,   770,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   190,
     191,     0,   192,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,   202,     0,
       0,     0,     0,   203,   204,     0,   205,     0,     0,     0,
     206,     0,   207,   208,   209,   210,   211,     0,     0,     0,
     212,     0,     0,   213,   214,   215,     0,     0,     0,   216,
       0,   217,   218,     0,   219,   220,   221,     0,     0,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,     0,
     230,   231,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,     0,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,   244,     0,   245,   246,   247,   248,
       0,   249,     0,   250,     0,     0,     0,   251,   252,     0,
     253,     0,     0,   254,   255,     0,     0,     0,   256,   257,
     258,   259,     0,     0,   260,   261,   262,     0,     0,   263,
       0,     0,     0,     0,   264,   265,     0,     0,     0,   266,
       0,     0,     0,   267,   268,     0,   269,   270,     0,     0,
       0,   271,     0,     0,   272,   273,     0,     0,   274,     0,
       0,   275,   276,     0,     0,     0,     0,     0,   277,   278,
       0,   279,     0,   280,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,     0,   301,   302,   303,     0,   304,   305,
     306,   307,     0,   308,   309,     0,     0,     0,     0,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
     318,     0,   319,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,     0,     0,   329,   330,     0,     0,   331,
     332,   333,   334,     0,     0,     0,   335,   336,     0,     0,
       0,   337,     0,   338,   339,   340,     0,   341,   342,   343,
       0,   344,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   345,   346,   347,     0,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
     360,   361,   362,     0,   363,     0,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,     0,   372,     0,     0,
       0,   373,   374,   375,   376,   377,     0,     0,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,   389,     0,   390,   391,     0,   392,
     393,   394,     0,   395,     0,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,     0,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,     0,   451,   452,   453,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,     0,     0,     0,     0,     0,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,   486,     0,   487,   488,   489,     0,
       0,   490,     0,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   145,
    2595,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   900,   901,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,     0,   187,   188,   189,   190,   191,     0,
     192,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,   202,     0,     0,     0,
     902,   203,   204,     0,   205,     0,     0,     0,   206,     0,
     207,   208,   209,   210,   211,     0,     0,     0,   212,     0,
       0,   213,   214,   215,     0,     0,     0,   216,     0,   217,
     218,     0,   219,   220,   221,     0,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,     0,   230,   231,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,     0,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,   244,     0,   245,   246,   247,   248,     0,   903,
       0,   250,     0,     0,     0,   251,   252,     0,   253,     0,
       0,   254,   255,     0,     0,     0,   256,   257,   258,   259,
       0,     0,   260,   261,   262,     0,     0,   263,     0,     0,
       0,     0,   264,   265,     0,     0,     0,   266,     0,     0,
       0,   267,   268,     0,   269,   270,     0,     0,     0,   271,
       0,     0,   272,   273,     0,     0,   274,     0,     0,   275,
     276,     0,     0,     0,     0,     0,   277,   278,     0,   904,
       0,   280,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,     0,   304,   305,   306,   307,
       0,   308,   309,     0,     0,     0,     0,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,   318,     0,
     319,     0,   320,   321,   322,   323,   324,   325,   905,   327,
     328,     0,     0,   329,   330,     0,     0,   331,   332,   333,
     334,     0,     0,     0,   335,   336,     0,     0,     0,   337,
       0,   338,   339,   340,     0,   341,   342,   343,     0,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   345,
     346,   347,     0,   348,   349,     0,   350,   351,   906,   353,
     354,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,     0,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,     0,     0,   373,
     374,   375,   376,   377,     0,     0,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,   389,     0,   390,   391,     0,   392,   393,   394,
       0,   395,     0,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   907,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,     0,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,     0,
     451,   452,   453,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,     0,     0,     0,     0,     0,   908,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,   486,     0,   487,   488,   489,     0,     0,   490,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,   909,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,     0,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
       0,   187,   188,   189,   190,   191,     0,   192,     0,     0,
     193,     0,     0,   194,     0,   195,     0,     0,   196,     0,
       0,     0,   197,   198,   199,     0,     0,   200,     0,     0,
       0,     0,   201,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,   616,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   134,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   490,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,  1376,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,   616,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   490,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,  1712,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   900,   901,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,     0,   187,   188,   189,   190,   191,
       0,   192,     0,     0,   193,     0,     0,   194,     0,   195,
       0,     0,   196,     0,     0,     0,   197,   198,   199,     0,
       0,   200,     0,     0,     0,     0,   201,   202,     0,     0,
       0,   902,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     903,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     904,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   905,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   906,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   907,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     490,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   145,   909,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,   192,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,   202,     0,     0,     0,     0,   203,
     204,     0,   205,     0,     0,     0,   206,     0,   207,   208,
     209,   210,   211,     0,     0,     0,   212,     0,     0,   213,
     214,   215,     0,     0,     0,   216,     0,   217,   218,     0,
     219,   220,   221,     0,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,     0,   230,   231,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,     0,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
     244,     0,   245,   246,   247,   248,     0,   249,     0,   250,
       0,     0,     0,   251,   252,     0,   253,     0,     0,   254,
     255,     0,     0,     0,   256,   257,   258,   259,     0,     0,
     260,   261,   262,     0,     0,   263,     0,     0,     0,     0,
     264,   265,     0,     0,     0,   266,     0,     0,     0,   267,
     268,     0,   269,   270,     0,     0,     0,   271,     0,     0,
     272,   273,     0,     0,   274,     0,     0,   275,   276,   616,
       0,     0,     0,     0,   277,   278,     0,   279,     0,   280,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,     0,   304,   305,   306,   307,     0,   308,
     309,     0,     0,     0,     0,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,   318,     0,   319,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
       0,   329,   330,     0,     0,   331,   332,   333,   334,     0,
       0,     0,   335,   336,     0,     0,     0,   337,     0,   338,
     339,   340,     0,   341,   342,   343,     0,   344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   345,   346,   347,
       0,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,     0,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,     0,   372,     0,     0,     0,   373,   374,   375,
     376,   377,     0,     0,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
     389,     0,   390,   391,     0,   392,   393,   394,     0,   395,
       0,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,     0,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,     0,   451,   452,
     453,   454,     0,   134,   455,   456,     0,   457,   458,   459,
     460,     0,     0,     0,     0,     0,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
     486,     0,   487,   488,   489,     0,     0,   490,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,  3547,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,     0,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1267,   185,   186,     0,   187,
     188,   189,   190,   191,     0,   192,     0,     0,   193,     0,
       0,   194,     0,   195,     0,     0,   196,     0,     0,     0,
     197,   198,   199,     0,     0,   200,     0,     0,     0,     0,
     201,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   145,  1268,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   190,
     191,     0,   192,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,   202,     0,
       0,     0,     0,   203,   204,     0,   205,     0,     0,     0,
     206,     0,   207,   208,   209,   210,   211,     0,     0,     0,
     212,     0,     0,   213,   214,   215,     0,     0,     0,   216,
       0,   217,   218,     0,   219,   220,   221,     0,     0,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,     0,
     230,   231,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,     0,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,   244,     0,   245,   246,   247,   248,
       0,   249,     0,   250,     0,     0,     0,   251,   252,     0,
     253,     0,     0,   254,   255,     0,     0,     0,   256,   257,
     258,   259,     0,     0,   260,   261,   262,     0,     0,   263,
       0,     0,     0,     0,   264,   265,     0,     0,     0,   266,
       0,     0,     0,   267,   268,     0,   269,   270,     0,     0,
       0,   271,     0,     0,   272,   273,     0,     0,   274,     0,
       0,   275,   276,     0,     0,     0,     0,     0,   277,   278,
       0,   279,     0,   280,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,     0,   301,   302,   303,     0,   304,   305,
     306,   307,     0,   308,   309,     0,     0,     0,     0,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
     318,     0,   319,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,     0,     0,   329,   330,     0,     0,   331,
     332,   333,   334,     0,     0,     0,   335,   336,     0,     0,
       0,   337,     0,   338,   339,   340,     0,   341,   342,   343,
       0,   344,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   345,   346,   347,     0,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
     360,   361,   362,     0,   363,     0,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,     0,   372,     0,     0,
       0,   373,   374,   375,   376,   377,     0,     0,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,   389,     0,   390,   391,     0,   392,
     393,   394,     0,   395,     0,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,     0,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,     0,   451,   452,   453,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,     0,     0,     0,     0,     0,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,   486,     0,   487,   488,   489,     0,
       0,   490,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,  1268,
     146,   147,   148,   149,   150,   151,     0,     0,  -366,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3971,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,  3972,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,     0,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3973,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3974,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3975,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3976,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -321,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -321,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3978,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -321,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,  4491,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,  2158,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,  2869,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,  3220,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,  3552,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,  2502,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,  2503,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,  2504,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,  2505,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,  1037,  1038,     0,   335,   336,
       0,     0,  2506,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
    4478,   565,  4479,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,  2507,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,  1365,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,  1366,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,  1367,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
     616,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,  1368,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   134,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  1378,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,  1379,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,   616,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,  1903,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,  1904,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   724,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,  1905,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  1365,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,  1366,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,   616,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,   994,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
     616,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   134,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,  1400,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,   616,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,   971,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,   972,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   973,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,  2411,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,   616,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,  1365,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
     616,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   134,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,   616,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,  2865,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   134,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,  4398,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,  4399,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,   565,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,  1073,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,   902,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,  1879,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,  2075,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,   902,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,  2957,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,  2965,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,  2989,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
    3053,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   134,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,  1802,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,  1803,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -366,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3971,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,  3972,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,  -336,  -336,   216,     0,  -336,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3973,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3974,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3975,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3976,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -321,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -321,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3978,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -321,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -366,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3971,     0,   163,   164,     0,
     165,     0,     0,     0,     0,   168,   169,   170,  3972,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   179,     0,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,     0,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,   213,   214,   215,     0,  -357,
       0,   216,     0,  -357,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,     0,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,  3973,   237,   238,   239,     0,     0,     0,     0,     0,
       0,     0,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,   255,     0,     0,     0,
     256,   257,   258,   259,  3974,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,     0,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
    3975,     0,     0,   271,     0,     0,     0,   273,     0,     0,
     274,  3976,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,  -321,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,     0,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,  3977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,     0,     0,   385,
       0,   387,  -321,     0,   388,     0,     0,     0,   390,     0,
       0,   392,   393,   394,  3978,   395,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,     0,   405,   406,     0,
     407,     0,     0,     0,     0,   409,   410,   411,     0,     0,
       0,     0,   413,     0,     0,     0,   414,     0,     0,   416,
       0,   418,     0,   419,     0,     0,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,   434,
     435,   436,     0,     0,     0,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,   474,     0,     0,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,  -357,
       0,  -321,     0,     0,     0,   485,     0,     0,   487,     0,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -366,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3971,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,  3972,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,  -354,     0,   216,     0,  -354,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3973,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3974,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3975,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3976,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -321,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -321,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3978,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,  -354,     0,  -321,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -366,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3971,     0,   163,   164,     0,
     165,     0,     0,     0,     0,   168,   169,   170,  3972,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   179,     0,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,     0,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,  4296,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,     0,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,  3973,   237,   238,   239,     0,     0,     0,     0,     0,
       0,     0,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,   255,     0,     0,     0,
     256,   257,   258,   259,  3974,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,     0,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
    3975,     0,     0,   271,     0,     0,     0,   273,     0,     0,
     274,  3976,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,  -321,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,     0,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,  3977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,     0,     0,   385,
       0,   387,  -321,     0,   388,     0,     0,     0,   390,     0,
       0,   392,   393,   394,  3978,   395,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,     0,   405,   406,     0,
     407,     0,     0,     0,     0,   409,   410,   411,     0,     0,
       0,     0,   413,     0,     0,     0,   414,     0,     0,   416,
       0,   418,     0,   419,     0,     0,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,   434,
     435,   436,     0,     0,     0,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,   474,     0,     0,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,  -321,     0,     0,     0,   485,     0,     0,   487,     0,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -366,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3971,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,  3972,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,  -359,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3973,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3974,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3975,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3976,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -321,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -321,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3978,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -321,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -366,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3971,     0,   163,   164,     0,
     165,     0,     0,     0,     0,   168,   169,   170,  3972,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   179,     0,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,     0,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,  4403,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,     0,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,  3973,   237,   238,   239,     0,     0,     0,     0,     0,
       0,     0,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,   255,     0,     0,     0,
     256,   257,   258,   259,  3974,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,     0,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
    3975,     0,     0,   271,     0,     0,     0,   273,     0,     0,
     274,  3976,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,  -321,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,     0,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,  3977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,     0,     0,   385,
       0,   387,  -321,     0,   388,     0,     0,     0,   390,     0,
       0,   392,   393,   394,  3978,   395,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,     0,   405,   406,     0,
     407,     0,     0,     0,     0,   409,   410,   411,     0,     0,
       0,     0,   413,     0,     0,     0,   414,     0,     0,   416,
       0,   418,     0,   419,     0,     0,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,   434,
     435,   436,     0,     0,     0,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,   474,     0,     0,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,  -321,     0,     0,     0,   485,     0,     0,   487,     0,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -366,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3971,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,  3972,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,  4449,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3973,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3974,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3975,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3976,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -321,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -321,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3978,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -321,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -366,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3971,     0,   163,   164,     0,
     165,     0,     0,     0,     0,   168,   169,   170,  3972,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   179,     0,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,     0,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,  -340,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,     0,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,  3973,   237,   238,   239,     0,     0,     0,     0,     0,
       0,     0,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,   255,     0,     0,     0,
     256,   257,   258,   259,  3974,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,     0,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
    3975,     0,     0,   271,     0,     0,     0,   273,     0,     0,
     274,  3976,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,  -321,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,     0,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,  3977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,     0,     0,   385,
       0,   387,  -321,     0,   388,     0,     0,     0,   390,     0,
       0,   392,   393,   394,  3978,   395,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,     0,   405,   406,     0,
     407,     0,     0,     0,     0,   409,   410,   411,     0,     0,
       0,     0,   413,     0,     0,     0,   414,     0,     0,   416,
       0,   418,     0,   419,     0,     0,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,   434,
     435,   436,     0,     0,     0,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,   474,     0,     0,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,  -321,     0,     0,     0,   485,     0,     0,   487,     0,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -366,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3971,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,  3972,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,     0,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3973,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3974,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3975,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3976,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -321,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -321,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3978,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -321,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   137,   490,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -366,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3971,     0,   163,   164,     0,
     165,     0,     0,     0,     0,   168,   169,   170,  3972,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   179,     0,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,     0,   191,     0,   192,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,     0,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,     0,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,  3973,   237,   238,   239,     0,     0,     0,     0,     0,
       0,     0,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,   255,     0,     0,     0,
     256,   257,   258,   259,  3974,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,     0,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
    3975,     0,     0,   271,     0,     0,     0,   273,     0,     0,
     274,  3976,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,  -321,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,     0,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,  3977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,     0,     0,   385,
       0,   387,  -321,     0,   388,     0,     0,     0,   390,     0,
       0,   392,   393,   394,  3978,   395,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,     0,   405,   406,     0,
     407,     0,     0,     0,     0,   409,   410,   411,     0,     0,
       0,     0,   413,     0,     0,     0,   414,     0,     0,   416,
       0,   418,     0,   419,     0,     0,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,   434,
     435,   436,     0,     0,     0,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,  4299,     0,     0,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,  -321,     0,     0,     0,   485,     0,     0,   487,     0,
     489,     0,   137,   490,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,     0,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
       0,     0,   163,   164,     0,   165,     0,     0,     0,     0,
     168,   169,   170,     0,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,   192,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,     0,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,     0,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,     0,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,     0,   490
};

static const yytype_int16 yycheck[] =
{
       6,   640,   577,   987,   596,   885,  1576,   649,   650,  1709,
     576,   577,   988,    19,  1509,  1856,  1077,    23,   122,  1821,
     905,   906,    20,     6,  1267,   707,    32,  1403,  1118,  1307,
     915,  1141,    30,    39,   521,   925,    42,  1171,    36,   612,
      46,   947,  1071,  1072,  1507,  1384,  2038,    53,   923,  1498,
    2556,  1498,   625,  1194,  2174,   667,  2343,   947,  1171,  2179,
    1201,  2484,  3308,  1267,  1464,  2846,  2109,  2444,  2445,  2387,
      23,  1498,  1108,   948,  1313,  1488,  1488,  2270,  2904,  2472,
    1492,  2673,  1494,  2134,  2005,   992,  2064,  1843,    94,   636,
     637,   992,  1202,  1203,  1782,   654,  1206,  1207,  1208,  1209,
    2134,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,  2452,
     116,  1932,   118,  3045,  2465,   121,   122,   123,  2405,  2551,
    2529,     4,  2473,  2557,  3183,    17,  2001,  2707,  2007,  3535,
    3313,  1984,  2011,  1956,  1957,   118,   775,     9,   121,  2765,
      19,    94,  3100,  2022,  1557,  1557,  1478,    51,    71,  2001,
    1973,   763,   764,   765,  1414,  2034,  2308,    29,  2701,    25,
     967,    47,  2705,    35,   776,  3371,  3372,  1990,  1991,  3375,
      16,    17,  1432,  1488,    34,  3331,  2157,  1492,    20,  1494,
    1440,  1441,    76,  2006,    17,  1854,  2009,  2010,  3394,  2012,
      16,    17,  2015,  2016,  3400,    60,  2019,  2513,  2514,    16,
      17,  2024,   949,    30,    19,    36,  2029,  2030,  2031,  2032,
    2033,   106,    75,   157,  2037,    20,  2039,  1993,    25,    19,
    1975,  2324,  2045,  2046,  2047,  2048,   129,    21,  2051,   127,
    2053,   127,   805,    16,    17,    65,  2089,   122,  2091,  2092,
    2123,  2649,  1557,    62,  2097,  2098,   147,  2517,    62,    58,
    1240,   282,  1947,  2106,  2107,   231,  2953,   682,  2111,  2134,
     132,   153,    21,  3580,   240,    59,    60,    83,   153,   264,
     108,   281,  3787,   315,   153,    34,    16,    17,   157,    34,
      66,   360,  2134,  3577,  4128,  3531,   128,   122,   388,    48,
     863,   418,  2395,   122,  3637,  2118,  2119,  2120,  2121,   357,
      59,    60,   223,   249,   191,    36,   321,   214,   451,    16,
      17,   249,    19,   387,    16,    17,   423,   470,   153,    16,
      17,   512,   260,   128,   153,  2641,  2642,   405,    21,   754,
    2264,    16,    17,    12,   267,   233,   181,    12,   443,    16,
      17,    34,   157,    23,  2687,  4246,  2689,  3948,  4249,    75,
     237,   486,    12,   124,   265,    48,    12,   157,   136,   361,
     470,   435,   547,   229,   173,   191,    59,    60,   177,  2833,
     188,   432,   547,   187,   519,   147,    16,    17,   191,   188,
     211,   720,    25,   147,    16,    17,   354,   418,   251,   227,
    3653,   578,  2430,  3656,   191,    63,    16,    17,   208,  3764,
      16,    17,   506,   742,   380,  2258,   547,  1049,  1050,  1051,
     255,   109,  3618,   173,   112,    34,   755,   756,    68,    68,
    2401,  3627,   229,    16,    17,  1107,  3791,   610,    16,    17,
     440,   160,   510,   401,  3174,   227,  2471,   188,  3178,  1121,
     544,    60,   252,   240,  3650,   311,   633,   582,  3711,  3655,
     511,   634,   265,   598,   639,  2257,   274,   632,   137,  2923,
     462,   652,   137,  2675,   375,   523,   573,  4368,   239,    16,
      17,  1018,  3878,    16,    17,  3769,  1452,   137,  2532,   632,
     211,   137,   282,   610,   562,   165,  4087,   622,   375,   191,
     109,   188,  1377,   112,    16,    17,    51,   640,   142,  3842,
     506,   120,   508,   449,   311,    16,    17,    16,    17,  3755,
     319,   356,  3695,  2856,  2857,    16,    17,   455,  2911,   525,
     441,  4365,   632,   529,   602,   251,   459,  2022,   374,   634,
     545,   377,   632,  1408,   540,   479,  1411,  1876,   544,  2839,
     546,  1416,   320,  2952,   448,   603,  2955,  2956,   374,   304,
    2973,   377,    79,   559,   633,   262,   571,  2535,  1197,    40,
     634,  2539,  1975,  1975,  4079,   157,  4081,  1442,  1443,   994,
     576,  1478,    16,    17,  1464,  2553,  2554,  1478,   584,   247,
    2572,  1993,    16,    17,   615,  1267,   229,  2565,  2001,   403,
     632,   374,   157,  1205,   377,    10,   602,   413,  2649,   609,
    1843,   649,   650,  1090,  1091,   414,   612,   426,   614,  3792,
    1222,   453,   519,   608,  3572,  2649,  2594,  3243,   418,   625,
     626,   627,   157,  3320,  1111,  2478,   632,  1737,   634,  2056,
     636,   637,   418,  1120,   374,   641,   642,   377,  1748,  1843,
     646,  1751,  2517,   124,   627,  1132,  1133,  1134,   453,  1556,
     656,   657,   658,  1140,   414,  1556,   662,   633,   488,    71,
    1975,  3069,   534,    16,    17,  2517,  1926,   374,   311,   157,
     377,  2941,   374,   626,  3500,   377,   570,   374,  1993,   632,
     377,    16,    17,   555,  3310,  2538,   584,  2540,   584,   374,
     562,  1438,   377,  2671,  2547,  1731,   640,   374,   802,  1246,
     377,   707,  2805,  2806,  2807,  2686,   607,   602,  2561,   632,
    2123,  2123,  1285,   585,   357,  2568,   547,  4123,   610,  3778,
    3876,  2134,  2134,  2546,   610,   558,   345,  2580,  2581,  2582,
     634,   558,   597,  2586,   374,  1542,  2559,   377,  2407,  2515,
    3923,  2496,   374,   558,   590,   377,   638,   610,   651,  2852,
    2853,  2854,  3068,   638,   374,  2608,  3099,   377,   374,   638,
    2643,   377,   768,  1310,   770,   579,    16,    17,   634,  2464,
    1760,  3089,   632,   619,  2649,  4092,  4070,  1350,  1325,  3359,
     618,   374,   576,   625,   377,  2117,   374,  2704,   634,   377,
     796,   797,   798,   619,   800,   801,   802,  2649,   804,   805,
    1373,   905,   619,   638,   810,   909,   910,   633,  2123,   638,
    3390,  3391,  3355,  3771,   797,   615,   547,   576,   801,  2134,
     924,   804,    16,    17,  2647,   634,   470,   374,  2980,  4235,
     377,   374,  2766,  1392,   377,   607,   619,   843,  2640,  1412,
     153,   567,  2880,   607,  4027,    25,  3389,   853,    16,    17,
     633,   634,   374,   551,  3397,   377,   554,   863,   864,   610,
     528,  3404,   868,   374,   590,   374,   377,   486,   377,   519,
     519,    16,    17,   374,   634,   604,   377,  2912,  2913,   619,
     523,  3093,   986,   576,    16,    17,  2349,   479,    16,    17,
    4096,    51,  4098,   448,   173,  3329,  2950,   637,   173,   905,
     853,  3590,    56,   909,   910,  3298,  2476,   600,  3317,  3302,
     223,   864,   619,  3345,   479,   868,  1482,   619,   924,    16,
      17,    32,   619,  1496,    16,    17,   368,   634,    16,    17,
     374,  3249,   634,   377,   619,   554,   633,   809,   465,   632,
     374,  3873,   619,   377,   479,  2786,    11,  3298,   633,   634,
    3039,  3302,  3252,    16,    17,    25,   633,   634,   364,   141,
     603,   967,   375,   582,  3307,   153,    16,    17,   304,  1017,
     122,   186,  1654,   124,   857,   155,  3263,  1862,   191,   619,
     986,   369,   988,  2824,  4167,    81,   246,   619,   632,   390,
     405,   479,   636,   633,   634,   407,  4242,  1882,  2976,   619,
      46,   633,   634,   619,    16,    17,  1565,   143,   223,   119,
    3975,  3976,  1018,   633,   634,   613,  1922,   633,  3069,  1067,
    4010,   374,    16,    17,   377,   100,   619,   186,   192,   138,
     511,   619,  1922,    43,    69,  3069,  2531,  2532,   125,   374,
    1915,   634,   377,    69,   786,   633,  1952,   194,   640,   229,
    1925,   532,  3861,  1928,  1929,    16,    17,    16,    17,   124,
     150,   470,  1952,  1069,   223,   208,  2941,  1073,  2444,  2445,
     368,   161,   619,    16,    17,    63,   619,   265,  2899,   560,
    1184,    16,    17,  2496,  2496,   155,   633,   634,   239,  2941,
     633,   634,   176,  2849,  2204,   510,   567,   619,  2159,  3691,
    3293,  1107,  3023,  2515,  2517,   640,   632,    11,   619,   252,
     619,  2799,   634,  1755,   640,  1121,  1069,  1221,   619,   590,
    1073,   120,   633,   634,   374,   634,   538,   377,   441,   240,
    2369,   311,   470,   634,   876,   414,   162,   350,  1750,   414,
    2281,  2590,  4132,  2590,   155,  3024,   547,   562,   157,   561,
      16,    17,   640,   264,   127,   119,  3259,   153,   418,   229,
      52,  1843,   208,  2590,  1268,  1171,  3975,  3976,  2970,   279,
      62,  3564,  3565,   615,  1816,   619,   393,   357,  1184,   188,
     374,  2496,   246,   377,    75,   619,   282,   602,   343,   633,
    1763,   194,   464,  2453,  3069,   282,   356,  2287,  2288,   633,
    2515,   470,   356,   488,  2904,   538,   374,   359,   541,   377,
    2117,   366,  1316,     8,  4095,  1221,  2117,  3069,  1765,   183,
    1226,   634,   386,   632,   333,  1231,  4007,   636,   634,   374,
    2643,  2643,   377,    16,    17,   541,  2649,  2649,  4019,   238,
    1246,   311,   374,   379,  2280,   377,   374,  2357,  3337,   377,
     360,  4077,   640,  2387,  2290,   204,  1829,  1830,   405,   247,
     233,  1267,  1268,    21,  3256,  3954,   619,   365,   119,   265,
    4516,    16,    17,    16,    17,   359,    34,   374,  1231,  1285,
     377,   634,   374,   373,   619,   377,   374,   357,   448,   377,
      48,  1297,   390,  1299,   632,  1301,   478,   138,   201,   634,
     249,    59,    60,   470,  1310,  4114,  4115,    16,    17,   588,
    1316,   374,   377,   588,   377,   279,   427,   615,   478,  1325,
    1326,  2721,  3699,   487,   374,   638,  3179,   377,  2643,    16,
      17,    16,    17,   343,  2649,    16,    17,  4302,  4303,   393,
    2474,   376,  3462,   523,  1350,   229,   357,  1353,  1301,  3327,
     376,  2814,    16,    17,   418,  1361,    16,    17,  1364,   634,
     251,  2474,   374,   632,   352,   377,  3168,  1373,   271,   619,
     274,  3349,  3174,  1326,   589,  3693,  3178,  1383,  1384,   271,
     374,  1485,   547,   377,   634,   122,   181,  1393,  1394,  1395,
    1396,  1397,  1398,  4202,   541,     6,   360,  1403,   231,   136,
      12,   127,   405,  1409,  1410,    20,  1412,   240,  4217,  1415,
    1393,  1394,  1395,   374,  1397,   374,   377,   463,   377,  1302,
     608,   420,  4231,   603,   642,   619,   375,  1410,   279,  1435,
     589,   374,  1415,  2567,   377,   590,  3353,  3354,   276,   374,
     634,  4431,   377,  1396,  3361,  1398,    57,  3364,  3365,   547,
     638,   619,   470,   523,  2567,  2950,   546,   265,    41,   569,
     105,  4342,  4343,   848,  3381,   632,   634,   632,   441,   176,
     479,    16,    17,   357,   619,   470,   153,   265,  3395,  1485,
     564,  4290,  1435,  3400,  3401,  3402,  3403,   619,    12,   634,
    1496,   619,   333,  4302,  4303,  1501,   580,   470,  1504,  1505,
     338,   119,   634,  3926,   223,  1388,   634,   233,   374,   360,
     271,   377,   523,   128,    16,    17,   625,   626,   627,   628,
     629,   630,   619,   125,   512,   137,   525,   619,  2941,  3024,
     141,   619,     0,   603,   105,   155,  1542,   634,   541,  4348,
     528,  2426,   634,   632,    16,    17,   634,   380,  1501,  4358,
     133,   640,  1505,    16,    17,  1561,   619,  1563,  1564,   541,
    1566,  1567,  3880,   282,   634,   183,   164,   375,   213,   619,
    3423,   634,   475,  1579,   590,  1581,   594,   595,    16,    17,
    1563,  1564,   800,   320,   634,   970,  4395,   375,  4397,  3709,
      34,   374,   603,   164,   377,   400,   194,   358,  4407,    16,
      17,   470,    19,    16,    17,   569,  2849,   619,  1491,   229,
     212,   584,   608,   137,   632,  4424,    60,  4426,   634,  4428,
      16,    17,   634,   194,   640,   619,  4435,  2688,   616,   374,
     597,   374,   377,   600,   377,   547,  4445,   632,  3925,   523,
     634,  2782,   638,  2921,   127,  2849,   353,   354,  1654,  1655,
    4459,  4460,   359,    16,    17,    12,  3069,  3069,   619,   632,
     619,   279,  1766,   356,   304,   374,  4475,  4476,   377,    16,
      17,  4480,  2284,   634,   513,   634,   619,     8,    16,    17,
     282,   519,    16,    17,   619,    42,   164,   374,  2440,   374,
     377,   634,   377,   374,  2181,   414,   377,   470,   633,    30,
    2834,    16,    17,    16,    17,    16,    17,   546,  2195,  1715,
     374,    16,    17,   377,   374,   441,   194,   377,   569,   603,
     632,  2834,    16,    17,    16,    17,   289,   290,   266,    59,
      60,   269,   157,    90,    16,    17,   381,   357,    95,    69,
     433,  2228,   360,   354,   470,   390,    16,    17,  3197,  3196,
     233,  1757,   397,   619,  3069,  1859,   488,  1763,  4264,  1765,
    1766,  3804,  3805,   632,   523,   524,  3229,   633,   527,   528,
     578,  1777,   531,   413,   533,   470,  1782,  3579,   191,    16,
      17,  1787,   157,   478,  1790,  2537,   627,   628,   629,   630,
    1796,  1797,    72,  1799,    16,    17,    16,    17,   353,   354,
    3500,   590,    75,  1809,    16,    17,   417,  1813,   419,   204,
    2297,  2563,  2564,    16,    17,   124,   202,  3809,   576,    16,
      17,   590,  2434,  1829,  1830,  1831,  1832,   164,   560,   374,
      16,    17,   377,   640,   405,   558,   619,  1843,   596,   597,
    1846,  1847,  1848,  1796,  1797,   634,  1799,   492,   488,    17,
     633,   640,   119,  1859,    16,    17,  1809,   564,   584,   632,
    1813,   219,   204,   221,   633,   634,  2432,   430,   431,   122,
    1876,   222,   374,   580,   619,   377,   619,   415,  1831,  1832,
    3733,    12,   155,    16,    17,  1891,   538,   244,   633,   541,
     633,   240,   145,  1846,  1847,  1848,    16,    17,   541,   594,
     595,   227,   374,   523,   508,   377,   632,   187,   289,   290,
     619,   374,   261,    97,   377,   134,   183,    16,    17,    16,
      17,  1927,   308,   309,   633,   529,   252,   313,   314,   182,
     149,   544,   619,  1939,   619,   587,   374,   632,   619,   377,
    1946,   227,   587,  3282,  1827,   222,   633,   227,   633,    16,
      17,   569,   633,   119,   191,   619,   229,   374,   441,   619,
     377,   374,   227,   320,   377,   418,  2846,   633,   634,   633,
     541,   227,   252,   633,  1927,    16,    17,    82,   374,  2545,
     204,   377,  2888,   603,    16,    17,   439,   470,  2894,  1004,
    1005,   562,   626,  1946,    16,    17,    11,   102,  2888,   633,
     132,   611,   612,  1886,  2894,   369,   137,    16,    17,    16,
      17,   374,   279,  3103,   377,  3361,  3294,   183,  3364,  3365,
     473,  2896,    16,    17,   634,   595,   383,   374,  2132,  1044,
     377,   602,  2136,   237,  2919,  3381,   374,  3127,  3128,   377,
     374,   633,   634,   377,  2050,   211,   230,  2587,   807,   430,
     431,    47,  3905,  3906,  3907,  3908,   633,   634,  2064,   374,
    3150,   374,   377,   374,   377,   249,   377,   633,   634,   374,
    2174,   478,   377,   191,   619,  2179,   260,  1960,   351,   633,
     374,   212,   374,   377,   357,   377,  1969,  1970,   633,  4137,
     105,   282,   374,   360,  4142,   377,  4144,  1980,  1981,  1982,
    1983,   584,  1985,  1986,   374,  3612,  3613,   377,   626,   124,
     633,   634,   550,   279,   157,   633,   638,   619,  3625,  3253,
     501,   502,   503,   403,   640,  3632,  2132,    39,   585,   155,
    2136,   633,  2138,   371,    46,  2141,   510,   374,   495,   632,
     377,   187,  2148,  2149,  2150,  2151,  2788,   619,  2154,   632,
    3657,   424,   374,  3660,   374,   377,   619,   377,  2141,   343,
       6,   633,   374,   633,   634,   377,    17,  2849,  2174,  2273,
     633,   374,  3306,  2179,   377,    17,    11,   374,   535,   194,
     377,   619,   458,  1286,   191,   632,  1289,   119,   374,  1292,
     122,   377,   441,  3306,   360,  2148,  2149,  2150,  4021,  2303,
     633,   634,   619,   229,   632,  3339,   619,  2090,   223,  4050,
    2093,  2094,   374,  2096,   632,   377,  2099,  2100,  2101,  2102,
    2103,  2104,  2105,   619,   119,  2108,  3339,  2110,   590,   591,
     632,   593,   632,   595,  4057,   550,   634,  4060,  4061,  4062,
    4063,   374,   138,   632,   377,   633,   634,    59,    60,  4051,
     523,   183,  3734,  3735,   374,   632,   619,   377,  2831,   632,
     275,   633,   634,   539,   633,   634,    26,  2273,   544,   547,
     633,   455,   619,   633,   634,   374,   632,   374,   377,   211,
     377,   619,   632,  4136,   632,   619,   633,   138,   183,  4115,
    2777,    19,  2298,  3322,  3323,   633,   138,  2303,   168,   633,
     632,   574,   569,   632,   619,   632,   619,   374,   619,    69,
     377,   587,   632,    73,   619,    75,   211,    12,  2324,  3409,
     633,   640,   633,  3699,   219,   619,   602,   619,   633,   632,
     603,   357,   632,   374,  4157,  4158,   377,   619,   366,   633,
     524,   633,   374,  4166,   632,   377,  3589,   279,   632,   619,
    2356,   633,   374,   147,   148,   377,    25,  1158,  1159,  4161,
     632,  3246,   122,   633,  2370,   374,   632,   374,   377,    97,
     377,   632,    19,   504,   505,   632,   507,  4077,   509,  2483,
    2484,  2387,   619,   590,   279,  2391,   633,   634,  3449,  2395,
     405,   633,   634,   524,  3637,   458,  3530,   619,   632,   619,
     633,   634,  2408,   569,  2410,   632,    75,   619,   366,   138,
     372,   633,   404,   633,   632,   117,   619,  3530,   633,   634,
    2960,   633,   619,   633,   634,   153,  2432,   632,   360,   157,
     633,   633,   634,   619,   633,   634,   633,   333,  2444,  2445,
     633,   634,   137,   632,  3939,  3940,   366,   633,   633,   634,
      97,   632,  2556,   637,  2994,   633,   634,   619,   186,   632,
     188,   476,  3002,   632,  4290,   360,  3006,   632,  2474,   633,
     634,   633,   633,   634,   632,   119,   204,  2483,  2484,  4049,
      75,   209,   333,   633,   634,   632,   619,   633,   634,   633,
     634,   333,   252,   632,    89,   223,  3472,   523,   632,   619,
     633,   538,   230,   633,   634,   174,   153,   633,   634,   237,
     157,   240,  3052,   633,   633,   634,   218,   212,  2524,   632,
     619,   249,   619,  2529,   539,  2408,   541,  2525,  2534,  2535,
     633,   634,   260,  2539,   633,  2541,   633,   265,  2536,   183,
     632,   188,   632,    72,  2542,  2551,   274,  2553,  2554,   632,
    2556,  2557,   619,    25,   632,    25,  2562,   204,    75,  2565,
     229,  2567,   209,   633,   634,   634,   633,   211,  2566,  4395,
    2576,  4397,   587,  2571,   633,   634,   632,   603,   619,  2577,
    2578,  2587,   632,   230,   105,   481,   482,   619,  2594,  2595,
     237,    75,   633,   353,   354,   633,   634,   619,  4424,   359,
    2606,   633,   249,    75,   333,    75,   366,   632,   634,   632,
     619,   633,   619,   260,   632,   343,   633,   634,   265,   633,
     634,   323,   632,  2576,   633,   327,   632,   274,   633,   634,
     481,   482,   334,  4459,  4460,   279,   223,   569,   366,   481,
     482,   632,   311,   403,  1797,   119,  1799,   375,   122,   633,
     634,  3138,  3447,  3448,  1083,  1084,  1085,   632,   187,   254,
    2543,  2544,   633,   634,  2670,  2671,  1095,   633,   634,   633,
     634,   155,   193,   632,   569,   632,  4517,   405,   633,   634,
     633,   634,   351,   155,   632,   155,   632,  2570,   357,   633,
     634,   633,   634,  1846,  1847,  1848,   343,  1126,   227,   632,
    1129,    62,   174,  3190,   174,   632,   227,  4159,  4160,   183,
     412,    72,   229,   632,   474,  3281,   360,  2670,    31,   366,
      97,  1150,  1151,   252,    85,  1154,   632,   455,   375,   625,
     626,   627,   628,   629,   630,   632,   331,   211,   632,    62,
    3265,  3266,   632,  1172,  1173,   229,  3222,  3223,   632,    72,
     478,   632,   481,   482,   275,   632,  2639,   229,   405,   229,
     632,   356,    85,   523,    77,   632,   468,  3512,  3513,   632,
     632,   632,   623,   624,   625,   626,   627,   628,   629,   630,
     632,   623,   624,   625,   626,   627,   628,   629,   630,  3431,
    3585,   632,   493,  2799,    49,  2801,   524,   276,  2804,  2805,
    2806,  2807,    49,   634,  3914,   279,   366,  2813,   455,   504,
     505,   506,   507,   508,   509,   366,   464,   578,   627,   579,
     478,   416,   640,   640,   119,  2831,   187,   122,  2834,   524,
     163,   478,   193,   632,   351,   265,   188,   519,   151,   311,
     357,   311,   538,  2849,   163,   519,  2852,  2853,  2854,  3825,
     578,   276,   154,   230,   523,  3831,   634,    84,   387,  2865,
    2813,   589,   590,   634,   187,    13,   227,   351,   634,  2973,
     193,   367,   249,   357,   403,   534,   633,   524,   153,   351,
     608,   351,   610,   260,   122,   357,   360,   357,   183,   108,
     639,   252,     6,  3459,   623,   624,   625,   626,   627,   628,
     629,   630,   632,   605,   227,   633,   634,   424,   107,   637,
     638,     4,    16,    17,  4048,   510,   211,   634,   602,   621,
     469,   390,   240,   634,   387,   569,    58,    56,   433,   252,
     108,   578,   168,   220,   603,  4048,   634,   634,    69,   119,
     424,   640,   122,   590,    12,   607,  2952,   633,    96,  2955,
    2956,   137,   633,     9,  2960,   476,  3886,  3887,   634,   632,
     119,   608,   640,   610,   264,   633,   343,  2973,   633,   633,
    2976,    32,   155,   640,   640,   496,   639,   634,   634,   127,
     276,   634,  2865,   276,   279,   276,   633,   634,  2994,    75,
     637,   638,   276,   141,    49,   276,  3002,   276,   634,   157,
    3006,  3796,  3797,   183,  3799,  3800,   523,   538,   632,   113,
     114,   115,   116,   117,  2897,  2898,   164,  2900,   539,   167,
     541,   271,   108,   544,   183,   634,  3032,   634,   388,  3035,
     558,   211,   180,   634,  3040,   558,   387,    12,   634,   523,
    3046,   173,   403,   634,  3050,   177,  3052,   157,   634,    69,
     634,   523,   211,   523,   202,   240,   188,   574,   579,   627,
     536,  3067,   243,  3046,   387,   360,   587,   178,   188,   155,
     634,    78,   583,    80,  3080,   491,   391,   138,   455,   227,
     403,  3087,  3035,   133,   171,   233,   603,   400,   366,   634,
     574,  2974,  3098,   633,   157,   569,   634,     6,   157,   279,
    2983,  4031,    11,   157,    13,  4035,    15,  4241,   157,   422,
     157,   215,   216,   217,   218,   122,  3758,    26,    27,   603,
     279,  4097,   157,   157,   157,   157,   274,  4007,  4241,   157,
     157,   603,   157,   603,  3087,   496,   157,   634,   145,  4019,
     157,   227,   157,   456,   157,   157,   157,   524,    57,   157,
     634,   157,    61,    62,   157,   157,   157,  1586,    67,  4089,
    4090,   157,   634,   585,  3268,   614,    75,   634,   589,   366,
     194,   366,   366,   496,    83,   182,   633,   105,  3184,   240,
     360,   191,   633,   633,    93,   633,  3192,   319,   633,  3072,
     627,   633,   633,   633,   191,   634,   632,   626,   633,   108,
     633,   360,   515,   264,   578,   633,  3772,   633,  4318,   633,
     479,   634,   547,   122,   634,   633,   633,   126,   579,   323,
     633,   325,   326,   327,   310,   134,   135,  1656,   632,  3235,
     334,  1660,   141,   632,   630,   632,   164,   547,   633,   547,
     149,   634,   328,   608,   153,   228,   155,  3253,  3254,   558,
     632,  3257,   632,  3259,   530,  1684,   579,   166,   406,   632,
     202,   191,  3268,  4148,   640,   351,   194,   262,  3274,   632,
     374,    55,   333,   377,   569,  3281,  3282,   186,   426,   632,
      64,   640,   414,   640,   634,   634,   434,   191,   413,   633,
      74,   478,   353,   354,   442,   640,   634,   587,   634,   227,
    3306,  4411,    86,    87,    88,   188,    97,    47,   412,  3192,
     341,  3317,   510,   469,   510,   390,   225,   510,   227,   103,
     510,  3327,   470,  3329,    72,   234,   510,   387,   558,   157,
     158,   133,   250,  3339,   387,   483,   484,   539,   250,  3345,
     499,  3347,   251,  3349,   387,  3920,    97,   275,   138,   387,
     539,   133,    47,  4329,  4330,  4489,  4332,   387,  3462,   436,
     389,   387,   632,   467,   468,   274,   427,   195,   387,  4503,
     632,   387,   275,   387,  4508,   632,  4489,   590,   206,  4513,
     640,   633,   151,   236,   633,   533,   236,   640,   633,   569,
    4503,   633,   633,   633,   138,  4508,   633,   157,   633,   633,
    4513,   310,   634,  4379,   558,  4381,  4382,  3290,   634,  4001,
     569,    26,    27,   558,   562,  3421,    55,   245,   425,   328,
     481,   482,   640,   332,   640,    64,   634,   615,   256,   547,
     558,   271,   632,   494,    47,    74,   584,   523,   586,   230,
    3446,  3447,  3448,  3547,    59,    60,    61,    86,    87,    88,
     240,   558,   157,   539,    69,   283,  3462,   632,   249,   632,
      75,   370,   372,    36,   103,   191,   375,   191,    83,   260,
     191,   237,   400,   382,   191,   547,   547,   405,   387,   230,
    4456,   390,   246,   418,   634,   360,   157,  4471,  4130,  4128,
    4065,   157,   634,   108,   157,   390,   249,    36,   249,   249,
     378,   605,   324,   108,   108,   252,   171,   122,   632,   260,
     252,   126,   421,   640,   558,   619,   620,   621,   204,   347,
    3526,    19,   371,   632,  3530,   547,   435,   436,   437,   438,
    3634,  3414,   451,   632,    12,    13,   387,   640,   322,   112,
     155,  3547,   627,   333,   632,   238,   119,   238,   476,   138,
     632,   460,   343,   632,  3437,   339,   634,   633,   632,   521,
     633,   366,   623,   624,   625,   626,   627,   628,   629,   630,
     634,   633,   223,   112,   640,   366,   633,   266,   387,  3585,
     119,   633,   633,   191,   584,   633,   627,   549,  3594,   333,
     240,   633,   343,   632,   634,   640,   633,  3603,  3596,   418,
     157,   123,   249,   176,   249,  3709,   252,   516,   517,   518,
     183,   539,   227,   401,   523,   366,   544,   366,    96,   234,
     252,   366,   157,   366,   633,   610,  4511,    75,  3634,   634,
     539,    19,   366,   542,   562,   633,   251,   176,   211,   633,
     633,  3594,   634,   632,   183,   633,   181,   634,   634,   127,
     632,   366,   632,   634,   633,  3661,   565,   634,   493,   587,
     195,   633,  3668,   141,   455,   632,   450,   470,   632,   578,
    3774,   206,   211,  3556,   602,   632,   375,  4243,   360,   633,
    3686,   633,   466,   322,   610,   472,   164,   633,   262,   167,
     453,   481,   482,  3699,   274,   310,    11,   202,   418,   144,
     339,   633,   180,  3709,   455,   667,   279,   258,   204,   634,
     672,   157,   480,   328,   392,   249,    75,   249,   634,   632,
     255,   256,   122,   122,   202,   541,  4365,   632,    79,   638,
      89,   399,   632,   524,   640,   140,   488,   481,   482,   633,
     279,   703,   526,   465,   333,   633,   633,   493,   283,   227,
     634,   633,    19,  3636,  3760,   233,   265,   719,    34,   543,
     633,   633,   633,   633,    34,   633,   633,   382,  3774,   633,
     633,   344,   131,   524,   330,   390,   413,   254,   633,   172,
     634,  3787,   355,   274,   372,   610,   359,   360,   237,   632,
    3796,  3797,  3675,  3799,  3800,   632,   274,   633,  4373,   640,
     634,   763,   764,   765,   766,   344,    47,   209,   113,   114,
     115,   116,   117,   634,   776,   350,   330,   157,   590,   590,
     359,   360,  3926,   633,   632,   632,  4465,   466,   632,   584,
     600,   632,   632,   623,   624,   625,   626,   627,   628,   629,
     630,   307,   600,   632,   122,   460,   632,   359,   252,   252,
      34,   634,  4491,   360,    34,   633,   632,   360,   330,   170,
     633,   252,   547,   547,   547,  3871,  3872,   402,   541,   594,
     237,   590,  4514,   366,   590,   355,   514,  3883,   634,   623,
     624,   625,   626,   627,   628,   629,   630,   526,   595,   451,
     360,   372,   481,   482,  3777,   254,   610,   633,   633,    12,
      13,   516,   517,   518,   543,   584,   529,  3913,   523,   632,
     215,   216,   217,   218,   632,   152,    31,   607,   385,  3872,
    3926,   632,   188,   633,   539,   633,   133,   542,   406,   641,
    2093,  2094,   410,  2096,   133,   633,  2099,  2100,  2101,  2102,
    2103,  2104,  2105,   549,   632,  2108,   155,  2110,   426,   405,
     130,  3957,    71,   188,   607,   426,   434,   191,    31,   633,
    3913,    62,   372,   578,   442,    62,  3972,   634,    14,   633,
     632,  3977,   331,   267,   547,   155,   530,     5,   551,   159,
     366,   554,   366,    96,    34,   237,   151,   372,   131,   638,
     372,   564,   470,   140,   353,   354,   569,   356,   632,   572,
      47,   150,    47,    47,    47,   483,   484,    47,   547,   584,
     632,   632,   551,   127,   127,   554,   196,   607,   323,   634,
     325,   326,   327,   151,   222,   564,   281,   638,   141,   334,
     569,   641,   121,   572,   214,   624,   625,   626,   627,   628,
     629,   630,  4048,   146,    47,   632,    47,    47,  4054,    53,
     550,   164,   625,   626,   167,   533,   140,   416,  4162,   638,
     461,   459,  1024,   634,   360,   633,   151,   180,   550,   634,
     207,   634,   638,  4079,   220,  4081,   634,    53,   633,   151,
     130,   633,   188,   188,   562,    47,   625,   626,   188,   202,
     550,   440,   609,   122,   223,   360,   276,   190,   478,   632,
    3982,  4107,  2310,   634,  2112,   155,   584,   412,   586,   159,
    3424,  3423,   650,  2512,   227,  3684,  4309,  1079,  1080,  4012,
     233,  1001,  4131,  3682,  4310,  3686,  1088,  1089,  1090,  1091,
    1092,  1093,  1094,  3870,  4491,  4453,    46,  4020,   578,  1842,
    1102,  1103,  1787,  1105,  1106,  2799,   196,  3861,  1110,  1111,
    3861,   510,  1114,  1115,  1116,  1117,  4162,  1119,  1120,  4461,
    4264,   274,   467,   468,   214,  1127,  1128,  3861,  1130,  1131,
    1132,  1133,  1134,  3861,  3861,  1137,  1138,  1139,  1140,  1141,
    1142,  1143,  1144,  1145,  1146,  1147,  4345,  1149,  3861,  3861,
    1152,  1153,  3861,  4345,  3861,  1157,  3861,  3861,  4195,  1161,
    1162,  1163,  4303,  3861,  3861,  4221,  4220,  2063,  1494,  1042,
    1498,  2370,  1174,  1175,  1176,  3000,  3879,  2826,  3235,  1313,
    4324,  1183,  4054,  3914,   404,  4152,   276,  3528,  1190,  1191,
    1192,  4411,  1194,   413,  4326,  4241,  4373,  4065,  3440,  1201,
    1202,  1203,  1556,  1205,  1206,  1207,  1208,  1209,   428,  1211,
    1212,  1213,  1214,  1215,  1216,  1217,  1218,   516,  4264,  2056,
    1222,  1223,  3073,  2671,  3349,  4202,   446,  3327,  2064,  2597,
    3372,  3372,  3405,  4156,  3823,  3595,  3645,    33,    34,  4243,
    4217,  2755,  3634,    39,  3178,    41,  3175,    43,    44,  2483,
    3170,  4086,    11,   406,  4231,    11,  4089,   410,  1570,  4090,
     605,  4023,  4035,  4031,    60,  3883,   549,  2146,  3831,   489,
    2063,  2590,  1449,   426,  3600,   620,   621,   581,  4324,  1445,
    2382,   434,  3328,  1552,  1831,  2813,  1505,  2399,  2349,   442,
    3230,  2266,  3192,   897,  4340,  4341,   597,  1853,  2788,   519,
    2180,  1121,  3296,  2265,  4350,  4084,  2475,  3942,  4340,  3421,
    4341,  4357,  2291,   109,   404,  3339,   112,   470,   538,  3788,
    4442,   541,  1095,   413,   120,  2404,  3774,  2151,  4251,  4252,
     483,   484,  4160,  1232,  1301,   987,  1326,  2344,   428,  3247,
     987,  3530,  2386,   139,  3248,   987,  3306,  4241,   987,   586,
     663,  1923,   577,  1429,  1924,  4499,   446,  1579,  1776,  1361,
     156,  3347,  1401,  3233,  1333,  4409,  4438,  4271,  4336,  1371,
    4508,  4348,  3637,  3253,  4513,   576,  1361,  2429,  3281,  4425,
     533,  4358,   576,  1712,  4430,  3282,   182,  1389,   184,   672,
    2415,  2421,  1879,  2422,  1813,   570,  1351,   879,  1294,   489,
    3903,   197,   198,  3909,  1561,   571,  2801,   884,   512,   562,
     512,  4002,    -1,    -1,  3670,   650,   650,   650,    -1,  4465,
     703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,
    4407,   584,    -1,   586,    -1,    -1,   719,    -1,    -1,    -1,
      -1,    -1,   238,  4489,    -1,  4491,    -1,    -1,    -1,  4426,
      -1,  4428,    -1,  4499,    -1,    -1,    -1,  4503,  4435,    -1,
      -1,    -1,  4508,    -1,    -1,    -1,    -1,  4513,  4445,    -1,
      -1,    -1,   268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,   278,   766,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4475,  4476,
      -1,    -1,    -1,  4480,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     316,   317,   318,    -1,    -1,    13,    -1,    15,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   335,
     336,   337,    -1,    31,    -1,    -1,   342,    35,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    50,    -1,    -1,    -1,   362,   363,    -1,    57,
      -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
    1592,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,   167,
      -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,  1690,  1691,
    1692,    -1,    -1,    -1,   490,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,  1705,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,   202,    -1,    -1,    -1,    -1,   207,
      -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,    -1,  1731,
      -1,    -1,    -1,    -1,    -1,  1737,    -1,    -1,  1740,    -1,
    1742,  1024,    -1,    -1,    -1,   233,  1748,   235,  1750,  1751,
      -1,    -1,   548,    -1,    -1,   551,    -1,    -1,   554,   555,
     556,   557,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,    -1,    -1,    -1,   274,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1079,  1080,    -1,    -1,
     596,   597,    -1,    -1,    -1,  1088,  1089,    -1,    -1,  1092,
    1093,  1094,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1102,
    1103,    -1,  1105,  1106,  1826,   621,    -1,  1110,    -1,    -1,
      -1,  1114,  1115,  1116,  1117,    -1,  1119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1127,  1128,    -1,  1130,  1131,    -1,
      -1,    -1,    -1,   224,  1137,  1138,  1139,    -1,    -1,  1142,
    1143,  1144,  1145,  1146,  1147,    -1,  1149,    -1,    -1,  1152,
    1153,    -1,    -1,    -1,  1157,  1877,    -1,    -1,  1161,  1162,
    1163,    -1,   370,  1885,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1174,  1175,  1176,    -1,    -1,    -1,    -1,    -1,   387,
    1183,    -1,    -1,    -1,    -1,    -1,    -1,  1190,  1191,  1192,
      -1,    -1,   400,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   411,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,    -1,    -1,    -1,    -1,
    1223,    -1,    -1,    -1,    -1,   433,    -1,    -1,   436,    -1,
     438,    -1,    -1,   441,    -1,    -1,   444,   445,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,   456,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   464,    -1,    -1,    -1,
      -1,    -1,   470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,    -1,    -1,   483,    -1,   485,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,
      27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    15,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    49,    50,    -1,    75,   430,
     431,    -1,    -1,    57,    -1,    -1,    83,    61,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   565,  1361,    -1,
      -1,    -1,    -1,    77,    -1,  2087,    -1,    -1,  1371,   577,
      -1,   108,    -1,   581,    -1,    -1,   584,    -1,    -1,    -1,
      -1,   589,    96,    -1,    -1,   122,  1389,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,   617,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   155,    -1,
      -1,    -1,    -1,    -1,   632,    -1,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2160,    -1,
      -1,    -1,  2164,    -1,    -1,    -1,    -1,  2169,  2170,    -1,
      -1,    -1,    -1,   167,    -1,    -1,  2178,    -1,    -1,  2181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2191,
    2192,   185,  2194,  2195,    -1,  2197,  2198,  2199,  2200,  2201,
      -1,    -1,  2204,    -1,    -1,    -1,   200,    -1,   202,    -1,
     227,  2213,    -1,   207,    -1,    -1,   210,   234,  2220,    -1,
    2222,    -1,  2224,  2225,    -1,  2227,  2228,    -1,    -1,    -1,
    2232,  2233,  2234,    -1,   251,    -1,  2238,  2239,  2240,   233,
    2242,   235,  2244,    -1,  2246,    -1,  2248,   264,  2250,    -1,
      -1,    -1,    -1,  2255,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2274,    -1,    -1,    -1,   270,    -1,    -1,  2281,
     274,    -1,  2284,    -1,    -1,    -1,    -1,    -1,  2290,    -1,
      -1,  2293,    -1,   310,    -1,  2297,    59,    60,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,  1592,
      -1,   328,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2357,    -1,    -1,    -1,   122,
      -1,    -1,    -1,   126,    -1,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,    -1,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   400,  1690,  1691,  1692,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2430,    -1,
      -1,    -1,  2434,    -1,    -1,    -1,    -1,    -1,    -1,   433,
      -1,    -1,   436,   460,   438,    -1,    -1,   441,  1731,    -1,
     444,   445,    -1,    -1,    -1,    -1,    -1,  1740,    -1,  1742,
     454,    -1,   456,    -1,   227,    -1,    -1,    -1,    -1,    24,
     464,   234,    -1,    -1,    -1,    -1,   470,    -1,    -1,    34,
      35,    -1,    -1,    -1,   478,    -1,    -1,    -1,   251,   483,
      -1,   485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   516,
     517,   518,    -1,    -1,    59,    60,   523,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
      -1,   515,   539,    -1,    -1,   542,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,
      -1,    96,    -1,  1826,    -1,    -1,    -1,   310,    -1,    -1,
      -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   578,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
      -1,   565,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   577,    -1,    -1,    -1,   581,    -1,    -1,
     584,    -1,    -1,    -1,  1877,   589,    -1,    -1,    -1,   154,
     155,    -1,  1885,    -1,    -1,   160,    -1,    -1,   163,    -1,
      -1,    -1,    -1,    -1,    -1,   632,    -1,    -1,    -1,   382,
      -1,    -1,    -1,   617,    -1,    -1,    -1,   390,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,   632,   194,
      -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,    -1,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    11,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   226,   227,    -1,    26,    27,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2692,    -1,    -1,    -1,  2696,   250,    -1,   460,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,  2716,  2717,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,  2737,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    -1,  2746,    -1,  2748,    -1,  2750,   304,
      -1,    -1,    -1,   516,   517,   518,   108,    -1,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,   126,  2777,   539,    -1,    -1,   542,
    2782,    -1,   134,    -1,    26,    27,    -1,    -1,    -1,   141,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,
      -1,    -1,    -1,   155,  2087,    -1,    -1,  2809,    -1,    -1,
      -1,    -1,    -1,    -1,   369,   578,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,   186,    -1,    -1,    -1,    -1,   394,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,
     405,    -1,    -1,   408,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   429,   227,    -1,  2160,  2880,    -1,
     122,  2164,   234,    -1,   126,    -1,  2169,  2170,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2178,    -1,    -1,    -1,   251,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2191,  2192,
      -1,  2194,    -1,   155,  2197,  2198,  2199,  2200,  2201,    -1,
     475,    -1,   274,    -1,  2926,    -1,    -1,    -1,    -1,    -1,
    2213,    -1,    -1,   488,    -1,    -1,    -1,  2220,    -1,  2222,
      -1,  2224,  2225,    -1,  2227,    -1,    -1,    -1,    -1,  2232,
    2233,  2234,    -1,    -1,    -1,  2238,  2239,  2240,   310,  2242,
      -1,  2244,    -1,  2246,   519,  2248,    -1,  2250,   523,    -1,
      -1,    -1,  2255,    -1,    -1,    -1,   328,    -1,    -1,    -1,
     332,    -1,    -1,    -1,    -1,   227,   541,    -1,    -1,    -1,
      -1,  2274,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2290,    -1,   251,
    2293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,
      -1,  3043,  3044,   598,    -1,    -1,    -1,    -1,    -1,   604,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   436,    -1,   328,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3106,    -1,    -1,    -1,   460,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3131,
      -1,    -1,    -1,  3135,  3136,    -1,  3138,    -1,    -1,    -1,
     382,    -1,    -1,    -1,    -1,  3147,    -1,  2430,   390,    -1,
    3152,    -1,    -1,  3155,    -1,  3157,  3158,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   516,   517,   518,    -1,    -1,    -1,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,  3190,    -1,
     542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   460,    -1,
      -1,    -1,  3224,    -1,    -1,    -1,   578,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3247,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   516,   517,   518,    -1,    -1,    -1,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,
     542,    -1,    -1,    -1,    -1,    -1,  3308,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3316,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2692,
      -1,    -1,    -1,  2696,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2716,  2717,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2737,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2746,    -1,  2748,    -1,  2750,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2809,    -1,    -1,  3531,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3568,  3569,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3577,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2880,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2926,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3720,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3755,    -1,    -1,    -1,    -1,    -1,    -1,
    3043,  3044,    -1,    -1,    -1,    -1,    -1,  3769,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3131,    -1,
      -1,    -1,  3135,  3136,    -1,    -1,    -1,    -1,    -1,  3861,
      -1,    -1,    -1,    -1,  3147,    -1,    -1,    -1,    -1,  3152,
      -1,    -1,  3155,    -1,  3157,  3158,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3924,    -1,    -1,    -1,    -1,    -1,    -1,  3931,
      -1,  3933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3247,    -1,    -1,  3969,    -1,    -1,
      -1,    -1,    -1,  3975,  3976,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3308,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3316,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4070,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4100,    -1,
    4102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4112,    -1,  4114,  4115,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4141,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4200,    -1,
    4202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4217,  4218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3531,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3568,  3569,  4289,  4290,    -1,
      -1,    -1,    -1,    -1,  3577,    -1,    -1,    -1,    -1,    -1,
    4302,  4303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4318,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4348,    -1,    -1,    -1,
      -1,    -1,    -1,  4355,    -1,    -1,  4358,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4388,    -1,    -1,    -1,
      -1,    -1,    -1,  4395,    -1,  4397,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4407,    -1,    -1,    -1,  4411,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4424,    -1,  4426,    -1,  4428,    -1,    -1,    -1,
      -1,    -1,    -1,  4435,    -1,    -1,    -1,  3720,    -1,    -1,
      -1,    -1,    -1,  4445,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4459,  4460,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3755,  4475,  4476,    -1,    -1,    -1,  4480,    -1,
      -1,    -1,    -1,    -1,  4486,    -1,  3769,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3924,    -1,    -1,    -1,    -1,    -1,    -1,  3931,    -1,
    3933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3969,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4070,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4100,    -1,  4102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4112,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4200,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4242,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4289,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    45,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    -1,    63,    64,    65,    66,
      67,    68,  4355,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,  4388,   103,   104,   105,    -1,
     107,   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,   123,   124,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,   159,   160,    -1,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,  4486,   201,    -1,   203,    -1,   205,    -1,
     207,   208,    -1,   210,   211,    -1,   213,   214,    -1,    -1,
      -1,   218,   219,   220,   221,   222,    -1,   224,   225,   226,
      -1,    -1,   229,  4516,    -1,    -1,   233,   234,   235,   236,
      -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,
     257,   258,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,   276,
      -1,    -1,   279,    -1,    -1,    -1,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,    -1,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,    -1,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,    -1,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,
      -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,    -1,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,    -1,    -1,   542,   543,   544,   545,    -1,
     547,   548,   549,    -1,   551,   552,   553,   554,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,    -1,    -1,   591,   592,   593,   594,   595,    -1,
      -1,   598,   599,    -1,   601,   602,   603,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,
     617,   618,    -1,    -1,   621,    -1,    -1,    -1,   625,   626,
      -1,    -1,    -1,    -1,   631,   632,    -1,    -1,   635,   636,
      -1,    -1,   639,   640,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,    -1,   103,   104,   105,    -1,   107,   108,   109,   110,
     111,   112,    -1,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,   123,   124,    -1,   126,    -1,    -1,    -1,   130,
      -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,   140,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
     151,   152,    -1,   154,   155,   156,    -1,    -1,   159,   160,
      -1,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,   203,    -1,   205,    -1,   207,   208,    -1,   210,
     211,    -1,   213,   214,    -1,    -1,    -1,   218,   219,   220,
     221,   222,    -1,   224,   225,   226,    -1,    -1,   229,    -1,
      -1,    -1,   233,   234,   235,   236,    -1,    -1,   239,    -1,
      -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,   260,
     261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,
     271,    -1,   273,    -1,   275,   276,    -1,    -1,   279,    -1,
      -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,    -1,   344,   345,   346,    -1,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
      -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,    -1,   505,   506,    -1,   508,    -1,    -1,
     511,    -1,    -1,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,    -1,
      -1,   542,   543,   544,   545,    -1,   547,   548,   549,    -1,
     551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,   595,    -1,    -1,   598,   599,    -1,
     601,   602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,    -1,
     621,    -1,    -1,    -1,   625,   626,    -1,    -1,    -1,    -1,
     631,   632,    -1,    -1,   635,   636,    -1,    -1,   639,   640,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,    -1,   103,   104,
     105,    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,   123,   124,
      -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
     135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,   154,
     155,   156,    -1,    -1,   159,   160,    -1,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,   191,   192,    -1,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,   203,    -1,
     205,    -1,   207,   208,    -1,   210,   211,    -1,   213,   214,
      -1,    -1,    -1,   218,   219,   220,   221,   222,    -1,   224,
     225,   226,    -1,    -1,   229,    -1,    -1,    -1,   233,   234,
     235,   236,    -1,    -1,   239,    -1,    -1,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,    -1,    -1,   258,    -1,   260,   261,   262,    -1,    -1,
      -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,    -1,
     275,   276,    -1,    -1,   279,    -1,    -1,    -1,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,    -1,   363,   364,
     365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,   484,
      -1,   486,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,
     505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,    -1,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,    -1,    -1,   542,   543,   544,
     545,    -1,   547,   548,   549,    -1,   551,   552,   553,   554,
      -1,    -1,    -1,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,    -1,    -1,   591,   592,   593,   594,
     595,    -1,    -1,   598,   599,    -1,   601,   602,   603,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,   614,
      -1,   616,   617,   618,    -1,    -1,   621,    -1,    -1,    -1,
     625,   626,    -1,    -1,    -1,    -1,   631,   632,    -1,    -1,
     635,   636,    -1,    -1,   639,   640,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,    -1,   103,   104,   105,    -1,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,   123,   124,    -1,   126,    -1,    -1,
      -1,   130,    -1,   132,   133,   134,   135,   136,    -1,    -1,
      -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,   151,   152,    -1,   154,   155,   156,    -1,    -1,
     159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,   191,   192,    -1,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,   203,    -1,   205,    -1,   207,   208,
      -1,   210,   211,    -1,   213,   214,    -1,    -1,    -1,   218,
     219,   220,   221,   222,    -1,   224,   225,   226,    -1,    -1,
     229,    -1,    -1,    -1,   233,   234,   235,   236,    -1,    -1,
     239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,   258,
      -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1,   268,
     269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,    -1,
     279,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,    -1,   344,   345,   346,    -1,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,    -1,   363,   364,   365,    -1,   367,   368,
     369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,   508,
      -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,    -1,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,    -1,    -1,   542,   543,   544,   545,    -1,   547,   548,
     549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
      -1,    -1,   591,   592,   593,   594,   595,    -1,    -1,   598,
     599,    -1,   601,   602,   603,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,   618,
      -1,    -1,   621,    -1,    -1,    -1,   625,   626,    -1,    -1,
      -1,    -1,   631,   632,    -1,    -1,   635,   636,    -1,    -1,
     639,   640,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,    -1,
     103,   104,   105,    -1,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,   191,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,   205,    -1,   207,   208,    -1,   210,   211,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
     233,   234,   235,   236,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,   260,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,   279,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,   591,   592,
     593,   594,   595,    -1,    -1,   598,   599,    -1,   601,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,
      -1,    -1,   625,   626,    -1,    -1,    -1,    -1,   631,   632,
      -1,    -1,   635,   636,    -1,    -1,   639,   640,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,    -1,   103,   104,   105,    -1,
     107,   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,   123,   124,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,   159,   160,    -1,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,   203,    -1,   205,    -1,
     207,   208,    -1,   210,   211,    -1,   213,   214,    -1,    -1,
      -1,   218,   219,   220,   221,   222,    -1,   224,   225,   226,
      -1,    -1,   229,    -1,    -1,    -1,   233,   234,   235,   236,
      -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,
      -1,   258,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,   276,
      -1,    -1,   279,    -1,    -1,    -1,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,    -1,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,    -1,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,    -1,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,
      -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,    -1,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,    -1,    -1,   542,   543,   544,   545,    -1,
     547,   548,   549,    -1,   551,   552,   553,   554,    -1,    -1,
      -1,    -1,    -1,   560,   561,    -1,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,    -1,    -1,   591,   592,   593,   594,   595,    -1,
      -1,   598,   599,    -1,   601,   602,   603,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,
     617,   618,    -1,    -1,   621,    -1,    -1,    -1,   625,   626,
      -1,    -1,    -1,    -1,   631,   632,    -1,    -1,   635,   636,
      -1,    -1,   639,   640,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,    -1,   103,   104,   105,    -1,   107,   108,   109,   110,
     111,   112,    -1,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,   123,   124,    -1,   126,    -1,    -1,    -1,   130,
      -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,   140,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
     151,   152,    -1,   154,   155,   156,    -1,    -1,   159,   160,
      -1,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,   203,    -1,   205,    -1,   207,   208,    -1,   210,
     211,    -1,   213,   214,    -1,    -1,    -1,   218,   219,   220,
     221,   222,    -1,   224,   225,   226,    -1,    -1,   229,    -1,
      -1,    -1,   233,   234,   235,   236,    -1,    -1,   239,    -1,
      -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,   260,
     261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,
     271,    -1,   273,    -1,   275,   276,    -1,    -1,   279,    -1,
      -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,    -1,   344,   345,   346,    -1,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,    -1,   363,   364,   365,    -1,   367,   368,   369,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
      -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,    -1,   505,   506,    -1,   508,    -1,    -1,
     511,    -1,    -1,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,    -1,
      -1,   542,   543,   544,   545,    -1,   547,   548,   549,    -1,
     551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,   595,    -1,    -1,   598,   599,    -1,
     601,   602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,    -1,
     621,    -1,    -1,    -1,   625,   626,    -1,    -1,    -1,    -1,
     631,   632,    -1,    -1,   635,   636,    -1,    -1,   639,   640,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,    -1,   103,   104,
     105,    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,   123,   124,
      -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
     135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,   154,
     155,   156,    -1,    -1,   159,   160,    -1,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,   203,    -1,
     205,    -1,   207,   208,    -1,   210,   211,    -1,   213,   214,
      -1,    -1,    -1,   218,   219,   220,   221,   222,    -1,   224,
     225,   226,    -1,    -1,   229,    -1,    -1,    -1,   233,   234,
     235,   236,    -1,    -1,   239,    -1,    -1,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,    -1,    -1,   258,    -1,   260,   261,   262,    -1,    -1,
      -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,    -1,
     275,   276,    -1,    -1,   279,    -1,    -1,    -1,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,   353,    -1,
     355,   356,   357,    -1,   359,   360,   361,    -1,   363,   364,
     365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,   484,
      -1,   486,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,
     505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,    -1,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,    -1,    -1,   542,   543,   544,
     545,    -1,   547,   548,   549,    -1,   551,   552,   553,   554,
      -1,    -1,    -1,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,    -1,    -1,   591,   592,   593,   594,
     595,    -1,    -1,   598,   599,    -1,   601,   602,   603,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,   614,
      -1,   616,   617,   618,    -1,    -1,   621,    -1,    -1,    -1,
     625,   626,    -1,    -1,    -1,    -1,   631,   632,    -1,    -1,
     635,   636,    -1,    -1,   639,   640,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,    -1,   103,   104,   105,    -1,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,   123,   124,    -1,   126,    -1,    -1,
      -1,   130,    -1,   132,   133,   134,   135,   136,    -1,    -1,
      -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,   151,   152,    -1,   154,   155,   156,    -1,    -1,
     159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,   203,    -1,   205,    -1,   207,   208,
      -1,   210,   211,    -1,   213,   214,    -1,    -1,    -1,   218,
     219,   220,   221,   222,    -1,   224,   225,   226,    -1,    -1,
     229,    -1,    -1,    -1,   233,   234,   235,   236,    -1,    -1,
     239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,   258,
      -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1,   268,
     269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,    -1,
     279,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,    -1,   344,   345,   346,    -1,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,    -1,   363,   364,   365,    -1,   367,   368,
     369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,   508,
      -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,    -1,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,    -1,    -1,   542,   543,   544,   545,    -1,   547,   548,
     549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
      -1,    -1,   591,   592,   593,   594,   595,    -1,    -1,   598,
     599,    -1,   601,   602,   603,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,   618,
      -1,    -1,   621,    -1,    -1,    -1,   625,   626,    -1,    -1,
      -1,    -1,   631,   632,    -1,    -1,   635,   636,    -1,    -1,
     639,   640,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,    -1,
     103,   104,   105,    -1,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,   205,    -1,   207,   208,    -1,   210,   211,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
     233,   234,   235,   236,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,   260,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,   279,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,   591,   592,
     593,   594,   595,    -1,    -1,   598,   599,    -1,   601,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,
      -1,    -1,   625,   626,    -1,    -1,    -1,    -1,   631,   632,
      -1,    -1,   635,   636,    -1,    -1,   639,   640,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,    -1,   103,   104,   105,    -1,
     107,   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,   123,   124,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,   159,   160,    -1,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,   203,    -1,   205,    -1,
     207,   208,    -1,   210,   211,    -1,   213,   214,    -1,    -1,
      -1,   218,   219,   220,   221,   222,    -1,   224,   225,   226,
      -1,    -1,   229,    -1,    -1,    -1,   233,   234,   235,   236,
      -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,
      -1,   258,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,   276,
      -1,    -1,   279,    -1,    -1,    -1,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,    -1,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,    -1,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,    -1,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,
      -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,    -1,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,    -1,    -1,   542,   543,   544,   545,    -1,
     547,   548,   549,    -1,   551,   552,   553,   554,    -1,    -1,
      -1,    -1,    -1,   560,   561,    -1,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,    -1,    -1,   591,   592,   593,   594,   595,    -1,
      -1,   598,   599,    -1,   601,   602,   603,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,
     617,   618,    -1,    -1,   621,    -1,    -1,    -1,   625,   626,
      -1,    -1,    -1,    -1,   631,   632,    -1,    -1,   635,   636,
      -1,    -1,   639,   640,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,    -1,   103,   104,   105,    -1,   107,   108,   109,   110,
     111,   112,    -1,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,   123,   124,    -1,   126,    -1,    -1,    -1,   130,
      -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,   140,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
     151,   152,    -1,   154,   155,   156,    -1,    -1,   159,   160,
      -1,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,   203,    -1,   205,    -1,   207,   208,    -1,   210,
     211,    -1,   213,   214,    -1,    -1,    -1,   218,   219,   220,
     221,   222,    -1,   224,   225,   226,    -1,    -1,   229,    -1,
      -1,    -1,   233,   234,   235,   236,    -1,    -1,   239,    -1,
      -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,   260,
     261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,
     271,    -1,   273,    -1,   275,   276,    -1,    -1,   279,    -1,
      -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,    -1,   344,   345,   346,    -1,    -1,   349,   350,
     351,   352,   353,    -1,   355,   356,   357,    -1,   359,   360,
     361,    -1,   363,   364,   365,    -1,   367,   368,   369,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
      -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,    -1,   505,   506,    -1,   508,    -1,    -1,
     511,    -1,    -1,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,    -1,
      -1,   542,   543,   544,   545,    -1,   547,   548,   549,    -1,
     551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,   595,    -1,    -1,   598,   599,    -1,
     601,   602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,    -1,
     621,    -1,    -1,    -1,   625,   626,    -1,    -1,    -1,    -1,
     631,   632,    -1,    -1,   635,   636,    -1,    -1,   639,   640,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,    -1,   103,   104,
     105,    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,   123,   124,
      -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
     135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,   154,
     155,   156,    -1,    -1,   159,   160,    -1,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,   203,    -1,
     205,    -1,   207,   208,    -1,   210,   211,    -1,   213,   214,
      -1,    -1,    -1,   218,   219,   220,   221,   222,    -1,   224,
     225,   226,    -1,    -1,   229,    -1,    -1,    -1,   233,   234,
     235,   236,    -1,    -1,   239,    -1,    -1,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,    -1,    -1,   258,    -1,   260,   261,   262,    -1,    -1,
      -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,    -1,
     275,   276,    -1,    -1,   279,    -1,    -1,    -1,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,   344,
     345,   346,    -1,    -1,   349,   350,   351,   352,   353,    -1,
     355,   356,   357,    -1,   359,   360,   361,    -1,   363,   364,
     365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,   484,
      -1,   486,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,
     505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,    -1,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,    -1,    -1,   542,   543,   544,
     545,    -1,   547,   548,   549,    -1,   551,   552,   553,   554,
      -1,    -1,    -1,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,    -1,    -1,   591,   592,   593,   594,
     595,    -1,    -1,   598,   599,    -1,   601,   602,   603,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,   614,
      -1,   616,   617,   618,    -1,    -1,   621,    -1,    -1,    -1,
     625,   626,    -1,    -1,    -1,    -1,   631,   632,    -1,    -1,
     635,   636,    -1,    -1,   639,   640,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,    -1,   103,   104,   105,    -1,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,   123,   124,    -1,   126,    -1,    -1,
      -1,   130,    -1,   132,   133,   134,   135,   136,    -1,    -1,
      -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,   151,   152,    -1,   154,   155,   156,    -1,    -1,
     159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,   203,    -1,   205,    -1,   207,   208,
      -1,   210,   211,    -1,   213,   214,    -1,    -1,    -1,   218,
     219,   220,   221,   222,    -1,   224,   225,   226,    -1,    -1,
     229,    -1,    -1,    -1,   233,   234,   235,   236,    -1,    -1,
     239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,   258,
      -1,   260,   261,   262,    -1,    -1,    -1,    -1,    -1,   268,
     269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,    -1,
     279,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,    -1,   344,   345,   346,    -1,    -1,
     349,   350,   351,   352,   353,    -1,   355,   356,   357,    -1,
     359,   360,   361,    -1,   363,   364,   365,    -1,   367,   368,
     369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,   508,
      -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,    -1,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,    -1,    -1,   542,   543,   544,   545,    -1,   547,   548,
     549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
      -1,    -1,   591,   592,   593,   594,   595,    -1,    -1,   598,
     599,    -1,   601,   602,   603,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,   618,
      -1,    -1,   621,    -1,    -1,    -1,   625,   626,    -1,    -1,
      -1,    -1,   631,   632,    -1,    -1,   635,   636,    -1,    -1,
     639,   640,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,    -1,
     103,   104,   105,    -1,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,   205,    -1,   207,   208,    -1,   210,   211,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
     233,   234,   235,   236,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,   260,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,   279,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,   346,    -1,    -1,   349,   350,   351,   352,
     353,    -1,   355,   356,   357,    -1,   359,   360,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,   591,   592,
     593,   594,   595,    -1,    -1,   598,   599,    -1,   601,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,
      -1,    -1,   625,   626,    -1,    -1,    -1,    -1,   631,   632,
      -1,    -1,   635,   636,    -1,    -1,   639,   640,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    36,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,    -1,   123,   124,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,   159,   160,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,   170,   171,   172,   173,   174,    -1,   176,
     177,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,    -1,   210,   211,    -1,   213,   214,    -1,    -1,
      -1,   218,   219,   220,   221,    -1,    -1,   224,   225,   226,
      -1,    -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,
      -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,
      -1,   258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,   276,
      -1,    -1,   279,    -1,    -1,    -1,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
      -1,   308,   309,   310,   311,    -1,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,    -1,    -1,
     327,   328,    -1,   330,    -1,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,   342,    -1,   344,   345,   346,
      -1,    -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,
     357,    -1,   359,   360,   361,    -1,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,    -1,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,
      -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,    -1,   525,   526,
     527,   528,   529,   530,    -1,    -1,   533,   534,   535,   536,
      -1,   538,   539,    -1,    -1,   542,   543,   544,   545,    -1,
     547,   548,   549,    -1,   551,   552,   553,   554,    -1,    -1,
      -1,    -1,    -1,   560,   561,    -1,    -1,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,
      -1,   598,    -1,    -1,    -1,   602,   603,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,
     617,   618,    -1,    -1,   621,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   639,   640,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,   159,   160,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,
     177,   178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,
      -1,   218,   219,   220,   221,    -1,    -1,   224,   225,   226,
     227,    -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,
      -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,   252,    -1,   254,   255,    -1,
      -1,   258,    -1,    -1,   261,   262,    -1,   264,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
      -1,   308,   309,   310,   311,    -1,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,    -1,    -1,
     327,   328,    -1,   330,    -1,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,   342,    -1,    -1,   345,   346,
      -1,    -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,
     357,    -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,   470,    -1,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,
      -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,    -1,   525,   526,
     527,   528,   529,   530,    -1,    -1,   533,   534,   535,   536,
      -1,   538,   539,    -1,    -1,   542,   543,   544,   545,    -1,
      -1,   548,   549,    -1,   551,   552,   553,   554,    -1,    -1,
      -1,    -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,
      -1,   598,    -1,    -1,    -1,   602,   603,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,
     617,   618,    -1,    -1,   621,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   640,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,    -1,
      -1,   130,    -1,   132,   133,   134,   135,   136,    -1,    -1,
      -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,   151,   152,    -1,   154,   155,   156,    -1,    -1,
     159,   160,    -1,   162,   163,   164,   165,   166,   167,    -1,
      -1,   170,   171,   172,   173,   174,    -1,    -1,   177,   178,
      -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
      -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,   218,
     219,   220,   221,    -1,    -1,   224,   225,   226,   227,    -1,
     229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,    -1,
     239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,   252,    -1,   254,   255,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,   268,
     269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,    -1,   304,   305,   306,    -1,   308,
     309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
      -1,   330,    -1,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,   342,    -1,    -1,   345,   346,    -1,    -1,
     349,   350,   351,   352,    -1,    -1,    -1,   356,   357,    -1,
      -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,   368,
     369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,   453,    -1,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,   508,
      -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,    -1,   525,   526,   527,   528,
     529,   530,    -1,    -1,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,   548,
     549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,    -1,
      -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,   568,
      -1,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,   598,
      -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,   618,
      -1,    -1,   621,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   640,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,   126,    -1,    -1,    -1,   130,
      -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,   140,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
     151,   152,    -1,   154,   155,   156,    -1,    -1,   159,   160,
      -1,   162,   163,   164,   165,   166,   167,    -1,    -1,   170,
     171,   172,   173,   174,    -1,    -1,   177,   178,    -1,   180,
     181,   182,    -1,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,    -1,   210,
      -1,    -1,   213,   214,    -1,    -1,    -1,   218,   219,   220,
     221,    -1,    -1,   224,   225,   226,    -1,    -1,   229,    -1,
      -1,    -1,    -1,   234,   235,    -1,    -1,    -1,   239,    -1,
      -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,
     271,    -1,   273,    -1,   275,   276,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,    -1,   308,   309,   310,
     311,    -1,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,    -1,    -1,   327,   328,    -1,   330,
      -1,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,   342,    -1,    -1,   345,   346,    -1,    -1,   349,   350,
     351,   352,    -1,    -1,    -1,   356,   357,    -1,    -1,    -1,
     361,    -1,   363,   364,   365,    -1,   367,   368,   369,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,   383,    -1,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,   453,    -1,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,   470,
      -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,    -1,   505,   506,    -1,   508,    -1,    -1,
     511,    -1,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,    -1,   525,   526,   527,   528,   529,   530,
      -1,    -1,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,   543,   544,   545,    -1,    -1,   548,   549,    -1,
     551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,    -1,
      -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,    -1,
      -1,   602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,    -1,
     621,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,   633,    -1,    -1,    18,    -1,    -1,    21,   640,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
     633,    14,    -1,    -1,    -1,    18,   639,   640,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,   632,
      -1,    14,    -1,    -1,    -1,    18,    -1,   640,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,   237,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   640,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
      -1,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
     135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,   154,
     155,   156,    -1,    -1,   159,   160,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
      -1,    -1,   177,   178,    -1,   180,   181,   182,    -1,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,    -1,   210,    -1,    -1,   213,   214,
      -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,   224,
     225,   226,    -1,    -1,   229,    -1,    -1,    -1,    -1,   234,
     235,    -1,    -1,    -1,   239,    -1,    -1,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,    -1,    -1,   258,    -1,    -1,   261,   262,    -1,    -1,
      -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,    -1,
     275,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,    -1,   304,
     305,   306,    -1,   308,   309,   310,   311,    -1,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
      -1,    -1,   327,   328,    -1,   330,    -1,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,    -1,
     345,   346,    -1,    -1,   349,   350,   351,   352,    -1,    -1,
      -1,   356,   357,    -1,    -1,    -1,   361,    -1,   363,   364,
     365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,    -1,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,   453,    -1,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,   484,
      -1,   486,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,
     505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,    -1,
     525,   526,   527,   528,   529,   530,    -1,    -1,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,   543,   544,
     545,    -1,    -1,   548,   549,    -1,   551,   552,   553,   554,
      -1,    -1,    -1,    -1,    -1,   560,   561,    -1,    -1,    -1,
     565,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,    -1,    -1,    -1,    -1,    -1,    -1,
     595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,   614,
      -1,   616,   617,   618,    -1,    -1,   621,    -1,    -1,    -1,
      -1,     5,   627,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   640,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,
     134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,
     154,   155,   156,    -1,    -1,   159,   160,    -1,   162,   163,
     164,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,    -1,    -1,   177,   178,    -1,   180,   181,   182,    -1,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,    -1,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,   213,
     214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,
     224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,    -1,
     234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,    -1,
      -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,    -1,
     304,   305,   306,    -1,   308,   309,   310,   311,    -1,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
      -1,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
      -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,
      -1,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,   453,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,
     484,    -1,   486,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
      -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
      -1,   525,   526,   527,   528,   529,   530,    -1,    -1,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,    -1,    -1,   548,   549,    -1,   551,   552,   553,
     554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
     614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   632,    -1,
      14,    -1,    -1,    -1,    18,    -1,   640,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,
     134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,
     154,   155,   156,    -1,    -1,   159,   160,    -1,   162,   163,
     164,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,    -1,    -1,   177,   178,    -1,   180,   181,   182,    -1,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,    -1,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,   213,
     214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,
     224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,    -1,
     234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,    -1,
      -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,    -1,
     304,   305,   306,    -1,   308,   309,   310,   311,    -1,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
      -1,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
      -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,
      -1,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,   453,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,
     484,    -1,   486,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
      -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
      -1,   525,   526,   527,   528,   529,   530,    -1,    -1,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,    -1,    -1,   548,   549,    -1,   551,   552,   553,
     554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
     614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   639,   640,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,
     134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,
     154,   155,   156,    -1,    -1,   159,   160,    -1,   162,   163,
     164,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,    -1,    -1,   177,   178,    -1,   180,   181,   182,    -1,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,    -1,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,   213,
     214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,
     224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,    -1,
     234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,    -1,
      -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,    -1,
     304,   305,   306,    -1,   308,   309,   310,   311,    -1,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
      -1,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
      -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,
      -1,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,   453,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,
     484,    -1,   486,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
      -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
      -1,   525,   526,   527,   528,   529,   530,    -1,    -1,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,    -1,    -1,   548,   549,    -1,   551,   552,   553,
     554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
     614,    -1,   616,   617,   618,    -1,    -1,   621,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   640,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
     126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,
     136,    -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,
     156,    -1,    -1,   159,   160,    -1,   162,   163,   164,   165,
     166,   167,    -1,    -1,   170,   171,   172,   173,   174,    -1,
      -1,   177,   178,    -1,   180,   181,   182,    -1,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,    -1,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,    -1,   210,    -1,    -1,   213,   214,    -1,
      -1,    -1,   218,   219,   220,   221,    -1,    -1,   224,   225,
     226,    -1,    -1,   229,    -1,    -1,    -1,    -1,   234,   235,
      -1,    -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,    -1,    -1,
      -1,    -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,    -1,   304,   305,
     306,    -1,   308,   309,   310,   311,    -1,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,    -1,
      -1,   327,   328,    -1,   330,    -1,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,   342,    -1,    -1,   345,
     346,    -1,    -1,   349,   350,   351,   352,    -1,    -1,    -1,
     356,   357,    -1,    -1,    -1,   361,    -1,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,   382,   383,    -1,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,   451,    -1,   453,    -1,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,    -1,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,
     486,   487,   488,   489,    -1,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,
     506,    -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,
     516,   517,   518,   519,    -1,    -1,   522,   523,    -1,   525,
     526,   527,   528,   529,   530,    -1,    -1,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,   543,   544,   545,
      -1,    -1,   548,   549,    -1,   551,   552,   553,   554,    -1,
      -1,    -1,    -1,    -1,   560,   561,    -1,    -1,    -1,   565,
     566,   567,   568,    -1,   570,   571,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,    -1,   595,
      -1,    -1,   598,    -1,    -1,    -1,   602,   603,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,
     616,   617,   618,    -1,    -1,   621,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   640,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,    -1,   621,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   640,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,   126,    -1,    -1,    -1,
     130,    -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,
     140,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,   151,   152,    -1,   154,   155,   156,    -1,    -1,   159,
     160,    -1,   162,   163,   164,   165,   166,   167,    -1,    -1,
     170,   171,   172,   173,   174,    -1,    -1,   177,   178,    -1,
     180,   181,   182,    -1,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
      -1,   201,    -1,   203,    -1,    -1,    -1,   207,   208,    -1,
     210,    -1,    -1,   213,   214,    -1,    -1,    -1,   218,   219,
     220,   221,    -1,    -1,   224,   225,   226,    -1,    -1,   229,
      -1,    -1,    -1,    -1,   234,   235,    -1,    -1,    -1,   239,
      -1,    -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,
      -1,   261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,
      -1,   271,    -1,   273,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,    -1,   304,   305,   306,    -1,   308,   309,
     310,   311,    -1,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,    -1,    -1,   327,   328,    -1,
     330,    -1,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,   342,    -1,    -1,   345,   346,    -1,    -1,   349,
     350,   351,   352,    -1,    -1,    -1,   356,   357,    -1,    -1,
      -1,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   382,   383,    -1,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,   453,    -1,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,    -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,   501,   502,   503,    -1,   505,   506,    -1,   508,    -1,
      -1,   511,    -1,    -1,   514,   515,   516,   517,   518,   519,
      -1,    -1,   522,   523,    -1,   525,   526,   527,   528,   529,
     530,    -1,    -1,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,   543,   544,   545,    -1,    -1,   548,   549,
      -1,   551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,
      -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,
      -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,
      -1,   621,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     640,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    61,
      -1,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,
     122,   123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,
     132,   133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,
      -1,   143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,
     152,    -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,
     162,   163,   164,   165,   166,   167,    -1,    -1,   170,   171,
     172,   173,   174,    -1,    -1,   177,   178,    -1,   180,   181,
     182,    -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,    -1,   201,
      -1,   203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,
      -1,   213,   214,    -1,    -1,    -1,   218,   219,   220,   221,
      -1,    -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,
      -1,    -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,
     262,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,
      -1,   273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,    -1,   304,   305,   306,    -1,   308,   309,   310,   311,
      -1,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
     342,    -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,
     352,    -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,
      -1,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
     382,   383,    -1,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,   451,
      -1,   453,    -1,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,    -1,   468,   469,    -1,    -1,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,    -1,   484,    -1,   486,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,
     502,   503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,
      -1,    -1,   514,   515,   516,   517,   518,   519,    -1,    -1,
     522,   523,    -1,   525,   526,   527,   528,   529,   530,    -1,
      -1,   533,   534,   535,   536,    -1,   538,   539,    -1,    -1,
     542,   543,   544,   545,    -1,    -1,   548,   549,    -1,   551,
     552,   553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,
      -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,
      -1,    -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,
     602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,   614,    -1,   616,   617,   618,    -1,    -1,   621,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
      -1,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
     135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,   154,
     155,   156,    -1,    -1,   159,   160,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
      -1,    -1,   177,   178,    -1,   180,   181,   182,    -1,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,    -1,   210,    -1,    -1,   213,   214,
      -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,   224,
     225,   226,    -1,    -1,   229,    -1,    -1,    -1,    -1,   234,
     235,    -1,    -1,    -1,   239,    -1,    -1,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,    -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,    -1,
     275,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,    -1,   304,
     305,   306,    -1,   308,   309,   310,   311,    -1,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
      -1,    -1,   327,   328,    -1,   330,    -1,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,    -1,
     345,   346,    -1,    -1,   349,   350,   351,   352,    -1,    -1,
      -1,   356,   357,    -1,    -1,    -1,   361,    -1,   363,   364,
     365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,    -1,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,   453,    -1,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,   484,
      -1,   486,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,
     505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,    -1,
     525,   526,   527,   528,   529,   530,    -1,    -1,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,   543,   544,
     545,    -1,   547,   548,   549,    -1,   551,   552,   553,   554,
      -1,    -1,    -1,    -1,    -1,   560,   561,    -1,    -1,    -1,
     565,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,    -1,    -1,    -1,    -1,    -1,    -1,
     595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,   614,
      -1,   616,   617,   618,    -1,    -1,   621,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   639,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,    -1,   621,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   639,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
      -1,   122,   123,   124,    -1,   126,    -1,    -1,    -1,   130,
      -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,   140,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
     151,   152,    -1,   154,   155,   156,    -1,    -1,   159,   160,
      -1,   162,   163,   164,   165,   166,   167,    -1,    -1,   170,
     171,   172,   173,   174,    -1,    -1,   177,   178,    -1,   180,
     181,   182,    -1,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,    -1,   210,
      -1,    -1,   213,   214,    -1,    -1,    -1,   218,   219,   220,
     221,    -1,    -1,   224,   225,   226,    -1,    -1,   229,    -1,
      -1,    -1,    -1,   234,   235,    -1,    -1,    -1,   239,    -1,
      -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,
     271,    -1,   273,    -1,   275,   276,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,    -1,   308,   309,   310,
     311,    -1,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,    -1,    -1,   327,   328,    -1,   330,
      -1,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,   342,    -1,    -1,   345,   346,    -1,    -1,   349,   350,
     351,   352,    -1,    -1,    -1,   356,   357,    -1,    -1,    -1,
     361,    -1,   363,   364,   365,    -1,   367,   368,   369,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,   383,    -1,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,   453,    -1,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
      -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,    -1,   505,   506,    -1,   508,    -1,    -1,
     511,    -1,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,    -1,   525,   526,   527,   528,   529,   530,
      -1,    -1,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,   543,   544,   545,    -1,    -1,   548,   549,    -1,
     551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,    -1,
      -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,    -1,
      -1,   602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,    -1,
     621,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,   133,
     134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,    -1,
     154,   155,   156,    -1,    -1,   159,   160,    -1,   162,   163,
     164,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,    -1,    -1,   177,   178,    -1,   180,   181,   182,    -1,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,    -1,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,   213,
     214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,
     224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,    -1,
     234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,   273,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,    -1,
     304,   305,   306,    -1,   308,   309,   310,   311,    -1,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
      -1,   345,   346,    -1,    -1,   349,   350,   351,   352,    -1,
      -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,   383,
      -1,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,   453,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,    -1,
     484,    -1,   486,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
      -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
      -1,   525,   526,   527,   528,   529,   530,    -1,    -1,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,    -1,   547,   548,   549,    -1,   551,   552,   553,
     554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
     614,    -1,   616,   617,   618,    -1,    -1,   621,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   639,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,   133,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,   151,   152,    -1,   154,   155,   156,
      -1,    -1,   159,   160,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,
     177,   178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,
      -1,   218,   219,   220,   221,    -1,    -1,   224,   225,   226,
      -1,    -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,
      -1,    -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,
      -1,   258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,   273,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
      -1,   308,   309,   310,   311,    -1,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,    -1,    -1,
     327,   328,    -1,   330,    -1,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,   342,    -1,    -1,   345,   346,
      -1,    -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,
     357,    -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,    -1,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,
      -1,   508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,    -1,   525,   526,
     527,   528,   529,   530,    -1,    -1,   533,   534,   535,   536,
      -1,   538,   539,    -1,    -1,   542,   543,   544,   545,    -1,
      -1,   548,   549,    -1,   551,   552,   553,   554,    -1,    -1,
      -1,    -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,
      -1,   598,    -1,    -1,    -1,   602,   603,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,
     617,   618,    -1,    -1,   621,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   639,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,    -1,    -1,   117,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,   126,    -1,    -1,    -1,
     130,    -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,
     140,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,   151,   152,    -1,   154,   155,   156,    -1,    -1,   159,
     160,    -1,   162,   163,   164,   165,   166,   167,    -1,    -1,
     170,   171,   172,   173,   174,    -1,    -1,   177,   178,    -1,
     180,   181,   182,    -1,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
      -1,   201,    -1,   203,    -1,    -1,    -1,   207,   208,    -1,
     210,    -1,    -1,   213,   214,    -1,    -1,    -1,   218,   219,
     220,   221,    -1,    -1,   224,   225,   226,    -1,    -1,   229,
      -1,    -1,    -1,    -1,   234,   235,    -1,    -1,    -1,   239,
      -1,    -1,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,    -1,    -1,   258,    -1,
      -1,   261,   262,    -1,    -1,    -1,    -1,    -1,   268,   269,
      -1,   271,    -1,   273,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,    -1,   304,   305,   306,    -1,   308,   309,
     310,   311,    -1,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,    -1,    -1,   327,   328,    -1,
     330,    -1,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,   342,    -1,    -1,   345,   346,    -1,    -1,   349,
     350,   351,   352,    -1,    -1,    -1,   356,   357,    -1,    -1,
      -1,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   382,   383,    -1,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,   453,    -1,    -1,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,    -1,   468,   469,
      -1,    -1,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,    -1,   484,    -1,   486,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,   501,   502,   503,    -1,   505,   506,    -1,   508,    -1,
      -1,   511,    -1,    -1,   514,   515,   516,   517,   518,   519,
      -1,    -1,   522,   523,    -1,   525,   526,   527,   528,   529,
     530,    -1,    -1,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,   543,   544,   545,    -1,    -1,   548,   549,
      -1,   551,   552,   553,   554,    -1,    -1,    -1,    -1,    -1,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,    -1,
      -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,
      -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,   614,    -1,   616,   617,   618,    -1,
      -1,   621,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,   639,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,   634,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,   627,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,   627,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,   627,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,   627,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,   211,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,   279,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,    -1,   360,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
     498,   499,   500,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,   569,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,   157,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,   479,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,   279,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,   360,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,   101,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    36,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,   211,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,   547,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,   499,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,   191,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,   547,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,   140,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,   210,    -1,    -1,
     213,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,   235,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,   356,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
     383,    -1,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,    -1,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,   486,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,   614,    -1,   616,   617,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,   140,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,    -1,   180,   181,   182,    -1,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,    -1,   210,    -1,    -1,   213,   214,    -1,    -1,    -1,
     218,   219,   220,   221,    -1,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,   235,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,   356,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,   383,    -1,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,   453,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,    -1,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,   486,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,   614,    -1,   616,   617,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,   147,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,    -1,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,    -1,
     208,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
     248,    -1,    -1,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,    -1,    -1,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,    -1,    -1,   437,
      -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,
      -1,   449,   450,   451,   452,   453,    -1,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
     468,    -1,    -1,    -1,    -1,   473,   474,   475,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,    -1,   487,
      -1,   489,    -1,   491,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,    -1,   516,   517,
     518,   519,    -1,    -1,    -1,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,    -1,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,
      -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,   607,
      -1,   609,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,   147,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,   607,    -1,   609,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,    -1,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,    -1,
     208,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
     248,    -1,    -1,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,    -1,    -1,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,    -1,    -1,   437,
      -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,
      -1,   449,   450,   451,   452,   453,    -1,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
     468,    -1,    -1,    -1,    -1,   473,   474,   475,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,    -1,   487,
      -1,   489,    -1,   491,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,    -1,   516,   517,
     518,   519,    -1,    -1,    -1,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,    -1,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,
      -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,    -1,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,    -1,
     208,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
     248,    -1,    -1,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,    -1,    -1,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,    -1,    -1,   437,
      -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,
      -1,   449,   450,   451,   452,   453,    -1,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
     468,    -1,    -1,    -1,    -1,   473,   474,   475,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,    -1,   487,
      -1,   489,    -1,   491,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,    -1,   516,   517,
     518,   519,    -1,    -1,    -1,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,    -1,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,
      -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,   151,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,    -1,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,    -1,
     208,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
     248,    -1,    -1,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,    -1,    -1,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,    -1,    -1,   437,
      -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,
      -1,   449,   450,   451,   452,   453,    -1,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
     468,    -1,    -1,    -1,    -1,   473,   474,   475,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,    -1,   487,
      -1,   489,    -1,   491,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,    -1,   516,   517,
     518,   519,    -1,    -1,    -1,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,    -1,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,
      -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,     5,   621,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,    -1,   154,   155,   156,    -1,
      -1,   159,   160,    -1,   162,   163,   164,   165,   166,    -1,
      -1,    -1,   170,   171,   172,   173,   174,    -1,    -1,   177,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,   203,    -1,    -1,    -1,    -1,
     208,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,   243,   244,    -1,   246,   247,
     248,    -1,    -1,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
     268,   269,    -1,   271,    -1,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
     308,   309,   310,   311,    -1,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
     328,    -1,   330,    -1,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,    -1,   345,   346,    -1,
      -1,   349,   350,   351,   352,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,   383,    -1,    -1,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,    -1,    -1,   437,
      -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,
      -1,   449,   450,   451,   452,   453,    -1,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
     468,    -1,    -1,    -1,    -1,   473,   474,   475,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,    -1,   487,
      -1,   489,    -1,   491,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,   502,   503,    -1,   505,   506,    -1,
     508,    -1,    -1,   511,    -1,    -1,   514,    -1,   516,   517,
     518,   519,    -1,    -1,    -1,   523,    -1,   525,   526,   527,
     528,   529,   530,    -1,    -1,   533,   534,   535,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,    -1,    -1,
     548,   549,    -1,   551,   552,   553,   554,    -1,    -1,    -1,
      -1,    -1,   560,   561,    -1,    -1,    -1,    -1,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,
      -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
     618,    -1,     5,   621,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
      -1,   154,   155,   156,    -1,    -1,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,    -1,    -1,   170,   171,   172,
     173,   174,    -1,    -1,   177,   178,    -1,   180,   181,   182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,   224,   225,   226,    -1,    -1,   229,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,    -1,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,   308,   309,   310,   311,    -1,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,    -1,    -1,   327,   328,    -1,   330,    -1,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,   361,    -1,
     363,   364,   365,    -1,   367,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
     383,    -1,    -1,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,    -1,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,    -1,
     453,    -1,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,   468,    -1,    -1,    -1,    -1,
     473,   474,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,    -1,   505,   506,    -1,   508,    -1,    -1,   511,    -1,
      -1,   514,    -1,   516,   517,   518,   519,    -1,    -1,    -1,
     523,    -1,   525,   526,   527,   528,   529,   530,    -1,    -1,
     533,   534,   535,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,    -1,    -1,   548,   549,    -1,   551,   552,
     553,   554,    -1,    -1,    -1,    -1,    -1,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,    -1,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,   618,    -1,    -1,   621
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    61,    62,
      77,    96,   118,   127,   128,   129,   140,   141,   153,   167,
     185,   200,   202,   207,   210,   233,   235,   253,   270,   274,
     370,   387,   400,   411,   433,   436,   438,   441,   444,   445,
     454,   456,   464,   470,   478,   483,   485,   515,   522,   565,
     577,   581,   584,   589,   617,   632,   643,   646,   647,   648,
     649,   650,   652,   657,   659,   666,   699,   726,   733,   734,
     853,  1017,  1059,  1061,  1075,  1078,  1083,  1085,  1086,  1091,
    1094,  1099,  1106,  1118,  1119,  1275,  1277,  1292,  1295,  1320,
    1328,  1339,  1346,  1360,  1364,  1367,  1377,  1383,  1387,  1389,
    1390,  1442,  1470,  1476,  1478,  1485,  1487,  1513,  1519,  1520,
    1521,  1522,  1579,  1587,  1588,    11,   105,   124,   194,   223,
     275,   405,   476,   539,   587,  1055,  1544,  1545,  1546,  1549,
     271,   358,  1093,  1514,   547,  1433,   227,     5,     7,     8,
       9,    10,    11,    14,    18,    21,    23,    24,    25,    26,
      27,    28,    29,    31,    35,    39,    42,    43,    44,    46,
      48,    49,    52,    55,    56,    58,    59,    61,    63,    64,
      65,    66,    67,    68,    70,    71,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    83,    84,    86,    87,    88,
      89,    90,    92,    95,    98,   100,   103,   107,   108,   109,
     112,   117,   118,   123,   124,   126,   130,   132,   133,   134,
     135,   136,   140,   143,   144,   145,   149,   151,   152,   154,
     155,   156,   159,   160,   162,   163,   164,   165,   166,   167,
     170,   171,   172,   173,   174,   177,   178,   180,   181,   182,
     185,   189,   190,   192,   194,   196,   197,   198,   199,   201,
     203,   207,   208,   210,   213,   214,   218,   219,   220,   221,
     224,   225,   226,   229,   234,   235,   239,   243,   244,   246,
     247,   251,   254,   255,   258,   261,   262,   268,   269,   271,
     273,   275,   276,   284,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   304,   305,   306,   308,   309,   310,   311,   313,   314,
     319,   320,   321,   322,   323,   324,   327,   328,   330,   332,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   345,
     346,   349,   350,   351,   352,   356,   357,   361,   363,   364,
     365,   367,   368,   369,   371,   381,   382,   383,   385,   386,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     400,   401,   402,   404,   406,   407,   408,   409,   410,   412,
     413,   414,   417,   421,   422,   423,   424,   425,   428,   429,
     430,   431,   432,   434,   435,   437,   438,   439,   442,   444,
     446,   447,   449,   450,   451,   453,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   468,   469,   473,
     474,   475,   476,   480,   484,   486,   487,   488,   489,   491,
     492,   493,   494,   495,   501,   502,   503,   505,   506,   508,
     511,   514,   515,   516,   517,   518,   519,   522,   523,   525,
     526,   527,   528,   529,   530,   533,   534,   535,   536,   538,
     539,   542,   543,   544,   545,   548,   549,   551,   552,   553,
     554,   560,   561,   565,   566,   567,   568,   570,   571,   573,
     574,   576,   577,   580,   583,   585,   587,   588,   595,   598,
     602,   603,   604,   605,   606,   613,   614,   616,   617,   618,
     621,   693,  1431,  1436,  1440,  1441,   304,   538,   541,  1472,
    1472,   613,  1515,   105,   193,   275,   476,   496,   539,   544,
     579,   587,   675,   676,   904,   905,   906,   995,   996,   997,
    1329,  1276,   105,   164,   194,   227,   275,   405,   476,   539,
     544,   562,   587,   602,  1288,  1436,  1093,   100,   735,   692,
     640,  1428,  1430,  1436,   658,  1293,   393,    83,   413,  1388,
     108,   227,   618,  1395,  1472,  1093,   854,  1436,  1384,   464,
     587,  1472,  1093,  1296,  1378,   499,   723,   727,   728,  1436,
     692,  1515,  1436,  1122,  1124,  1125,  1443,  1347,   727,   488,
     560,   488,   541,  1341,   393,  1477,  1321,  1436,    31,    77,
     151,   400,   422,   456,   515,  1581,   470,   632,  1120,     0,
     153,   644,   400,   173,   189,   388,  1365,  1428,  1436,   157,
    1029,  1436,   157,   693,   204,   693,   263,  1433,  1436,  1438,
     801,   802,   805,   828,  1436,   692,   541,   164,  1023,  1544,
    1472,  1515,  1100,   700,   640,   558,  1076,  1087,    17,  1516,
     222,   907,   204,  1438,   803,   828,   692,   377,  1541,  1545,
    1546,  1547,  1548,  1549,   541,   905,   227,   227,   227,   223,
     282,   414,  1337,  1338,     7,    21,    28,    34,    36,    37,
      38,    40,    53,    54,    59,    60,    67,    70,    89,    93,
      94,    99,   101,   104,   105,   110,   111,   112,   117,   119,
     122,   168,   175,   176,   183,   189,   197,   199,   205,   211,
     218,   222,   233,   236,   260,   268,   279,   307,   312,   323,
     327,   329,   333,   334,   335,   336,   337,   344,   353,   354,
     355,   359,   360,   365,   384,   390,   395,   396,   398,   412,
     440,   441,   453,   455,   461,   462,   468,   520,   521,   527,
     531,   532,   537,   547,   551,   552,   553,   554,   563,   564,
     565,   569,   572,   587,   591,   592,   593,   594,   599,   601,
     605,   606,   621,   625,   626,   631,   632,   635,   636,   639,
     640,   956,  1139,  1140,  1141,  1142,  1146,  1149,  1150,  1151,
    1152,  1153,  1154,  1162,  1166,  1176,  1414,  1416,  1418,  1419,
    1420,  1424,  1426,  1431,  1436,   222,  1287,  1287,  1287,  1436,
     204,  1287,  1287,   828,  1287,   692,  1287,  1472,   653,  1368,
     132,    12,    13,    96,   127,   141,   164,   167,   180,   202,
     227,   233,   274,   406,   410,   426,   434,   442,   470,   483,
     484,   533,   562,   584,   586,  1488,  1490,  1492,  1493,  1436,
     369,    66,   418,   640,  1438,   125,   212,   282,  1298,  1436,
    1139,   237,  1391,  1471,  1472,    47,   855,   191,    34,   304,
    1352,  1385,  1436,   692,  1095,  1472,   125,   282,  1299,  1327,
     304,   413,   488,  1379,  1380,   595,   724,   478,   729,    12,
     410,  1486,  1490,   558,  1516,  1123,    12,   137,   212,   504,
     505,   506,   507,   508,   509,   524,  1129,  1130,  1131,  1540,
      59,    60,   122,   201,   271,   340,   390,   475,   560,   639,
     958,  1436,  1444,  1456,  1460,  1462,    24,    35,    59,    70,
      92,    94,    96,   106,   155,   160,   163,   192,   194,   201,
     203,   226,   227,   250,   271,   304,   369,   394,   404,   405,
     408,   409,   429,   475,   488,   523,   541,   604,   958,   994,
    1348,  1352,  1353,  1355,  1457,   729,   432,   511,  1070,  1071,
    1072,   418,   610,  1062,  1063,  1064,  1070,  1340,  1436,  1472,
    1327,    36,   211,   547,  1415,  1434,  1580,  1580,  1580,  1580,
    1580,  1124,  1120,   633,   638,  1436,   157,  1362,  1361,   321,
     545,   571,  1019,   585,   101,  1438,  1439,  1021,   807,   829,
    1436,  1020,   371,     6,    57,   141,   354,   417,   419,   830,
    1025,  1439,  1428,   693,   510,  1550,  1551,  1022,  1084,  1101,
    1102,  1103,  1104,  1428,   632,   701,  1436,   660,  1282,  1283,
    1428,  1282,    56,   356,   356,   433,  1517,   353,   354,  1145,
    1436,   806,   829,   187,     6,  1439,  1503,  1504,   441,    10,
     405,   562,   679,  1135,  1543,  1551,  1563,  1567,  1568,  1574,
     679,  1135,  1542,  1551,  1563,  1568,  1574,  1544,  1549,   907,
    1436,  1436,  1436,   191,  1330,  1334,  1335,  1436,  1337,   632,
     632,   632,  1149,   632,   632,   632,  1139,  1179,   632,   632,
     632,   632,   632,   632,   632,   632,   632,  1138,  1138,   632,
     945,   632,   632,   632,   547,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,  1139,   632,
     632,   632,  1177,  1178,  1424,  1436,   632,   632,   632,   632,
     632,   632,   632,   632,   632,  1139,   945,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   945,   547,   632,   632,   632,
     547,   632,   632,   632,    36,   211,   547,   632,  1138,   945,
     945,   632,   632,   632,   632,   632,   632,  1149,  1149,  1149,
    1139,  1535,  1536,  1436,  1167,  1436,    16,    17,   374,   377,
     619,  1143,  1144,   157,   158,   195,   206,   245,   256,   283,
     347,  1147,    32,   138,   240,   264,   333,   427,   481,   482,
     494,   623,   624,   625,   626,   627,   628,   629,   630,  1145,
    1149,    69,   376,   634,  1434,   632,   640,   168,  1436,   693,
    1436,   366,   829,   693,  1438,   357,   603,   839,   840,  1289,
    1290,  1291,  1353,   693,  1439,  1502,  1281,  1287,   590,   654,
      34,   130,   155,   159,   196,   214,   276,   404,   413,   428,
     446,   489,   519,  1369,  1374,  1375,  1472,    82,   639,   736,
     737,   738,   739,  1436,   404,  1491,   458,   458,   539,   544,
     587,   602,   372,  1495,   538,   366,  1497,    65,   488,  1494,
     106,   602,  1496,   366,   634,    19,   157,  1231,  1232,  1479,
    1436,  1055,   493,    49,    81,   282,  1397,  1428,  1473,  1474,
    1092,   266,   269,   415,   856,   858,   639,   651,  1433,   276,
    1096,  1439,  1097,  1098,  1428,  1079,   237,  1284,  1300,  1301,
    1428,    49,  1381,   634,  1434,    55,    64,    74,    86,    87,
      88,   103,   322,   339,   466,   526,   543,   730,   732,  1491,
     366,   366,   464,  1518,  1517,   578,  1523,  1524,   627,  1133,
    1134,  1135,  1131,   478,   640,    34,   122,   157,   479,   959,
     960,  1311,  1438,   188,  1311,  1446,   639,  1438,    34,   122,
     962,   963,  1438,   640,  1447,  1445,  1311,   163,   264,   608,
    1359,   632,   105,   164,   194,   405,   541,   562,   602,  1359,
      12,   916,  1438,   265,  1250,  1252,   191,   240,  1354,  1356,
      68,   519,   188,   519,   538,    68,   519,    12,    42,    90,
      95,   244,   320,   383,   495,   535,  1342,  1343,  1344,   163,
     214,   519,   519,  1250,  1359,  1356,   276,   154,    71,   407,
     538,   561,   519,   598,  1060,   634,   368,   615,    84,   634,
    1283,  1055,   634,   367,  1583,   534,  1584,   249,   449,  1582,
     633,  1524,  1526,  1528,  1529,   153,   645,  1438,  1118,  1292,
    1295,  1320,  1328,  1363,  1366,  1415,  1436,   122,   902,   903,
     913,   914,   967,   108,  1138,   639,   694,     6,   808,   694,
     632,   107,   825,   825,   825,     4,   634,   390,  1018,  1024,
     469,   602,  1551,  1282,   240,   634,   387,  1112,  1114,  1115,
     702,   703,  1139,   224,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   305,   306,   430,   431,   661,   662,   665,
     173,   414,   634,  1077,    58,   173,   177,   188,   319,   414,
    1088,  1089,  1090,    56,   433,   168,   674,   808,   108,   825,
     220,   634,  1135,  1135,  1135,   164,   194,   194,  1551,  1428,
     998,   999,   998,   998,  1285,  1286,  1428,  1429,  1436,   634,
    1332,   640,  1336,  1139,  1139,    12,   137,  1172,  1233,  1172,
    1172,  1172,   607,  1181,  1139,  1139,  1176,  1176,  1139,  1139,
    1139,   137,  1172,  1233,   633,   360,   633,   633,  1139,  1139,
    1139,  1139,  1424,  1535,   113,   114,   115,   116,   117,   215,
     216,   217,   218,   323,   325,   326,   327,   334,   412,   467,
     468,   605,   620,   621,  1228,  1229,  1139,  1176,   109,   112,
     551,   554,  1230,   137,  1169,  1139,  1139,  1139,  1139,  1228,
    1139,  1176,  1178,     9,   634,   640,   137,  1172,  1139,  1139,
     137,  1172,  1139,  1139,  1176,  1176,  1176,  1139,  1139,  1139,
    1176,  1142,  1139,  1139,  1139,  1139,  1139,  1139,   633,  1139,
    1172,  1172,  1139,  1139,   137,  1172,  1139,  1229,  1229,  1139,
      45,   257,   559,  1139,  1139,   633,  1425,  1426,  1436,  1172,
    1172,  1139,  1139,  1139,   633,   634,   633,   470,   632,  1532,
    1533,  1139,   639,  1168,  1438,   640,  1139,  1139,  1139,  1141,
     176,   359,   564,   580,  1145,    12,    18,  1141,  1148,  1142,
    1142,   632,  1149,  1142,  1142,  1142,  1142,   264,  1142,  1142,
     236,  1142,   236,  1142,  1142,  1142,  1142,  1142,    32,   240,
     264,   427,  1438,  1149,  1139,  1155,  1436,   640,  1428,  1289,
     634,  1291,   155,   634,  1282,  1278,   639,   655,   656,   276,
     276,   276,   276,    49,   276,   276,   634,  1370,   112,   551,
     554,   731,   741,  1166,  1418,  1424,  1438,   634,   157,   538,
     632,  1505,  1439,  1505,  1505,  1505,   194,   405,   541,  1489,
    1493,  1436,   181,   350,  1436,  1480,  1481,  1300,  1433,  1107,
     271,  1396,  1232,   634,  1282,    71,   632,   862,   863,   862,
     863,   388,   865,   208,   252,  1438,    30,   558,  1386,   634,
     558,   634,   558,  1282,  1301,  1297,   387,  1195,  1196,    12,
    1382,  1380,   634,   157,   634,  1439,   194,   405,  1489,  1436,
      12,   137,  1531,   634,  1126,  1139,  1422,  1436,  1436,    69,
     965,  1139,  1439,   365,   390,   547,  1468,   246,   418,  1463,
    1464,  1465,  1466,   201,   271,   475,  1458,  1311,  1436,   560,
    1448,  1459,  1462,   634,  1450,  1461,   240,  1357,  1433,  1139,
     627,   907,   693,   693,   693,  1428,   693,  1428,   276,   338,
     519,  1351,  1351,   279,   360,   569,  1253,  1254,  1416,  1436,
    1359,  1436,   693,  1359,  1439,  1354,   693,  1359,   243,   536,
     178,   188,  1345,   634,  1357,  1354,  1428,  1356,  1354,  1354,
    1359,  1359,   583,  1073,  1072,   491,  1064,   470,   632,   636,
    1182,  1183,  1184,  1185,  1186,  1197,  1198,  1212,  1415,   391,
    1585,   375,  1246,  1252,  1530,   903,    69,   958,   133,  1438,
      75,    89,   254,   331,   356,   416,   510,   696,   698,   423,
     573,   826,   827,   229,   822,   823,   824,   831,   839,   840,
     105,   213,   381,   390,   397,   492,   587,   677,   678,  1433,
      25,   311,   816,   817,   818,   831,   832,   833,   839,   840,
     809,   810,   816,  1439,   171,     6,    11,    13,    15,    26,
      27,    57,    61,    62,    67,    75,    83,    93,   108,   126,
     134,   135,   141,   149,   155,   166,   186,   225,   227,   234,
     251,   274,   310,   328,   332,   370,   375,   382,   387,   390,
     421,   435,   436,   437,   438,   460,   516,   517,   518,   523,
     539,   542,   565,   578,   850,   909,   911,   913,   914,  1030,
    1034,  1036,  1039,  1045,  1046,  1047,  1052,  1053,  1242,   366,
     687,  1026,   124,   239,  1428,   122,  1105,  1436,  1103,  1428,
     852,  1114,   227,   252,   992,  1116,   633,   634,   157,   157,
     157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   157,   634,  1283,   585,  1089,   901,   902,    75,   351,
     424,   574,   819,   820,   821,   831,   835,   836,   837,   838,
     839,   840,   614,   589,   804,    47,   610,  1504,   194,   693,
     693,   907,   693,  1436,   667,   567,   590,  1006,   366,   366,
     366,   634,  1333,  1195,   640,  1336,  1335,   191,   627,  1436,
     634,   633,  1172,   633,  1173,   633,   633,   633,  1139,   147,
     607,  1180,    19,   633,   590,   633,   633,   633,   634,   590,
     634,  1163,   633,   627,   633,   634,   634,   633,   633,   633,
     633,   191,   634,   633,   634,  1165,   633,   634,   634,   634,
     626,   634,   633,   633,   632,  1424,  1436,  1172,   633,   633,
     633,  1172,   633,   634,   633,   633,   633,   633,   633,   633,
     634,   633,   240,   633,   634,   634,   633,   634,   634,   633,
     633,   633,   634,   191,   634,  1172,   633,   633,   634,   634,
     634,   633,   191,  1139,   191,  1139,   191,  1139,   191,   633,
     634,   633,   633,   633,   633,   634,    19,   262,   634,   982,
     633,  1176,  1202,  1203,  1204,   470,   632,  1121,  1527,  1528,
     578,  1537,   637,  1458,   479,  1436,   176,   359,   564,   580,
     632,    17,  1139,  1535,   162,  1238,  1142,  1139,  1139,  1142,
     632,  1149,  1142,  1135,  1159,  1160,  1161,   632,   640,  1436,
    1279,  1291,  1311,  1312,  1439,    51,   448,  1056,  1282,  1438,
     634,  1375,  1282,  1376,   739,   742,   743,   738,   361,   462,
     740,  1436,  1506,  1507,   558,   627,  1428,  1436,  1501,  1501,
    1501,   157,   181,   195,   206,   255,   256,   283,   350,   402,
    1482,  1484,   608,  1234,  1294,  1108,  1109,  1110,  1111,  1428,
     228,   282,   418,   615,  1475,  1474,   632,  1135,   119,   183,
     211,   279,   360,   569,  1257,  1260,  1261,   530,   866,   857,
     632,  1139,  1433,  1439,  1439,  1098,  1428,   173,   414,   588,
    1080,  1081,  1082,   470,   478,   594,   595,   632,   897,  1302,
    1305,   632,   732,   731,   202,   191,  1501,  1501,  1501,  1525,
    1134,   191,   237,  1127,  1128,  1245,  1246,  1270,  1136,  1136,
     640,   122,   964,   966,  1438,  1311,   632,   632,   262,   368,
     615,   634,   634,   640,   640,   640,  1462,  1139,  1463,  1449,
    1311,  1451,  1452,    12,    34,   122,   366,  1139,  1469,  1433,
     191,  1358,   633,  1436,   364,   634,  1359,   413,  1250,  1344,
    1358,  1359,  1354,  1428,  1359,  1359,   501,   502,   503,   665,
    1074,   587,  1065,  1066,  1211,  1436,    97,   230,   249,   260,
     343,   455,   524,  1194,   478,   634,  1428,  1211,   634,   188,
    1586,    47,  1250,  1312,  1312,   341,  1433,   510,   510,   510,
     510,   510,   469,  1433,  1433,  1312,   634,   824,  1433,  1433,
    1433,  1433,   119,   183,   211,   279,   360,   569,  1256,  1433,
    1433,   633,   634,  1312,  1312,   634,   818,   811,   812,   831,
     832,   833,   390,    72,    85,   387,   925,   928,   929,   990,
     992,   996,   997,  1054,  1312,  1054,   387,  1312,  1312,  1054,
    1312,   387,   387,  1312,  1312,   558,   133,  1312,   250,   539,
     187,   387,   403,   992,  1054,   250,  1312,   387,   539,   133,
    1312,  1312,  1312,  1312,  1312,  1054,   387,    47,  1312,   852,
    1312,   387,   389,    19,   157,   558,  1058,   387,   387,  1312,
    1312,  1312,  1312,   136,   320,  1436,  1312,   387,  1312,   909,
     634,   849,   850,  1034,   632,   640,   924,   930,  1427,  1436,
      79,   465,   436,  1027,  1552,  1113,   632,  1139,   632,  1256,
    1432,  1433,  1256,  1256,  1432,  1432,   119,   183,   279,   360,
     569,  1258,  1432,  1256,  1256,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1256,  1256,  1432,  1419,  1432,  1256,   662,  1312,
    1312,  1312,  1312,   634,   821,  1438,   275,   174,   813,   814,
     815,   831,   832,   833,   834,   837,   838,   839,   840,   390,
     547,  1438,  1436,  1575,     8,    30,   799,   693,   632,   451,
     264,   632,   842,   908,   910,   911,    46,   208,   463,  1011,
    1011,  1428,  1428,  1428,  1286,  1436,   590,  1331,  1436,  1183,
     640,  1336,   236,  1139,   633,  1139,   550,  1139,  1139,   151,
      34,    60,   109,   112,   120,   345,   486,   554,   582,  1174,
     959,  1139,   959,  1174,  1176,   633,   236,   236,  1139,  1139,
    1139,  1176,  1139,  1139,  1139,  1139,  1139,  1142,   633,   633,
    1139,  1139,  1139,  1139,  1139,  1139,  1176,   236,  1139,  1139,
    1139,   633,  1139,  1139,  1139,  1139,   191,  1139,   191,  1139,
     191,  1139,  1139,  1139,    34,    60,   977,   978,   979,   980,
     981,  1257,  1256,   633,   633,  1538,  1539,  1540,  1203,  1121,
     633,  1531,  1438,  1139,  1535,  1141,   633,   634,   633,  1149,
    1228,  1228,    17,  1139,  1535,  1238,  1139,   633,   634,  1175,
    1176,  1436,  1280,   915,  1438,  1056,   656,  1371,   157,   634,
     633,   634,  1503,   640,   640,   558,   558,   558,  1483,  1235,
    1251,  1252,  1302,   634,  1112,  1114,   547,  1435,   615,   271,
     859,   860,   861,  1436,   871,  1142,    47,   632,   873,   863,
     859,   558,  1081,   898,  1303,   632,  1308,  1313,  1308,   633,
     897,  1304,  1421,  1422,  1425,  1436,  1306,  1227,  1436,   157,
     372,  1503,   191,   191,   191,  1119,   142,  1183,  1271,   188,
     274,  1132,  1270,  1251,  1128,    19,  1137,  1433,  1436,   627,
    1436,  1468,   547,   547,   418,   439,   473,  1467,  1465,  1464,
    1311,  1450,  1469,   634,  1454,  1456,  1460,  1258,  1349,   160,
     604,  1254,  1254,   360,  1350,  1234,  1354,   157,   157,   634,
     157,   390,  1067,  1199,  1206,  1211,  1182,   249,   249,   378,
    1213,   249,   260,   455,  1213,  1197,  1182,  1323,  1324,  1425,
    1184,  1195,  1208,  1209,  1256,   324,  1247,   966,   960,   108,
     108,   124,   239,   219,   841,  1257,   824,   678,   841,   841,
     818,   634,   812,   171,  1014,  1427,  1093,    62,   187,   403,
     579,   927,   991,  1014,   992,   993,   993,   122,  1436,  1427,
    1093,  1258,  1256,  1427,  1256,    12,  1035,  1043,  1044,  1436,
    1093,  1433,  1433,   958,  1312,  1256,   252,  1043,   252,  1427,
    1427,   915,  1044,  1312,   181,   255,   356,   918,  1256,   122,
    1436,  1258,  1258,  1427,  1093,  1243,  1244,  1425,   122,  1256,
     851,  1433,  1093,   852,  1428,  1093,  1093,    78,    80,   122,
     145,   182,   425,   917,   122,  1256,   122,  1256,   122,  1256,
    1256,  1035,   912,     6,   141,  1047,   921,   922,   923,   924,
     925,  1436,     8,   181,  1057,   426,   926,   927,   984,   931,
     640,   354,   401,    23,   165,   681,   558,   134,   149,   683,
     632,  1553,   632,   403,  1224,  1225,  1226,  1436,   663,   664,
    1256,  1433,  1257,   841,   841,   821,   371,   204,  1312,   634,
     815,   547,    19,   451,   632,   127,   233,   584,   800,   680,
    1569,   120,   238,   420,   525,   920,  1428,   264,   843,   848,
     849,   921,   848,   634,   910,   668,   670,   672,   640,  1183,
    1234,  1336,  1234,  1139,   633,  1139,   550,   632,   949,   950,
     950,   632,   944,   632,   942,   943,   949,   950,   238,   944,
     238,   633,   633,   633,   633,   633,  1164,  1139,  1139,   633,
     633,   634,   633,  1171,  1246,   634,   634,   633,   634,   633,
     240,  1156,  1157,   633,   633,   633,   633,   634,   633,   633,
    1139,   633,   188,   633,   633,   634,   633,   634,   634,   633,
    1139,   633,  1139,   633,  1139,   633,   633,   633,   632,   972,
     972,    20,   128,   453,   625,   974,   975,   976,   634,   634,
    1133,  1540,   633,  1534,   640,  1015,   633,  1176,  1141,   633,
     634,   633,  1136,  1161,   633,  1051,  1052,  1053,   188,   610,
    1372,    55,    64,    74,    86,    87,    88,   103,   322,   339,
     450,   466,   526,   543,   744,   743,  1507,   610,  1510,   627,
     627,  1503,  1503,  1503,   632,  1139,   366,  1318,  1110,  1428,
    1114,   223,  1117,  1392,   633,   634,  1136,   858,   387,   874,
     875,   633,  1439,  1129,  1309,  1310,  1425,  1314,   634,   632,
    1305,   633,   633,   634,   640,  1523,   633,   634,   731,   191,
    1503,  1503,  1503,  1234,  1234,   143,   379,  1266,  1267,  1272,
     584,   240,  1433,  1436,   640,   633,   633,    76,   570,   418,
    1469,  1453,  1455,  1250,  1250,  1359,  1433,  1433,   665,  1433,
     157,   123,  1068,   578,   633,  1527,  1207,   637,   249,  1197,
    1213,  1213,   249,   366,   366,   590,   634,  1322,  1311,  1232,
    1129,  1139,  1248,  1423,   812,  1037,   632,   252,   252,   993,
    1014,   999,  1014,  1014,   141,   478,  1035,  1048,  1032,   634,
    1257,   960,  1433,  1427,  1056,   610,  1433,  1049,  1035,   634,
      20,   128,  1249,   855,  1035,  1040,  1035,   632,   633,   634,
    1436,  1428,    33,    34,    39,    41,    43,    44,    60,   109,
     112,   120,   139,   156,   182,   184,   197,   198,   238,   268,
     277,   278,   280,   316,   317,   318,   335,   336,   337,   342,
     345,   362,   363,   395,   396,   420,   474,   478,   490,   548,
     551,   554,   555,   556,   557,   596,   597,   621,   932,   935,
     936,   937,   938,   939,   940,   941,  1436,   401,  1139,  1139,
     366,   687,   693,   366,    75,   688,  1436,  1554,    19,  1035,
     633,   634,   633,   634,   632,  1436,   841,   815,  1433,   920,
    1576,   366,   366,   704,   705,   707,  1436,   493,  1428,   897,
     633,   223,   441,   845,  1398,   910,   632,   632,   632,  1436,
    1234,  1245,  1228,  1139,   119,   279,   360,   569,    21,    34,
      48,   576,   958,   968,   969,   970,   360,   360,   633,  1228,
    1228,  1139,   472,  1170,  1139,  1139,  1176,    43,   343,   633,
     610,  1158,  1139,  1228,  1139,  1139,  1139,  1139,   633,   633,
     633,  1257,   633,   982,   977,   975,   977,   978,  1256,  1205,
    1532,  1436,   633,  1176,  1137,  1053,  1052,  1373,   418,   202,
     443,  1508,  1508,  1508,   122,  1139,  1316,  1317,   144,  1117,
     258,  1398,   861,   633,   208,   252,   876,   633,   634,  1133,
     634,  1311,  1315,  1316,  1313,  1307,  1305,  1421,  1436,   852,
    1436,  1503,  1251,   204,  1239,  1435,  1435,   639,  1268,  1269,
    1438,   480,   627,  1454,  1459,  1433,   157,   392,  1069,  1531,
    1232,  1185,  1182,  1197,   249,   249,  1182,  1197,  1188,  1187,
    1189,  1324,  1234,  1317,  1222,  1223,  1133,   634,  1249,   388,
     632,  1038,  1139,  1014,   999,   632,   998,   998,   122,   122,
     930,  1088,  1044,   965,   541,   932,  1031,  1244,  1041,  1043,
    1033,  1376,   923,   632,   985,   949,   949,   950,   944,   942,
     399,   933,   942,   942,   970,    60,   596,   936,   938,   970,
     970,    60,   597,   597,   600,   942,   934,   950,   944,   944,
     970,   949,   950,    26,    69,    73,    75,   122,   359,   366,
     403,   474,   523,   579,   952,   953,   954,   983,  1145,   600,
     949,   970,    34,   949,   971,   949,   949,   950,   632,   943,
     951,   640,  1228,   488,  1433,   140,  1028,   633,   634,  1555,
    1556,   633,  1225,   664,   677,   493,   231,   240,   380,   708,
     709,   710,   711,  1135,   465,   633,   634,   706,  1433,   633,
     633,   908,    19,   900,  1012,  1013,  1436,  1012,  1012,   265,
    1255,   633,   633,   633,   633,   633,    34,    21,   576,   958,
      34,   959,   633,   634,   633,   633,   633,  1415,   633,   633,
     634,   633,   330,   254,   413,   633,   633,   633,   633,   633,
     633,   973,   633,   634,   919,  1128,  1251,  1527,   633,   172,
     274,   372,    63,   247,   352,   512,   528,   616,  1499,  1500,
     610,  1509,  1509,  1509,   633,   634,  1319,   237,   632,   864,
     632,   877,  1436,   875,   899,  1310,  1317,   633,  1526,    47,
     209,  1236,  1273,  1438,   634,   330,  1433,   157,  1200,   366,
    1191,  1197,  1197,   366,  1193,  1139,  1139,   632,  1245,  1220,
    1221,  1210,  1423,  1257,   874,   633,   632,   632,  1012,   632,
     632,   112,   551,   554,   625,   626,  1417,  1418,  1057,  1428,
     952,  1093,  1042,  1080,   633,   986,  1436,   307,   987,   486,
     582,   622,   946,   947,   948,   632,   946,   946,   970,   600,
     946,   632,   970,   946,   964,   122,   145,   182,  1433,   956,
     957,  1417,   584,   122,   122,   136,   320,   252,   954,   252,
     359,   970,   971,   970,   971,   946,   360,   946,  1436,   682,
     689,   690,  1436,   470,   632,  1557,  1560,   633,  1433,   633,
     634,   706,  1564,   681,  1570,   707,   932,   955,   844,   848,
     632,   897,   633,   634,  1249,   632,   633,   633,  1254,   959,
     971,   360,  1139,   330,   170,   633,  1256,  1132,  1132,   547,
     547,   547,    17,  1498,   202,   308,   309,   313,   314,  1511,
    1512,  1317,   252,   541,  1135,   867,   869,   870,  1436,   594,
     878,   919,  1240,  1423,  1237,  1245,   958,   961,  1269,  1433,
    1532,  1190,   590,  1192,   590,  1227,  1255,   186,   223,   589,
    1215,  1216,  1219,   919,  1249,   633,  1012,  1012,   633,  1012,
    1012,  1419,  1419,   852,  1050,   237,   633,   634,   192,   386,
     487,   366,   988,   948,  1016,  1415,  1016,   956,   595,   514,
     684,    53,    66,   179,   222,   248,   259,   369,   452,   691,
     749,   751,   752,   753,   755,   756,   757,   758,   759,   760,
     762,   770,   771,   774,   785,   788,   790,   791,  1431,  1437,
    1441,  1561,   632,  1559,  1560,   610,  1562,  1558,  1577,   710,
    1436,  1428,   686,   687,   451,   965,  1526,   845,   897,   846,
      75,   251,  1000,  1003,  1006,  1007,  1008,  1013,   360,   610,
    1001,  1005,  1007,  1010,  1002,  1004,  1007,  1009,   633,   633,
     633,  1499,   372,  1256,  1256,  1256,  1256,  1512,   584,  1428,
     871,   529,   872,   633,   634,   240,   261,    75,   108,   227,
     310,   328,   351,   539,   894,   895,   896,  1353,   611,   612,
     634,  1241,  1249,  1139,  1251,   960,  1274,  1201,  1139,   632,
    1139,   632,   633,   992,   992,  1216,   633,   633,  1000,   633,
     633,  1057,   632,  1436,   127,   584,   633,   634,   633,  1139,
     152,   685,   772,   775,  1436,   191,   350,   763,   750,  1437,
    1437,  1436,   754,   647,   281,   440,   609,   794,    31,   792,
     641,  1124,  1559,   633,    52,    62,   271,  1523,   695,   955,
     188,   683,  1571,   633,  1523,  1433,  1312,   669,  1008,  1249,
     633,   385,   671,  1010,   673,  1009,  1325,  1326,  1425,  1195,
    1136,  1257,   868,   870,   880,   549,  1312,   133,   133,  1312,
    1312,  1312,  1312,   632,   889,   896,   155,  1423,   405,  1262,
      71,  1399,  1527,  1227,  1227,   188,  1214,  1214,   984,  1000,
    1001,  1002,   874,    51,   356,   448,   478,   989,   989,   970,
    1415,   970,  1139,  1139,   607,   777,   781,   191,  1436,   765,
     766,  1139,   713,   748,   749,   751,   753,   755,   757,   758,
     759,   760,   762,   770,   785,   788,   790,   713,   795,   793,
     786,   789,   633,  1526,    62,   372,    62,   131,   696,   697,
    1145,  1578,  1135,   688,   955,   847,  1256,  1051,  1431,  1051,
    1051,   634,  1311,  1393,   633,   872,   632,   882,   884,   879,
    1433,  1312,  1312,   279,   360,   569,  1259,  1260,  1259,  1257,
    1438,   530,   890,   891,  1312,  1249,    14,   150,   161,   373,
     546,  1400,  1401,   267,  1402,   633,   633,   204,   249,   375,
    1218,  1217,   633,     5,   122,   359,   366,   366,   773,   782,
     147,   781,   784,   237,   151,  1139,   151,   748,   638,   583,
    1139,   714,   794,   792,   372,   372,   131,   748,  1565,   140,
    1572,  1526,  1326,  1317,   961,   632,   883,   884,   885,   315,
     881,   884,  1433,  1433,   892,   633,   634,   915,  1263,    47,
      47,   150,    47,  1401,   513,   546,  1403,  1404,    47,    47,
     632,   632,   584,   127,   607,   776,   778,  1139,   713,   151,
     761,   222,   767,   281,   638,   797,   796,   121,   712,   715,
     787,  1437,   787,   146,   689,   695,  1394,   633,   634,   315,
     887,   888,  1142,   893,  1438,   891,   632,  1415,  1415,    47,
    1415,    47,    47,  1404,  1224,  1226,   989,   989,   779,   778,
     784,   783,    53,   764,  1436,   550,  1139,   140,    91,   169,
     719,   745,  1436,   151,   748,   638,   461,  1573,   459,  1405,
     884,   634,   886,   894,   360,  1264,  1265,  1415,  1415,  1415,
     633,   633,  1139,   151,   550,   634,   713,   798,   713,   207,
     634,   716,    82,   102,   638,  1566,   748,   220,  1399,   888,
     633,   633,   634,   780,    53,   713,  1436,   768,   151,   151,
     188,  1436,   955,   188,   188,   748,    47,  1402,  1265,   550,
     147,   148,   769,   440,   609,   717,   122,   746,   722,   723,
    1256,   718,  1415,   223,  1406,   713,   713,   765,   498,   500,
     720,   721,   722,   725,  1145,  1436,   747,  1118,   360,   632,
    1408,   634,   748,   190,  1139,   267,   459,  1407,   633,   639,
    1409,  1410,  1425,   478,  1411,   721,  1438,   633,   634,  1412,
    1413,  1425,  1410,   634,  1311,  1413,  1135,  1317,  1136
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1928 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1940 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1965 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 2039 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2054 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 2064 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2071 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2081 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2088 "sql_yacc.yy"
    {}
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2103 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2115 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2123 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2134 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2147 "sql_yacc.yy"
    {}
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2157 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2161 "sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2165 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2169 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2173 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2177 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2181 "sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2186 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       static_cast<uint>((yyvsp[(3) - (3)].ulong_num)), MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2196 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2201 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2205 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2209 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2213 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2217 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2221 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2226 "sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2230 "sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2235 "sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2266 "sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2271 "sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2288 "sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2302 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2306 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2322 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2326 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2338 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2363 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2382 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2387 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2391 "sql_yacc.yy"
    { }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2394 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2399 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2403 "sql_yacc.yy"
    { }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2406 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2411 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2415 "sql_yacc.yy"
    { }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2417 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2422 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2429 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2435 "sql_yacc.yy"
    {}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2437 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2441 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2445 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2449 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2460 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2474 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2478 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2482 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2486 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2490 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2494 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2498 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2505 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2525 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2536 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2543 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2549 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2551 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2557 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2563 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2572 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2579 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2587 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2593 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2599 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2605 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2613 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2615 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2622 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2665 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2694 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2709 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2723 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2741 "sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2742 "sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2746 "sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2747 "sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2753 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2755 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2757 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2759 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2761 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2763 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2765 "sql_yacc.yy"
    {}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2770 "sql_yacc.yy"
    { }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2771 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2772 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2777 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2781 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2788 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2796 "sql_yacc.yy"
    {}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2812 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2816 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2834 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2854 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2895 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2923 "sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2924 "sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2925 "sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2926 "sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2930 "sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2935 "sql_yacc.yy"
    {}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2941 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2945 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2971 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2982 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 3055 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3071 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3111 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3145 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3154 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3217 "sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3218 "sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3224 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3226 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3231 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3254 "sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3269 "sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3290 "sql_yacc.yy"
    {}
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3291 "sql_yacc.yy"
    {}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3296 "sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3300 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3313 "sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3319 "sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3325 "sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3334 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3349 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3375 "sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3380 "sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3382 "sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3387 "sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3395 "sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3404 "sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3423 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3425 "sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3443 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3449 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3451 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3453 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3455 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3457 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3459 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3461 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3463 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3465 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3467 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3469 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3471 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3476 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3492 "sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3507 "sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3509 "sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3514 "sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3520 "sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3529 "sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3535 "sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3544 "sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3552 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3581 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3590 "sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3592 "sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3601 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3606 "sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3612 "sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3621 "sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3629 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3631 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3633 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3635 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3637 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3639 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3641 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3643 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3645 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3647 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3649 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3651 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3653 "sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3658 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3678 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3701 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3703 "sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3705 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3726 "sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3728 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3736 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3746 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3793 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3803 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3849 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3860 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3872 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3931 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3981 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 4005 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 4026 "sql_yacc.yy"
    {}
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 4031 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 4061 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 4079 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 4099 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 4108 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 4144 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 4163 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 4186 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4197 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4241 "sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4248 "sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4255 "sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4272 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4281 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4322 "sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4330 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4339 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4375 "sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4383 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4401 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4419 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4438 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4439 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4444 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4460 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4477 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4488 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4496 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4511 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4547 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4562 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4571 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4609 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4625 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4634 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4675 "sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4677 "sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4682 "sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4684 "sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4686 "sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4720 "sql_yacc.yy"
    {}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4722 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4732 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4738 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4761 "sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4859 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4867 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4875 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4883 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4895 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4907 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4912 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4917 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4925 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4933 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4941 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4949 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4957 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4965 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4973 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4986 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4999 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 5013 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 5018 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 5030 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 5032 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 5082 "sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 5085 "sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 5087 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 5102 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 5121 "sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 5124 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 5125 "sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 5129 "sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 5131 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 5132 "sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 5134 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 5135 "sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 5140 "sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 5176 "sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 5182 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 5200 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 5219 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 5231 "sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 5240 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 5247 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 5248 "sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 5250 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 5252 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 5254 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 5256 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 5260 "sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 5262 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 5266 "sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 5267 "sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 5271 "sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 5272 "sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 5277 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 5296 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 5306 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 5317 "sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 5325 "sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 5327 "sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5342 "sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5344 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5345 "sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5348 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5353 "sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5357 "sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5358 "sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5363 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5381 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5396 "sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5398 "sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5413 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5429 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5450 "sql_yacc.yy"
    {}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5451 "sql_yacc.yy"
    {}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5456 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5475 "sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5480 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5489 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5511 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5526 "sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5528 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5543 "sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5548 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5569 "sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5574 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5603 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5614 "sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5615 "sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5620 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5631 "sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5633 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5656 "sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5657 "sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5662 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5675 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5695 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5709 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5734 "sql_yacc.yy"
    {}
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5735 "sql_yacc.yy"
    {}
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5740 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5772 "sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5777 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5781 "sql_yacc.yy"
    {}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5782 "sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5786 "sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5787 "sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5792 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5794 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5800 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5802 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5804 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5806 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5808 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5810 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5819 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5834 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5838 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5848 "sql_yacc.yy"
    {}
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5849 "sql_yacc.yy"
    {}
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5853 "sql_yacc.yy"
    {}
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5854 "sql_yacc.yy"
    {}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5858 "sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5859 "sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5863 "sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5864 "sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5868 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5869 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5873 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5874 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5878 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5882 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5883 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5904 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5909 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5914 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5919 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5924 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5929 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5934 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5939 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5954 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5960 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5975 "sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5980 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5995 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 6001 "sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 6019 "sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 6024 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 6029 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 6034 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 6039 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 6044 "sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 6048 "sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 6072 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 6077 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 6082 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 6087 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 6089 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 6091 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 6093 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 6099 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 6107 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 6125 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 6142 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 6168 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 6185 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 6186 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 6187 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 6188 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 6189 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 6190 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 6194 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 6195 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 6196 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 6200 "sql_yacc.yy"
    {}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 6205 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 6206 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 6207 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 6208 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 6214 "sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 6232 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 6239 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 6245 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 6251 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 6257 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 6262 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 6281 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 6296 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 6297 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 6301 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 6306 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 6315 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 6328 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 6329 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 6330 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 6332 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 6337 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 6341 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 6346 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 6351 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 6355 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 6360 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 6365 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 6371 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 6376 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 6382 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 6386 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 6391 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 6396 "sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6414 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6416 "sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6418 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6434 "sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6436 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6441 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6446 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6458 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6463 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6468 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6473 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6475 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6477 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6479 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6481 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6483 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6485 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6487 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6489 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6491 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6493 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6495 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6497 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6499 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6507 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6508 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6510 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6514 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6515 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6516 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6517 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6518 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6522 "sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6526 "sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6527 "sql_yacc.yy"
    {}
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6531 "sql_yacc.yy"
    {}
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6532 "sql_yacc.yy"
    {}
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6536 "sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6537 "sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6538 "sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6539 "sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6540 "sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6544 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6545 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6546 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6547 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6548 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6553 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6558 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6560 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6565 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6567 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6569 "sql_yacc.yy"
    {}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6574 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6583 "sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6584 "sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6588 "sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6589 "sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6591 "sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6598 "sql_yacc.yy"
    {}
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6599 "sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6603 "sql_yacc.yy"
    {}
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6604 "sql_yacc.yy"
    {}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6608 "sql_yacc.yy"
    {}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6609 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6610 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6614 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6615 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6616 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6617 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6620 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6621 "sql_yacc.yy"
    { }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6625 "sql_yacc.yy"
    {}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6626 "sql_yacc.yy"
    {}
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6630 "sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6631 "sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6635 "sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6640 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6641 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6642 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6643 "sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6644 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6646 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6652 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6658 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6664 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6669 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6671 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6684 "sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6690 "sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6696 "sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6702 "sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6707 "sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6712 "sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6721 "sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6742 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6751 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6755 "sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6756 "sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6761 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6768 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6772 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6773 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6777 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6778 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6783 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6791 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6795 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6796 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6801 "sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6808 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6809 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6813 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6814 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6818 "sql_yacc.yy"
    {}
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6819 "sql_yacc.yy"
    {}
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6824 "sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6826 "sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6830 "sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6837 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6846 "sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6851 "sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6858 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6861 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6862 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6864 "sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6869 "sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6876 "sql_yacc.yy"
    { }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6877 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6882 "sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6890 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6894 "sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6895 "sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6899 "sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6902 "sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6903 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6904 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6905 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6910 "sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6918 "sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6924 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6925 "sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6930 "sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6939 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6940 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6944 "sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6945 "sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6959 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6966 "sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6972 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6979 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6991 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6993 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6995 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6997 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 7002 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 7008 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 7014 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 7021 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 7028 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 7036 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 7037 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 7038 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 7039 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 7040 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 7044 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 7048 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 7049 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 7053 "sql_yacc.yy"
    {}
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 7054 "sql_yacc.yy"
    {}
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 7058 "sql_yacc.yy"
    {}
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 7063 "sql_yacc.yy"
    {}
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 7064 "sql_yacc.yy"
    {}
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 7065 "sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 7069 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 7070 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 7074 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 7079 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 7091 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 7108 "sql_yacc.yy"
    {}
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 7113 "sql_yacc.yy"
    {}
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 7118 "sql_yacc.yy"
    {}
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 7138 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 7139 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 7144 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 7145 "sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 7160 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 7172 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 7173 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 7174 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 7178 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 7179 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 7184 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 7190 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 7203 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 7204 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 7208 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 7209 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 7213 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 7214 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 7222 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
          }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 7248 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 7260 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 7265 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 7274 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 7285 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 7296 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 7303 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 7314 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 7321 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 7332 "sql_yacc.yy"
    {}
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 7339 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 7351 "sql_yacc.yy"
    {}
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 7353 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 7373 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 7386 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 7391 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 7396 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 7401 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 7406 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 7413 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 7420 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 7425 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 7432 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7433 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7434 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7435 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7439 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7441 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7452 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7453 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7457 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7458 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7464 "sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7472 "sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7494 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7499 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7506 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7520 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7532 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7545 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7558 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7565 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7578 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7605 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7612 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7620 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7632 "sql_yacc.yy"
    {}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7638 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7643 "sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7650 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7665 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7669 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7673 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7680 "sql_yacc.yy"
    {}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7681 "sql_yacc.yy"
    {}
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7686 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7706 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7715 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7719 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7724 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7729 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7735 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7739 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7748 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7760 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7764 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7773 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7782 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7791 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7800 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7806 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7812 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7821 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7830 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7858 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7879 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7889 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7893 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7910 "sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7915 "sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7926 "sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7931 "sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7941 "sql_yacc.yy"
    {}
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7942 "sql_yacc.yy"
    {}
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7946 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7947 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7951 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7952 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7953 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7957 "sql_yacc.yy"
    {}
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7959 "sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7964 "sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7971 "sql_yacc.yy"
    {}
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7972 "sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7973 "sql_yacc.yy"
    {}
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7974 "sql_yacc.yy"
    {}
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7979 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7991 "sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 8008 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 8018 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 8034 "sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 8038 "sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 8045 "sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 8049 "sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 8056 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 8060 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 8064 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 8075 "sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 8079 "sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 8085 "sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 8089 "sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 8094 "sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 8098 "sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 8104 "sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 8108 "sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 8115 "sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 8119 "sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 8126 "sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 8130 "sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 8137 "sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 8141 "sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 8147 "sql_yacc.yy"
    {}
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 8149 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 8176 "sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 8181 "sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 8186 "sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 8193 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 8200 "sql_yacc.yy"
    {}
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 8204 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 8205 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 8206 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 8211 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 8221 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 8232 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 8233 "sql_yacc.yy"
    {}
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 8237 "sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 8238 "sql_yacc.yy"
    {}
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 8242 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 8243 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 8244 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 8249 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 8259 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 8271 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 8279 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 8294 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 8305 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 8306 "sql_yacc.yy"
    {}
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 8310 "sql_yacc.yy"
    {}
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 8311 "sql_yacc.yy"
    {}
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 8315 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 8316 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 8317 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 8318 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 8319 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 8320 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 8325 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 8335 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 8346 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 8347 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 8348 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 8353 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 8357 "sql_yacc.yy"
    {}
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 8359 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 8366 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 8371 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 8384 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 8397 "sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 8401 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 8420 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 8430 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 8439 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8440 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8445 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8451 "sql_yacc.yy"
    {}
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 8466 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 8476 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 8486 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 8493 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8504 "sql_yacc.yy"
    { }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8510 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8511 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8521 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8535 "sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8545 "sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8554 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8573 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8581 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8588 "sql_yacc.yy"
    {}
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8598 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8613 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8630 "sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8658 "sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8690 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8696 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8708 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8723 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8730 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8754 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8760 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8766 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8767 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8768 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8769 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8770 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8774 "sql_yacc.yy"
    {}
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8775 "sql_yacc.yy"
    {}
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8781 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8832 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8839 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8882 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8888 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8894 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8900 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8906 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8912 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8918 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8928 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8934 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8940 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8946 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8952 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8962 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8968 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8978 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8984 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8992 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8998 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 9008 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 9014 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 9023 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 9033 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 9039 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 9049 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 9055 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 9068 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 9074 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 9080 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 9086 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 9092 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 9098 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 9104 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 9110 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 9116 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 9122 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 9128 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 9134 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 9140 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 9146 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 9175 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 9176 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 9177 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 9178 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 9179 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 9180 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 9184 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 9185 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 9195 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 9211 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 9217 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 9221 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 9227 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 9233 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 9239 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 9245 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 9247 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 9254 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 9261 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 9267 "sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 9308 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 9317 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 9324 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 9332 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 9338 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 9345 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 9351 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 9365 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 9373 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 9388 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 9394 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 9400 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 9408 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 9414 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 9420 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 9426 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 9432 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 9447 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 9459 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 9465 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 9471 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 9477 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 9483 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 9489 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 9495 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 9501 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 9507 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 9513 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 9519 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 9525 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9531 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9537 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9543 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9549 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9555 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 9563 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9584 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 9591 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9597 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9604 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9612 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9619 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9625 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9631 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9637 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9642 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9648 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9655 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9661 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9667 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9673 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9679 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9685 "sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9703 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9709 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9715 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9722 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9729 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9744 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9750 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9756 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9762 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9768 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9775 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9781 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9787 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9793 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9799 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9805 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9811 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9823 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9829 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9835 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9841 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9847 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9855 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9861 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9873 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9879 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9885 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9893 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9903 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9909 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9925 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9931 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9938 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9945 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9952 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9959 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9966 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9970 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9989 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 10008 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 10062 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 10102 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 10104 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 10108 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 10109 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 10113 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 10114 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 10118 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 10119 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 10124 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 10131 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 10139 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 10164 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 10170 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 10176 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 10182 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 10188 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 10194 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 10203 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 10209 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 10211 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 10213 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 10219 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 10230 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 10236 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 10242 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 10248 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 10254 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 10260 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 10266 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 10272 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 10278 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 10284 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 10288 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 10302 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 10310 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 10317 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 10327 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 10335 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 10350 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 10351 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 10356 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 10361 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 10366 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 10370 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 10382 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 10391 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 10399 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 10401 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 10403 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 10405 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 10407 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 10409 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 10411 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 10413 "sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 10415 "sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 10417 "sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 10419 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 10423 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 10424 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 10429 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 10436 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 10443 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 10444 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 10449 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10456 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10463 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10464 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10468 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10469 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10474 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10482 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10492 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10494 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10502 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10513 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10514 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 10520 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 10522 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10542 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10544 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10547 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10555 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10562 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10570 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10578 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10582 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10584 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10592 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10600 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10608 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10612 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10618 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10628 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10636 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10645 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10649 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10656 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10666 "sql_yacc.yy"
    {}
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10667 "sql_yacc.yy"
    {}
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10668 "sql_yacc.yy"
    {}
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10676 "sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10682 "sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10696 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10701 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10712 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10752 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                     (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union()) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10806 "sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10811 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10824 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10843 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10851 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10860 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10866 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10882 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10899 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10906 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10911 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10936 "sql_yacc.yy"
    {}
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10937 "sql_yacc.yy"
    {}
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10942 "sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10945 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10946 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10947 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10951 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10952 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10957 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10962 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10975 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10979 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10984 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10985 "sql_yacc.yy"
    {}
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10990 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10992 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 11002 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 11013 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 11025 "sql_yacc.yy"
    {}
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 11026 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 11027 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 11028 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 11029 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 11030 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 11031 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 11032 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 11033 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 11034 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 11035 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 11036 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 11040 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 11041 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 11042 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 11043 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 11044 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 11045 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 11046 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 11047 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 11048 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 11052 "sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 11053 "sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 11054 "sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 11055 "sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 11065 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 11067 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 11080 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 11082 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 11086 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 11098 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 11102 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 11113 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 11118 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 11140 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 11142 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 11146 "sql_yacc.yy"
    {}
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 11148 "sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 11168 "sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 11202 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 11221 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 11256 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 11258 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 11262 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 11263 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 11264 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 11269 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 11275 "sql_yacc.yy"
    {}
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 11279 "sql_yacc.yy"
    {}
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 11280 "sql_yacc.yy"
    {}
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 11285 "sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 11292 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 11299 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 11306 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 11316 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11343 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 11347 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 11353 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11359 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 11368 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11373 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11382 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 11383 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11384 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 11385 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11386 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11387 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 11391 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11392 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 11393 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11394 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11395 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11399 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11400 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11401 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11402 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11403 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11407 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11408 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11409 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11410 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11415 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11426 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(0));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11459 "sql_yacc.yy"
    {}
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11461 "sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11465 "sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11473 "sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11485 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11491 "sql_yacc.yy"
    {}
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 11496 "sql_yacc.yy"
    {}
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 11501 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11520 "sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11559 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11571 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11579 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11582 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11594 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11605 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11611 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11622 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11631 "sql_yacc.yy"
    {}
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11632 "sql_yacc.yy"
    {}
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11633 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11648 "sql_yacc.yy"
    {}
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11650 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11657 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11678 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11699 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11711 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11715 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11723 "sql_yacc.yy"
    {}
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11725 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11731 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11738 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11743 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11748 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11763 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11774 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11792 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11802 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11803 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11807 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11808 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11831 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11839 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11844 "sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11849 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11856 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11861 "sql_yacc.yy"
    {}
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11866 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11878 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11880 "sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11892 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11896 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11898 "sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11913 "sql_yacc.yy"
    {}
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11914 "sql_yacc.yy"
    {}
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11919 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11927 "sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11928 "sql_yacc.yy"
    {}
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11929 "sql_yacc.yy"
    {}
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11931 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11941 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11942 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11946 "sql_yacc.yy"
    {}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11947 "sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11949 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11950 "sql_yacc.yy"
    {}
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11952 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11953 "sql_yacc.yy"
    {}
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11968 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11977 "sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11978 "sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11982 "sql_yacc.yy"
    {}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11983 "sql_yacc.yy"
    {}
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11988 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11993 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 12001 "sql_yacc.yy"
    {}
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 12007 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 12012 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 12019 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 12021 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 12030 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 12038 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 12046 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 12064 "sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 12074 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 12087 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 12096 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 12097 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 12104 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 12119 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 12130 "sql_yacc.yy"
    {}
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 12132 "sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 12138 "sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 12143 "sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 12149 "sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 12162 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 12175 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 12190 "sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 12191 "sql_yacc.yy"
    {}
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 12195 "sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 12196 "sql_yacc.yy"
    {}
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 12200 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 12201 "sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 12202 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 12207 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 12218 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 12243 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 12247 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 12251 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 12255 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 12259 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 12263 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 12267 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 12271 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 12275 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 12282 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 12286 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 12295 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 12303 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 12310 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 12317 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 12325 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 12333 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 12341 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 12349 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 12357 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 12364 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 12366 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 12368 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 12377 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 12381 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 12385 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 12390 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 12395 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 12404 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 12411 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12416 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12421 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12426 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12428 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12430 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12432 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12434 "sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12442 "sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12453 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12461 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12463 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12471 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 12478 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12485 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12495 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12502 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12508 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12517 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12525 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12529 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12533 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 12540 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12547 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12553 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12560 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12567 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12572 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12577 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12585 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12587 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12589 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12603 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12604 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12608 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12609 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12618 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12619 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12623 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12624 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12630 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12637 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12647 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12658 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12662 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12664 "sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12682 "sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12687 "sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12693 "sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12699 "sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12720 "sql_yacc.yy"
    {}
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12721 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12723 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12737 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12744 "sql_yacc.yy"
    {}
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12749 "sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12758 "sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12759 "sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12764 "sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12766 "sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12777 "sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12785 "sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12800 "sql_yacc.yy"
    {}
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12805 "sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12807 "sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12809 "sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12811 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12813 "sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12815 "sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12817 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12819 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12821 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12823 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12825 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12827 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12829 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12833 "sql_yacc.yy"
    {}
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12834 "sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12839 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12844 "sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12853 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12854 "sql_yacc.yy"
    { }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12855 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12856 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12860 "sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12861 "sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12866 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12872 "sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12881 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12885 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12897 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12906 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12907 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12908 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12915 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12926 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12938 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12948 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12958 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12962 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12966 "sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12967 "sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12971 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12972 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12976 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12978 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12989 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12993 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12994 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12995 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 13010 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 13015 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 13022 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 13027 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 13045 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 13050 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 13057 "sql_yacc.yy"
    { }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 13059 "sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 13064 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 13071 "sql_yacc.yy"
    { }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 13073 "sql_yacc.yy"
    { }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 13077 "sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 13078 "sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 13079 "sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 13084 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 13086 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 13090 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 13092 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 13100 "sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 13101 "sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 13111 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 13124 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 13148 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 13160 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 13171 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 13190 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 13198 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 13210 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 13225 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 13245 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 13246 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 13248 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 13256 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 13257 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 13258 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 13260 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 13267 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 13273 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 13279 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 13285 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 13291 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 13320 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 13351 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 13361 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 13371 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 13377 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 13386 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 13398 "sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 13404 "sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 13410 "sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 13425 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 13426 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 13431 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 13440 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 13455 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 13460 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 13510 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 13515 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 13532 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13537 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_trg_table_fields.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 13617 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13642 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13672 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13674 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13690 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13699 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13704 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13710 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13716 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13726 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13732 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13741 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13750 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13752 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13782 "sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13795 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13811 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13827 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13843 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13845 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13855 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13857 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13867 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13868 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13869 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13874 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13895 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13922 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13936 "sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13937 "sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13938 "sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13939 "sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13940 "sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13941 "sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13942 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13943 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13944 "sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13945 "sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13946 "sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13947 "sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13948 "sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13949 "sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13950 "sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13951 "sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13952 "sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13953 "sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13954 "sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13955 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13956 "sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13957 "sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13958 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13959 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13960 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13961 "sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13962 "sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13963 "sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13964 "sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13965 "sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13966 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13967 "sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13968 "sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13969 "sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13970 "sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13971 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13972 "sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13973 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13974 "sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13975 "sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13976 "sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13977 "sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13978 "sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13979 "sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13980 "sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13981 "sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13982 "sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13983 "sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13984 "sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13985 "sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13995 "sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13996 "sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13997 "sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13998 "sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13999 "sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 14000 "sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 14001 "sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 14002 "sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 14003 "sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 14004 "sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 14005 "sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 14006 "sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 14007 "sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 14008 "sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 14009 "sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 14010 "sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 14011 "sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 14012 "sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 14013 "sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 14014 "sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 14015 "sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 14016 "sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 14017 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 14018 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 14019 "sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 14020 "sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 14021 "sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 14022 "sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 14023 "sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 14024 "sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 14025 "sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 14026 "sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 14027 "sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 14028 "sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 14029 "sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 14030 "sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 14031 "sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 14032 "sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 14033 "sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 14034 "sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 14035 "sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 14036 "sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 14037 "sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 14038 "sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 14039 "sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 14040 "sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 14041 "sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 14046 "sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 14047 "sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 14048 "sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 14049 "sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 14050 "sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 14051 "sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 14052 "sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 14053 "sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 14054 "sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 14055 "sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 14056 "sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 14057 "sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 14058 "sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 14059 "sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 14060 "sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 14061 "sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 14062 "sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 14063 "sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 14064 "sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 14065 "sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 14066 "sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 14067 "sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 14068 "sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 14069 "sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 14070 "sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 14071 "sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 14072 "sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14073 "sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14074 "sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14075 "sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 14076 "sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 14077 "sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14078 "sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14079 "sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14080 "sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14081 "sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14082 "sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14083 "sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14084 "sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14085 "sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14086 "sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14087 "sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14088 "sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14089 "sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14090 "sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14091 "sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14092 "sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14093 "sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14094 "sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14095 "sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14096 "sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14097 "sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14098 "sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14099 "sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14100 "sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14101 "sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14102 "sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14103 "sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14104 "sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14105 "sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14106 "sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14107 "sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14108 "sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14109 "sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14110 "sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14111 "sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14112 "sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14113 "sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14114 "sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14115 "sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14116 "sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14117 "sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14118 "sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14119 "sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14120 "sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14121 "sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14122 "sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14123 "sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14124 "sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14125 "sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14126 "sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14127 "sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14128 "sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14129 "sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14130 "sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14131 "sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14132 "sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14133 "sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14134 "sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14135 "sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14136 "sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14137 "sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14138 "sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14139 "sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14140 "sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14141 "sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14142 "sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14143 "sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14144 "sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14145 "sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14146 "sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14147 "sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14148 "sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14149 "sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14150 "sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14151 "sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14152 "sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14153 "sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14154 "sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14155 "sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14156 "sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14157 "sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14158 "sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14159 "sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14160 "sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14161 "sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14162 "sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14163 "sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14164 "sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14165 "sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14166 "sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14167 "sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14168 "sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14169 "sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14170 "sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14171 "sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14172 "sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14173 "sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14174 "sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14175 "sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14176 "sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14177 "sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14178 "sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14179 "sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14180 "sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14181 "sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14182 "sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14183 "sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14184 "sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14185 "sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14186 "sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14187 "sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14188 "sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14189 "sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14190 "sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14191 "sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14192 "sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14193 "sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14194 "sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14195 "sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14196 "sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14197 "sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14198 "sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14199 "sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14200 "sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14201 "sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14202 "sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14203 "sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14204 "sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14205 "sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14206 "sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14207 "sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14208 "sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14209 "sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14210 "sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14211 "sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14212 "sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14213 "sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14214 "sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14215 "sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14216 "sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14217 "sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14218 "sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14219 "sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14220 "sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14221 "sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14222 "sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14223 "sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14224 "sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14225 "sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14226 "sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14227 "sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14228 "sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14229 "sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14230 "sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14231 "sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14232 "sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14233 "sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14234 "sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14235 "sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14236 "sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14237 "sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14238 "sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14239 "sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14240 "sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14241 "sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14242 "sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14243 "sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14244 "sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14245 "sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14246 "sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14247 "sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14248 "sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14249 "sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14250 "sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14251 "sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14252 "sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14253 "sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14254 "sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14255 "sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14256 "sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14257 "sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14258 "sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14259 "sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14260 "sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14261 "sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14262 "sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14263 "sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14264 "sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14265 "sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14266 "sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14267 "sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14268 "sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14269 "sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14270 "sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14271 "sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14272 "sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14273 "sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14274 "sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14275 "sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14276 "sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14277 "sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14278 "sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14279 "sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14280 "sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14281 "sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14282 "sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14283 "sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14284 "sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14285 "sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14286 "sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14287 "sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14288 "sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14289 "sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14290 "sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14291 "sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14292 "sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14293 "sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14294 "sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14295 "sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14296 "sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14297 "sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14298 "sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14299 "sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14300 "sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14301 "sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14313 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14325 "sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14332 "sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14338 "sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14342 "sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14347 "sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14357 "sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14363 "sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14377 "sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14381 "sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14386 "sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14390 "sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14399 "sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14407 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14408 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14409 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14413 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14414 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14415 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14416 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14420 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14421 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14422 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14423 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14429 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14454 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14461 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14554 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14565 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14578 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14594 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14607 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14629 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14663 "sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            if (!user->user.str)
              lex->is_change_password= TRUE;
          }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14682 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14710 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14756 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14777 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14795 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14812 "sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14813 "sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14817 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14818 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14819 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14820 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14824 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14826 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14843 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14854 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14855 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14857 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14863 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14869 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14880 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14891 "sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14906 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14918 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14919 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14921 "sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14925 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14930 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14941 "sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14950 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14966 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14982 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 15000 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 15020 "sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 15021 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 15025 "sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 15026 "sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 15030 "sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 15031 "sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 15032 "sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 15033 "sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 15035 "sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 15042 "sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 15048 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 15049 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 15050 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 15051 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 15052 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 15059 "sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 15064 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 15070 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 15081 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 15092 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 15096 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 15106 "sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 15112 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 15119 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 15131 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 15142 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 15156 "sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 15158 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 15176 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 15177 "sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 15179 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 15180 "sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 15182 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 15183 "sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 15185 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 15186 "sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 15187 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 15188 "sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 15189 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 15190 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 15191 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 15192 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 15193 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 15194 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 15195 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 15196 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 15197 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 15198 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 15199 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 15200 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 15201 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 15202 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 15203 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 15204 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 15205 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 15206 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 15207 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 15208 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 15209 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 15210 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 15211 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 15212 "sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 15216 "sql_yacc.yy"
    {}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 15217 "sql_yacc.yy"
    {}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 15227 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 15237 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 15247 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 15260 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 15275 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 15288 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 15301 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 15313 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 15318 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 15326 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 15331 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 15339 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 15353 "sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 15364 "sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 15373 "sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 15383 "sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 15391 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 15405 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 15434 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 15438 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 15442 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 15446 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 15452 "sql_yacc.yy"
    {}
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 15457 "sql_yacc.yy"
    {}
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 15458 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 15462 "sql_yacc.yy"
    {}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 15463 "sql_yacc.yy"
    {}
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 15467 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 15469 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 15475 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 15481 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 15487 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 15496 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 15501 "sql_yacc.yy"
    {}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 15505 "sql_yacc.yy"
    {}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 15506 "sql_yacc.yy"
    {}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 15511 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 15512 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 15513 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 15518 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15519 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15520 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 15524 "sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 15525 "sql_yacc.yy"
    {}
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 15530 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 15542 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15552 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15561 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15570 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 15583 "sql_yacc.yy"
    {}
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 15589 "sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15594 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 15604 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15605 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 15606 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15615 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 15631 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 15644 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 15645 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 15646 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 15651 "sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15655 "sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 15664 "sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 15670 "sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15679 "sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15685 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15706 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15734 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15736 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15743 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15744 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15745 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15747 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15753 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15758 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15769 "sql_yacc.yy"
    {}
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15771 "sql_yacc.yy"
    {}
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15773 "sql_yacc.yy"
    {}
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15806 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15820 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15833 "sql_yacc.yy"
    {}
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15835 "sql_yacc.yy"
    {}
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15837 "sql_yacc.yy"
    {}
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 15842 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15847 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15849 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15851 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15856 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 15858 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15860 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15865 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15882 "sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15888 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15893 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15900 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15909 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15926 "sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15947 "sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15956 "sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15960 "sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15967 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15969 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15971 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15973 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15990 "sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15996 "sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 16001 "sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 16031 "sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 16066 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 16084 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 16107 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 16139 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 16144 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 16152 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 16175 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 16183 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 16241 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 16261 "sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 16274 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 16284 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 16292 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 16306 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 16310 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 16314 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 16318 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 16322 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 16326 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 16333 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 16340 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 16347 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 16356 "sql_yacc.yy"
    {}
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 16357 "sql_yacc.yy"
    {}
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 16361 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 16362 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 16363 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 16367 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 16368 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 16373 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 16375 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 16380 "sql_yacc.yy"
    {}
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 16381 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 16386 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 16396 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 41870 "y.tab.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



